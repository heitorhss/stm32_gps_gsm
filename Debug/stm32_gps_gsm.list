
stm32_gps_gsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b94  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c8c  08004c8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c8c  08004c8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c8c  08004c8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c8c  08004c8c  00014c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c90  08004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000000c  08004ca0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08004ca0  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087d1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001659  00000000  00000000  00028805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  00029e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  0002a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f88f  00000000  00000000  0002aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000933f  00000000  00000000  0003a337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ce7c  00000000  00000000  00043676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a04f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000155c  00000000  00000000  000a0544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c3c 	.word	0x08004c3c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004c3c 	.word	0x08004c3c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_UART_RxCpltCallback>:

bool ctrl_uart1 = false;
bool ctrl_uart2 = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a11      	ldr	r2, [pc, #68]	; (8000284 <HAL_UART_RxCpltCallback+0x54>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d10b      	bne.n	800025a <HAL_UART_RxCpltCallback+0x2a>
	{
		MX_USART1_UART_Init();
 8000242:	f001 feb9 	bl	8001fb8 <MX_USART1_UART_Init>
		HAL_UART_Receive_IT(&huart1, data_in_uart1, 400);
 8000246:	23c8      	movs	r3, #200	; 0xc8
 8000248:	005a      	lsls	r2, r3, #1
 800024a:	490f      	ldr	r1, [pc, #60]	; (8000288 <HAL_UART_RxCpltCallback+0x58>)
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <HAL_UART_RxCpltCallback+0x5c>)
 800024e:	0018      	movs	r0, r3
 8000250:	f003 fbe3 	bl	8003a1a <HAL_UART_Receive_IT>
		ctrl_uart1 = true;
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <HAL_UART_RxCpltCallback+0x60>)
 8000256:	2201      	movs	r2, #1
 8000258:	701a      	strb	r2, [r3, #0]
	}
	if(huart -> Instance == USART2)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <HAL_UART_RxCpltCallback+0x64>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d10a      	bne.n	800027a <HAL_UART_RxCpltCallback+0x4a>
	{
		MX_USART2_UART_Init();
 8000264:	f001 fed8 	bl	8002018 <MX_USART2_UART_Init>
		HAL_UART_Receive_IT(&huart2, data_in_uart2, 60);
 8000268:	490b      	ldr	r1, [pc, #44]	; (8000298 <HAL_UART_RxCpltCallback+0x68>)
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <HAL_UART_RxCpltCallback+0x6c>)
 800026c:	223c      	movs	r2, #60	; 0x3c
 800026e:	0018      	movs	r0, r3
 8000270:	f003 fbd3 	bl	8003a1a <HAL_UART_Receive_IT>
		ctrl_uart2 = true;
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <HAL_UART_RxCpltCallback+0x70>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
	}
}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	b002      	add	sp, #8
 8000280:	bd80      	pop	{r7, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	40013800 	.word	0x40013800
 8000288:	20000174 	.word	0x20000174
 800028c:	20000028 	.word	0x20000028
 8000290:	20000345 	.word	0x20000345
 8000294:	40004400 	.word	0x40004400
 8000298:	20000308 	.word	0x20000308
 800029c:	200000ac 	.word	0x200000ac
 80002a0:	20000346 	.word	0x20000346

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b5b0      	push	{r4, r5, r7, lr}
 80002a6:	4cfe      	ldr	r4, [pc, #1016]	; (80006a0 <main+0x3fc>)
 80002a8:	44a5      	add	sp, r4
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	unsigned char data_filter_uart1[100] = {0};
 80002ac:	23bf      	movs	r3, #191	; 0xbf
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	3304      	adds	r3, #4
 80002b8:	2260      	movs	r2, #96	; 0x60
 80002ba:	2100      	movs	r1, #0
 80002bc:	0018      	movs	r0, r3
 80002be:	f004 fcb5 	bl	8004c2c <memset>
	unsigned char data_filter_uart2[100] = {0};
 80002c2:	23a6      	movs	r3, #166	; 0xa6
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	3304      	adds	r3, #4
 80002ce:	2260      	movs	r2, #96	; 0x60
 80002d0:	2100      	movs	r1, #0
 80002d2:	0018      	movs	r0, r3
 80002d4:	f004 fcaa 	bl	8004c2c <memset>

	//unsigned char error_msg_ID[5] = {0}; // VARIAVEL EM DESUSO
	//error_msg_ID[0] = 0x49;
	//error_msg_ID[1] = 0x44; //mensagem de erro: "ID" invalid data

	unsigned char error_msg_NC[5] = {0};
 80002d8:	21a4      	movs	r1, #164	; 0xa4
 80002da:	0089      	lsls	r1, r1, #2
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	2200      	movs	r2, #0
 80002e4:	711a      	strb	r2, [r3, #4]
	error_msg_NC[0] = 0x4E;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	224e      	movs	r2, #78	; 0x4e
 80002ea:	701a      	strb	r2, [r3, #0]
	error_msg_NC[1] = 0x43; // mensagem de erro: "NC" no connectivity
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2243      	movs	r2, #67	; 0x43
 80002f0:	705a      	strb	r2, [r3, #1]

	unsigned char send_msg[2] = {0};
 80002f2:	21a3      	movs	r1, #163	; 0xa3
 80002f4:	0089      	lsls	r1, r1, #2
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	801a      	strh	r2, [r3, #0]
	send_msg[0] = 0x1A;  //send msg = ctrl+z
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	221a      	movs	r2, #26
 8000300:	701a      	strb	r2, [r3, #0]

	bool ctrl_creg_loop = false;
 8000302:	4be8      	ldr	r3, [pc, #928]	; (80006a4 <main+0x400>)
 8000304:	18fb      	adds	r3, r7, r3
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
	uint8_t cont_loop1 = 0;
 800030a:	4be7      	ldr	r3, [pc, #924]	; (80006a8 <main+0x404>)
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]

	// DEFININDO COMANDOS AT
	unsigned char at_command[11][50] = {{0},{0}};
 8000312:	4be6      	ldr	r3, [pc, #920]	; (80006ac <main+0x408>)
 8000314:	24dc      	movs	r4, #220	; 0xdc
 8000316:	00a4      	lsls	r4, r4, #2
 8000318:	191b      	adds	r3, r3, r4
 800031a:	19db      	adds	r3, r3, r7
 800031c:	0018      	movs	r0, r3
 800031e:	4be4      	ldr	r3, [pc, #912]	; (80006b0 <main+0x40c>)
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f004 fc82 	bl	8004c2c <memset>

	at_command[AT][0] = 0x41; //A
 8000328:	4be0      	ldr	r3, [pc, #896]	; (80006ac <main+0x408>)
 800032a:	0020      	movs	r0, r4
 800032c:	181b      	adds	r3, r3, r0
 800032e:	19db      	adds	r3, r3, r7
 8000330:	2241      	movs	r2, #65	; 0x41
 8000332:	701a      	strb	r2, [r3, #0]
	at_command[AT][1] = 0x54; //T
 8000334:	4bdd      	ldr	r3, [pc, #884]	; (80006ac <main+0x408>)
 8000336:	181b      	adds	r3, r3, r0
 8000338:	19db      	adds	r3, r3, r7
 800033a:	2254      	movs	r2, #84	; 0x54
 800033c:	705a      	strb	r2, [r3, #1]
	at_command[AT][2] = 0x0A; //enter
 800033e:	4bdb      	ldr	r3, [pc, #876]	; (80006ac <main+0x408>)
 8000340:	181b      	adds	r3, r3, r0
 8000342:	19db      	adds	r3, r3, r7
 8000344:	220a      	movs	r2, #10
 8000346:	709a      	strb	r2, [r3, #2]

	at_command[AT_CFUN][0] = 0x41; //A
 8000348:	4bd8      	ldr	r3, [pc, #864]	; (80006ac <main+0x408>)
 800034a:	181b      	adds	r3, r3, r0
 800034c:	19db      	adds	r3, r3, r7
 800034e:	2232      	movs	r2, #50	; 0x32
 8000350:	2141      	movs	r1, #65	; 0x41
 8000352:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][1] = 0x54; //T
 8000354:	4bd5      	ldr	r3, [pc, #852]	; (80006ac <main+0x408>)
 8000356:	181b      	adds	r3, r3, r0
 8000358:	19db      	adds	r3, r3, r7
 800035a:	2233      	movs	r2, #51	; 0x33
 800035c:	2154      	movs	r1, #84	; 0x54
 800035e:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][2] = 0x2B; //+
 8000360:	4bd2      	ldr	r3, [pc, #840]	; (80006ac <main+0x408>)
 8000362:	181b      	adds	r3, r3, r0
 8000364:	19db      	adds	r3, r3, r7
 8000366:	2234      	movs	r2, #52	; 0x34
 8000368:	212b      	movs	r1, #43	; 0x2b
 800036a:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][3] = 0x43; //C
 800036c:	4bcf      	ldr	r3, [pc, #828]	; (80006ac <main+0x408>)
 800036e:	181b      	adds	r3, r3, r0
 8000370:	19db      	adds	r3, r3, r7
 8000372:	2235      	movs	r2, #53	; 0x35
 8000374:	2143      	movs	r1, #67	; 0x43
 8000376:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][4] = 0x46; //F
 8000378:	4bcc      	ldr	r3, [pc, #816]	; (80006ac <main+0x408>)
 800037a:	181b      	adds	r3, r3, r0
 800037c:	19db      	adds	r3, r3, r7
 800037e:	2236      	movs	r2, #54	; 0x36
 8000380:	2146      	movs	r1, #70	; 0x46
 8000382:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][5] = 0x55; //U
 8000384:	4bc9      	ldr	r3, [pc, #804]	; (80006ac <main+0x408>)
 8000386:	181b      	adds	r3, r3, r0
 8000388:	19db      	adds	r3, r3, r7
 800038a:	2237      	movs	r2, #55	; 0x37
 800038c:	2155      	movs	r1, #85	; 0x55
 800038e:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][6] = 0x4E; //N
 8000390:	4bc6      	ldr	r3, [pc, #792]	; (80006ac <main+0x408>)
 8000392:	181b      	adds	r3, r3, r0
 8000394:	19db      	adds	r3, r3, r7
 8000396:	2238      	movs	r2, #56	; 0x38
 8000398:	214e      	movs	r1, #78	; 0x4e
 800039a:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][7] = 0x3D; //=
 800039c:	4bc3      	ldr	r3, [pc, #780]	; (80006ac <main+0x408>)
 800039e:	181b      	adds	r3, r3, r0
 80003a0:	19db      	adds	r3, r3, r7
 80003a2:	2239      	movs	r2, #57	; 0x39
 80003a4:	213d      	movs	r1, #61	; 0x3d
 80003a6:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][8] = 0x31; //1
 80003a8:	4bc0      	ldr	r3, [pc, #768]	; (80006ac <main+0x408>)
 80003aa:	181b      	adds	r3, r3, r0
 80003ac:	19db      	adds	r3, r3, r7
 80003ae:	223a      	movs	r2, #58	; 0x3a
 80003b0:	2131      	movs	r1, #49	; 0x31
 80003b2:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][9] = 0x0A; //enter
 80003b4:	4bbd      	ldr	r3, [pc, #756]	; (80006ac <main+0x408>)
 80003b6:	181b      	adds	r3, r3, r0
 80003b8:	19db      	adds	r3, r3, r7
 80003ba:	223b      	movs	r2, #59	; 0x3b
 80003bc:	210a      	movs	r1, #10
 80003be:	5499      	strb	r1, [r3, r2]

	at_command[AT_CPIN][0] = 0x41; //A
 80003c0:	4bba      	ldr	r3, [pc, #744]	; (80006ac <main+0x408>)
 80003c2:	181b      	adds	r3, r3, r0
 80003c4:	19db      	adds	r3, r3, r7
 80003c6:	2264      	movs	r2, #100	; 0x64
 80003c8:	2141      	movs	r1, #65	; 0x41
 80003ca:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][1] = 0x54; //T
 80003cc:	4bb7      	ldr	r3, [pc, #732]	; (80006ac <main+0x408>)
 80003ce:	181b      	adds	r3, r3, r0
 80003d0:	19db      	adds	r3, r3, r7
 80003d2:	2265      	movs	r2, #101	; 0x65
 80003d4:	2154      	movs	r1, #84	; 0x54
 80003d6:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][2] = 0x2B; //+
 80003d8:	4bb4      	ldr	r3, [pc, #720]	; (80006ac <main+0x408>)
 80003da:	181b      	adds	r3, r3, r0
 80003dc:	19db      	adds	r3, r3, r7
 80003de:	2266      	movs	r2, #102	; 0x66
 80003e0:	212b      	movs	r1, #43	; 0x2b
 80003e2:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][3] = 0x43; //C
 80003e4:	4bb1      	ldr	r3, [pc, #708]	; (80006ac <main+0x408>)
 80003e6:	181b      	adds	r3, r3, r0
 80003e8:	19db      	adds	r3, r3, r7
 80003ea:	2267      	movs	r2, #103	; 0x67
 80003ec:	2143      	movs	r1, #67	; 0x43
 80003ee:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][4] = 0x50; //P
 80003f0:	4bae      	ldr	r3, [pc, #696]	; (80006ac <main+0x408>)
 80003f2:	181b      	adds	r3, r3, r0
 80003f4:	19db      	adds	r3, r3, r7
 80003f6:	2268      	movs	r2, #104	; 0x68
 80003f8:	2150      	movs	r1, #80	; 0x50
 80003fa:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][5] = 0x49; //I
 80003fc:	4bab      	ldr	r3, [pc, #684]	; (80006ac <main+0x408>)
 80003fe:	181b      	adds	r3, r3, r0
 8000400:	19db      	adds	r3, r3, r7
 8000402:	2269      	movs	r2, #105	; 0x69
 8000404:	2149      	movs	r1, #73	; 0x49
 8000406:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][6] = 0x4E; //N
 8000408:	4ba8      	ldr	r3, [pc, #672]	; (80006ac <main+0x408>)
 800040a:	181b      	adds	r3, r3, r0
 800040c:	19db      	adds	r3, r3, r7
 800040e:	226a      	movs	r2, #106	; 0x6a
 8000410:	214e      	movs	r1, #78	; 0x4e
 8000412:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][7] = 0x3F; //?
 8000414:	4ba5      	ldr	r3, [pc, #660]	; (80006ac <main+0x408>)
 8000416:	181b      	adds	r3, r3, r0
 8000418:	19db      	adds	r3, r3, r7
 800041a:	226b      	movs	r2, #107	; 0x6b
 800041c:	213f      	movs	r1, #63	; 0x3f
 800041e:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][8] = 0x0A; //enter
 8000420:	4ba2      	ldr	r3, [pc, #648]	; (80006ac <main+0x408>)
 8000422:	181b      	adds	r3, r3, r0
 8000424:	19db      	adds	r3, r3, r7
 8000426:	226c      	movs	r2, #108	; 0x6c
 8000428:	210a      	movs	r1, #10
 800042a:	5499      	strb	r1, [r3, r2]

	at_command[AT_CREG][0] = 0x41; //A
 800042c:	4b9f      	ldr	r3, [pc, #636]	; (80006ac <main+0x408>)
 800042e:	181b      	adds	r3, r3, r0
 8000430:	19db      	adds	r3, r3, r7
 8000432:	2296      	movs	r2, #150	; 0x96
 8000434:	2141      	movs	r1, #65	; 0x41
 8000436:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][1] = 0x54; //T
 8000438:	4b9c      	ldr	r3, [pc, #624]	; (80006ac <main+0x408>)
 800043a:	181b      	adds	r3, r3, r0
 800043c:	19db      	adds	r3, r3, r7
 800043e:	2297      	movs	r2, #151	; 0x97
 8000440:	2154      	movs	r1, #84	; 0x54
 8000442:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][2] = 0x2B; //+
 8000444:	4b99      	ldr	r3, [pc, #612]	; (80006ac <main+0x408>)
 8000446:	181b      	adds	r3, r3, r0
 8000448:	19db      	adds	r3, r3, r7
 800044a:	2298      	movs	r2, #152	; 0x98
 800044c:	212b      	movs	r1, #43	; 0x2b
 800044e:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][3] = 0x43; //C
 8000450:	4b96      	ldr	r3, [pc, #600]	; (80006ac <main+0x408>)
 8000452:	181b      	adds	r3, r3, r0
 8000454:	19db      	adds	r3, r3, r7
 8000456:	2299      	movs	r2, #153	; 0x99
 8000458:	2143      	movs	r1, #67	; 0x43
 800045a:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][4] = 0x52; //R
 800045c:	4b93      	ldr	r3, [pc, #588]	; (80006ac <main+0x408>)
 800045e:	181b      	adds	r3, r3, r0
 8000460:	19db      	adds	r3, r3, r7
 8000462:	229a      	movs	r2, #154	; 0x9a
 8000464:	2152      	movs	r1, #82	; 0x52
 8000466:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][5] = 0x45; //E
 8000468:	4b90      	ldr	r3, [pc, #576]	; (80006ac <main+0x408>)
 800046a:	181b      	adds	r3, r3, r0
 800046c:	19db      	adds	r3, r3, r7
 800046e:	229b      	movs	r2, #155	; 0x9b
 8000470:	2145      	movs	r1, #69	; 0x45
 8000472:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][6] = 0x47; //G
 8000474:	4b8d      	ldr	r3, [pc, #564]	; (80006ac <main+0x408>)
 8000476:	181b      	adds	r3, r3, r0
 8000478:	19db      	adds	r3, r3, r7
 800047a:	229c      	movs	r2, #156	; 0x9c
 800047c:	2147      	movs	r1, #71	; 0x47
 800047e:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][7] = 0x3F; //?
 8000480:	4b8a      	ldr	r3, [pc, #552]	; (80006ac <main+0x408>)
 8000482:	181b      	adds	r3, r3, r0
 8000484:	19db      	adds	r3, r3, r7
 8000486:	229d      	movs	r2, #157	; 0x9d
 8000488:	213f      	movs	r1, #63	; 0x3f
 800048a:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][8] = 0x0A; //enter
 800048c:	4b87      	ldr	r3, [pc, #540]	; (80006ac <main+0x408>)
 800048e:	181b      	adds	r3, r3, r0
 8000490:	19db      	adds	r3, r3, r7
 8000492:	229e      	movs	r2, #158	; 0x9e
 8000494:	210a      	movs	r1, #10
 8000496:	5499      	strb	r1, [r3, r2]

	at_command[AT_CSQ][0] = 0x41; //A
 8000498:	4b84      	ldr	r3, [pc, #528]	; (80006ac <main+0x408>)
 800049a:	181b      	adds	r3, r3, r0
 800049c:	19db      	adds	r3, r3, r7
 800049e:	22c8      	movs	r2, #200	; 0xc8
 80004a0:	2141      	movs	r1, #65	; 0x41
 80004a2:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSQ][1] = 0x54; //T
 80004a4:	4b81      	ldr	r3, [pc, #516]	; (80006ac <main+0x408>)
 80004a6:	181b      	adds	r3, r3, r0
 80004a8:	19db      	adds	r3, r3, r7
 80004aa:	22c9      	movs	r2, #201	; 0xc9
 80004ac:	2154      	movs	r1, #84	; 0x54
 80004ae:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSQ][2] = 0x2B; //+
 80004b0:	4b7e      	ldr	r3, [pc, #504]	; (80006ac <main+0x408>)
 80004b2:	181b      	adds	r3, r3, r0
 80004b4:	19db      	adds	r3, r3, r7
 80004b6:	22ca      	movs	r2, #202	; 0xca
 80004b8:	212b      	movs	r1, #43	; 0x2b
 80004ba:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSQ][3] = 0x43; //C
 80004bc:	4b7b      	ldr	r3, [pc, #492]	; (80006ac <main+0x408>)
 80004be:	181b      	adds	r3, r3, r0
 80004c0:	19db      	adds	r3, r3, r7
 80004c2:	22cb      	movs	r2, #203	; 0xcb
 80004c4:	2143      	movs	r1, #67	; 0x43
 80004c6:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSQ][4] = 0x53; //S
 80004c8:	4b78      	ldr	r3, [pc, #480]	; (80006ac <main+0x408>)
 80004ca:	181b      	adds	r3, r3, r0
 80004cc:	19db      	adds	r3, r3, r7
 80004ce:	22cc      	movs	r2, #204	; 0xcc
 80004d0:	2153      	movs	r1, #83	; 0x53
 80004d2:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSQ][5] = 0x51; //Q
 80004d4:	4b75      	ldr	r3, [pc, #468]	; (80006ac <main+0x408>)
 80004d6:	181b      	adds	r3, r3, r0
 80004d8:	19db      	adds	r3, r3, r7
 80004da:	22cd      	movs	r2, #205	; 0xcd
 80004dc:	2151      	movs	r1, #81	; 0x51
 80004de:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSQ][6] = 0x0A; //?
 80004e0:	4b72      	ldr	r3, [pc, #456]	; (80006ac <main+0x408>)
 80004e2:	181b      	adds	r3, r3, r0
 80004e4:	19db      	adds	r3, r3, r7
 80004e6:	22ce      	movs	r2, #206	; 0xce
 80004e8:	210a      	movs	r1, #10
 80004ea:	5499      	strb	r1, [r3, r2]

	at_command[AT_CSTT][0]  = 0x41; //A
 80004ec:	4b6f      	ldr	r3, [pc, #444]	; (80006ac <main+0x408>)
 80004ee:	181b      	adds	r3, r3, r0
 80004f0:	19db      	adds	r3, r3, r7
 80004f2:	22fa      	movs	r2, #250	; 0xfa
 80004f4:	2141      	movs	r1, #65	; 0x41
 80004f6:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSTT][1]  = 0x54; //T
 80004f8:	4b6c      	ldr	r3, [pc, #432]	; (80006ac <main+0x408>)
 80004fa:	181b      	adds	r3, r3, r0
 80004fc:	19db      	adds	r3, r3, r7
 80004fe:	22fb      	movs	r2, #251	; 0xfb
 8000500:	2154      	movs	r1, #84	; 0x54
 8000502:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSTT][2]  = 0x2B; //+
 8000504:	4b69      	ldr	r3, [pc, #420]	; (80006ac <main+0x408>)
 8000506:	181b      	adds	r3, r3, r0
 8000508:	19db      	adds	r3, r3, r7
 800050a:	22fc      	movs	r2, #252	; 0xfc
 800050c:	212b      	movs	r1, #43	; 0x2b
 800050e:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSTT][3]  = 0x43; //C
 8000510:	4b66      	ldr	r3, [pc, #408]	; (80006ac <main+0x408>)
 8000512:	181b      	adds	r3, r3, r0
 8000514:	19db      	adds	r3, r3, r7
 8000516:	22fd      	movs	r2, #253	; 0xfd
 8000518:	2143      	movs	r1, #67	; 0x43
 800051a:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSTT][4]  = 0x53; //S
 800051c:	4b63      	ldr	r3, [pc, #396]	; (80006ac <main+0x408>)
 800051e:	181b      	adds	r3, r3, r0
 8000520:	19db      	adds	r3, r3, r7
 8000522:	22fe      	movs	r2, #254	; 0xfe
 8000524:	2153      	movs	r1, #83	; 0x53
 8000526:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSTT][5]  = 0x54; //T
 8000528:	4b60      	ldr	r3, [pc, #384]	; (80006ac <main+0x408>)
 800052a:	181b      	adds	r3, r3, r0
 800052c:	19db      	adds	r3, r3, r7
 800052e:	22ff      	movs	r2, #255	; 0xff
 8000530:	2154      	movs	r1, #84	; 0x54
 8000532:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSTT][6]  = 0x54; //T
 8000534:	4b5d      	ldr	r3, [pc, #372]	; (80006ac <main+0x408>)
 8000536:	181b      	adds	r3, r3, r0
 8000538:	19da      	adds	r2, r3, r7
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	2154      	movs	r1, #84	; 0x54
 8000540:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][7]  = 0x3D; //=
 8000542:	4b5a      	ldr	r3, [pc, #360]	; (80006ac <main+0x408>)
 8000544:	181b      	adds	r3, r3, r0
 8000546:	19da      	adds	r2, r3, r7
 8000548:	2302      	movs	r3, #2
 800054a:	33ff      	adds	r3, #255	; 0xff
 800054c:	213d      	movs	r1, #61	; 0x3d
 800054e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][8]  = 0x22; //"
 8000550:	4b56      	ldr	r3, [pc, #344]	; (80006ac <main+0x408>)
 8000552:	181b      	adds	r3, r3, r0
 8000554:	19da      	adds	r2, r3, r7
 8000556:	2381      	movs	r3, #129	; 0x81
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	2122      	movs	r1, #34	; 0x22
 800055c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][9]  = 0x74; //t
 800055e:	4b53      	ldr	r3, [pc, #332]	; (80006ac <main+0x408>)
 8000560:	181b      	adds	r3, r3, r0
 8000562:	19da      	adds	r2, r3, r7
 8000564:	2304      	movs	r3, #4
 8000566:	33ff      	adds	r3, #255	; 0xff
 8000568:	2174      	movs	r1, #116	; 0x74
 800056a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][10] = 0x69; //i
 800056c:	4b4f      	ldr	r3, [pc, #316]	; (80006ac <main+0x408>)
 800056e:	181b      	adds	r3, r3, r0
 8000570:	19da      	adds	r2, r3, r7
 8000572:	2382      	movs	r3, #130	; 0x82
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	2169      	movs	r1, #105	; 0x69
 8000578:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][11] = 0x6D; //m
 800057a:	4b4c      	ldr	r3, [pc, #304]	; (80006ac <main+0x408>)
 800057c:	181b      	adds	r3, r3, r0
 800057e:	19da      	adds	r2, r3, r7
 8000580:	2306      	movs	r3, #6
 8000582:	33ff      	adds	r3, #255	; 0xff
 8000584:	216d      	movs	r1, #109	; 0x6d
 8000586:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][12] = 0x62; //b
 8000588:	4b48      	ldr	r3, [pc, #288]	; (80006ac <main+0x408>)
 800058a:	181b      	adds	r3, r3, r0
 800058c:	19da      	adds	r2, r3, r7
 800058e:	2383      	movs	r3, #131	; 0x83
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	2162      	movs	r1, #98	; 0x62
 8000594:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][13] = 0x72; //r
 8000596:	4b45      	ldr	r3, [pc, #276]	; (80006ac <main+0x408>)
 8000598:	181b      	adds	r3, r3, r0
 800059a:	19da      	adds	r2, r3, r7
 800059c:	2308      	movs	r3, #8
 800059e:	33ff      	adds	r3, #255	; 0xff
 80005a0:	2172      	movs	r1, #114	; 0x72
 80005a2:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][14] = 0x61; //a
 80005a4:	4b41      	ldr	r3, [pc, #260]	; (80006ac <main+0x408>)
 80005a6:	181b      	adds	r3, r3, r0
 80005a8:	19da      	adds	r2, r3, r7
 80005aa:	2384      	movs	r3, #132	; 0x84
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	2161      	movs	r1, #97	; 0x61
 80005b0:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][15] = 0x73; //s
 80005b2:	4b3e      	ldr	r3, [pc, #248]	; (80006ac <main+0x408>)
 80005b4:	181b      	adds	r3, r3, r0
 80005b6:	19da      	adds	r2, r3, r7
 80005b8:	230a      	movs	r3, #10
 80005ba:	33ff      	adds	r3, #255	; 0xff
 80005bc:	2173      	movs	r1, #115	; 0x73
 80005be:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][16] = 0x69; //i
 80005c0:	4b3a      	ldr	r3, [pc, #232]	; (80006ac <main+0x408>)
 80005c2:	181b      	adds	r3, r3, r0
 80005c4:	19da      	adds	r2, r3, r7
 80005c6:	2385      	movs	r3, #133	; 0x85
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	2169      	movs	r1, #105	; 0x69
 80005cc:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][17] = 0x6C; //l
 80005ce:	4b37      	ldr	r3, [pc, #220]	; (80006ac <main+0x408>)
 80005d0:	181b      	adds	r3, r3, r0
 80005d2:	19da      	adds	r2, r3, r7
 80005d4:	230c      	movs	r3, #12
 80005d6:	33ff      	adds	r3, #255	; 0xff
 80005d8:	216c      	movs	r1, #108	; 0x6c
 80005da:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][18] = 0x2E; //.
 80005dc:	4b33      	ldr	r3, [pc, #204]	; (80006ac <main+0x408>)
 80005de:	181b      	adds	r3, r3, r0
 80005e0:	19da      	adds	r2, r3, r7
 80005e2:	2386      	movs	r3, #134	; 0x86
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	212e      	movs	r1, #46	; 0x2e
 80005e8:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][19] = 0x62; //b
 80005ea:	4b30      	ldr	r3, [pc, #192]	; (80006ac <main+0x408>)
 80005ec:	181b      	adds	r3, r3, r0
 80005ee:	19da      	adds	r2, r3, r7
 80005f0:	230e      	movs	r3, #14
 80005f2:	33ff      	adds	r3, #255	; 0xff
 80005f4:	2162      	movs	r1, #98	; 0x62
 80005f6:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][20] = 0x72; //r
 80005f8:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <main+0x408>)
 80005fa:	181b      	adds	r3, r3, r0
 80005fc:	19da      	adds	r2, r3, r7
 80005fe:	2387      	movs	r3, #135	; 0x87
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	2172      	movs	r1, #114	; 0x72
 8000604:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][21] = 0x22; //"
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <main+0x408>)
 8000608:	181b      	adds	r3, r3, r0
 800060a:	19da      	adds	r2, r3, r7
 800060c:	2310      	movs	r3, #16
 800060e:	33ff      	adds	r3, #255	; 0xff
 8000610:	2122      	movs	r1, #34	; 0x22
 8000612:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][22] = 0x2C; //,
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <main+0x408>)
 8000616:	181b      	adds	r3, r3, r0
 8000618:	19da      	adds	r2, r3, r7
 800061a:	2388      	movs	r3, #136	; 0x88
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	212c      	movs	r1, #44	; 0x2c
 8000620:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][23] = 0x22; //"
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <main+0x408>)
 8000624:	181b      	adds	r3, r3, r0
 8000626:	19da      	adds	r2, r3, r7
 8000628:	2312      	movs	r3, #18
 800062a:	33ff      	adds	r3, #255	; 0xff
 800062c:	2122      	movs	r1, #34	; 0x22
 800062e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][24] = 0x22; //"
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <main+0x408>)
 8000632:	181b      	adds	r3, r3, r0
 8000634:	19da      	adds	r2, r3, r7
 8000636:	2389      	movs	r3, #137	; 0x89
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	2122      	movs	r1, #34	; 0x22
 800063c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][25] = 0x2C; //,
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <main+0x408>)
 8000640:	181b      	adds	r3, r3, r0
 8000642:	19da      	adds	r2, r3, r7
 8000644:	2314      	movs	r3, #20
 8000646:	33ff      	adds	r3, #255	; 0xff
 8000648:	212c      	movs	r1, #44	; 0x2c
 800064a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][26] = 0x22; //"
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <main+0x408>)
 800064e:	181b      	adds	r3, r3, r0
 8000650:	19da      	adds	r2, r3, r7
 8000652:	238a      	movs	r3, #138	; 0x8a
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	2122      	movs	r1, #34	; 0x22
 8000658:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][27] = 0x22; //"
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <main+0x408>)
 800065c:	181b      	adds	r3, r3, r0
 800065e:	19da      	adds	r2, r3, r7
 8000660:	2316      	movs	r3, #22
 8000662:	33ff      	adds	r3, #255	; 0xff
 8000664:	2122      	movs	r1, #34	; 0x22
 8000666:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][28] = 0x0A; //enter
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <main+0x408>)
 800066a:	181b      	adds	r3, r3, r0
 800066c:	19da      	adds	r2, r3, r7
 800066e:	238b      	movs	r3, #139	; 0x8b
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	210a      	movs	r1, #10
 8000674:	54d1      	strb	r1, [r2, r3]

	at_command[AT_CIICR][0] = 0x41; //A
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <main+0x408>)
 8000678:	181b      	adds	r3, r3, r0
 800067a:	19da      	adds	r2, r3, r7
 800067c:	2396      	movs	r3, #150	; 0x96
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	2141      	movs	r1, #65	; 0x41
 8000682:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][1] = 0x54; //T
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <main+0x408>)
 8000686:	181b      	adds	r3, r3, r0
 8000688:	19da      	adds	r2, r3, r7
 800068a:	232e      	movs	r3, #46	; 0x2e
 800068c:	33ff      	adds	r3, #255	; 0xff
 800068e:	2154      	movs	r1, #84	; 0x54
 8000690:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][2] = 0x2B; //+
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <main+0x408>)
 8000694:	181b      	adds	r3, r3, r0
 8000696:	19da      	adds	r2, r3, r7
 8000698:	2397      	movs	r3, #151	; 0x97
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	212b      	movs	r1, #43	; 0x2b
 800069e:	e009      	b.n	80006b4 <main+0x410>
 80006a0:	fffffc90 	.word	0xfffffc90
 80006a4:	0000036f 	.word	0x0000036f
 80006a8:	0000036e 	.word	0x0000036e
 80006ac:	fffffcf4 	.word	0xfffffcf4
 80006b0:	00000226 	.word	0x00000226
 80006b4:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][3] = 0x43; //C
 80006b6:	4bfe      	ldr	r3, [pc, #1016]	; (8000ab0 <main+0x80c>)
 80006b8:	181b      	adds	r3, r3, r0
 80006ba:	19da      	adds	r2, r3, r7
 80006bc:	2330      	movs	r3, #48	; 0x30
 80006be:	33ff      	adds	r3, #255	; 0xff
 80006c0:	2143      	movs	r1, #67	; 0x43
 80006c2:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][4] = 0x49; //I
 80006c4:	4bfa      	ldr	r3, [pc, #1000]	; (8000ab0 <main+0x80c>)
 80006c6:	181b      	adds	r3, r3, r0
 80006c8:	19da      	adds	r2, r3, r7
 80006ca:	2398      	movs	r3, #152	; 0x98
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	2149      	movs	r1, #73	; 0x49
 80006d0:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][5] = 0x49; //I
 80006d2:	4bf7      	ldr	r3, [pc, #988]	; (8000ab0 <main+0x80c>)
 80006d4:	181b      	adds	r3, r3, r0
 80006d6:	19da      	adds	r2, r3, r7
 80006d8:	2332      	movs	r3, #50	; 0x32
 80006da:	33ff      	adds	r3, #255	; 0xff
 80006dc:	2149      	movs	r1, #73	; 0x49
 80006de:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][6] = 0x43; //C
 80006e0:	4bf3      	ldr	r3, [pc, #972]	; (8000ab0 <main+0x80c>)
 80006e2:	181b      	adds	r3, r3, r0
 80006e4:	19da      	adds	r2, r3, r7
 80006e6:	2399      	movs	r3, #153	; 0x99
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	2143      	movs	r1, #67	; 0x43
 80006ec:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][7] = 0x52; //R
 80006ee:	4bf0      	ldr	r3, [pc, #960]	; (8000ab0 <main+0x80c>)
 80006f0:	181b      	adds	r3, r3, r0
 80006f2:	19da      	adds	r2, r3, r7
 80006f4:	2334      	movs	r3, #52	; 0x34
 80006f6:	33ff      	adds	r3, #255	; 0xff
 80006f8:	2152      	movs	r1, #82	; 0x52
 80006fa:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][8] = 0x0A; //enter
 80006fc:	4bec      	ldr	r3, [pc, #944]	; (8000ab0 <main+0x80c>)
 80006fe:	181b      	adds	r3, r3, r0
 8000700:	19da      	adds	r2, r3, r7
 8000702:	239a      	movs	r3, #154	; 0x9a
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	210a      	movs	r1, #10
 8000708:	54d1      	strb	r1, [r2, r3]

	at_command[AT_CIFSR][0] = 0x41; //A
 800070a:	4be9      	ldr	r3, [pc, #932]	; (8000ab0 <main+0x80c>)
 800070c:	181b      	adds	r3, r3, r0
 800070e:	19da      	adds	r2, r3, r7
 8000710:	23af      	movs	r3, #175	; 0xaf
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	2141      	movs	r1, #65	; 0x41
 8000716:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][1] = 0x54; //T
 8000718:	4be5      	ldr	r3, [pc, #916]	; (8000ab0 <main+0x80c>)
 800071a:	181b      	adds	r3, r3, r0
 800071c:	19da      	adds	r2, r3, r7
 800071e:	2360      	movs	r3, #96	; 0x60
 8000720:	33ff      	adds	r3, #255	; 0xff
 8000722:	2154      	movs	r1, #84	; 0x54
 8000724:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][2] = 0x2B; //+
 8000726:	4be2      	ldr	r3, [pc, #904]	; (8000ab0 <main+0x80c>)
 8000728:	181b      	adds	r3, r3, r0
 800072a:	19da      	adds	r2, r3, r7
 800072c:	23b0      	movs	r3, #176	; 0xb0
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	212b      	movs	r1, #43	; 0x2b
 8000732:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][3] = 0x43; //C
 8000734:	4bde      	ldr	r3, [pc, #888]	; (8000ab0 <main+0x80c>)
 8000736:	181b      	adds	r3, r3, r0
 8000738:	19da      	adds	r2, r3, r7
 800073a:	2362      	movs	r3, #98	; 0x62
 800073c:	33ff      	adds	r3, #255	; 0xff
 800073e:	2143      	movs	r1, #67	; 0x43
 8000740:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][4] = 0x49; //I
 8000742:	4bdb      	ldr	r3, [pc, #876]	; (8000ab0 <main+0x80c>)
 8000744:	181b      	adds	r3, r3, r0
 8000746:	19da      	adds	r2, r3, r7
 8000748:	23b1      	movs	r3, #177	; 0xb1
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	2149      	movs	r1, #73	; 0x49
 800074e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][5] = 0x46; //F
 8000750:	4bd7      	ldr	r3, [pc, #860]	; (8000ab0 <main+0x80c>)
 8000752:	181b      	adds	r3, r3, r0
 8000754:	19da      	adds	r2, r3, r7
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	33ff      	adds	r3, #255	; 0xff
 800075a:	2146      	movs	r1, #70	; 0x46
 800075c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][6] = 0x53; //S
 800075e:	4bd4      	ldr	r3, [pc, #848]	; (8000ab0 <main+0x80c>)
 8000760:	181b      	adds	r3, r3, r0
 8000762:	19da      	adds	r2, r3, r7
 8000764:	23b2      	movs	r3, #178	; 0xb2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	2153      	movs	r1, #83	; 0x53
 800076a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][7] = 0x52; //R
 800076c:	4bd0      	ldr	r3, [pc, #832]	; (8000ab0 <main+0x80c>)
 800076e:	181b      	adds	r3, r3, r0
 8000770:	19da      	adds	r2, r3, r7
 8000772:	2366      	movs	r3, #102	; 0x66
 8000774:	33ff      	adds	r3, #255	; 0xff
 8000776:	2152      	movs	r1, #82	; 0x52
 8000778:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][8] = 0x0A; //enter
 800077a:	4bcd      	ldr	r3, [pc, #820]	; (8000ab0 <main+0x80c>)
 800077c:	181b      	adds	r3, r3, r0
 800077e:	19da      	adds	r2, r3, r7
 8000780:	23b3      	movs	r3, #179	; 0xb3
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	210a      	movs	r1, #10
 8000786:	54d1      	strb	r1, [r2, r3]

	at_command[AT_CIPSTART][0]  = 0x41; //A
 8000788:	4bc9      	ldr	r3, [pc, #804]	; (8000ab0 <main+0x80c>)
 800078a:	181b      	adds	r3, r3, r0
 800078c:	19da      	adds	r2, r3, r7
 800078e:	23c8      	movs	r3, #200	; 0xc8
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	2141      	movs	r1, #65	; 0x41
 8000794:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][1]  = 0x54; //T
 8000796:	4bc6      	ldr	r3, [pc, #792]	; (8000ab0 <main+0x80c>)
 8000798:	181b      	adds	r3, r3, r0
 800079a:	19da      	adds	r2, r3, r7
 800079c:	2392      	movs	r3, #146	; 0x92
 800079e:	33ff      	adds	r3, #255	; 0xff
 80007a0:	2154      	movs	r1, #84	; 0x54
 80007a2:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][2]  = 0x2B; //+
 80007a4:	4bc2      	ldr	r3, [pc, #776]	; (8000ab0 <main+0x80c>)
 80007a6:	181b      	adds	r3, r3, r0
 80007a8:	19da      	adds	r2, r3, r7
 80007aa:	23c9      	movs	r3, #201	; 0xc9
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	212b      	movs	r1, #43	; 0x2b
 80007b0:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][3]  = 0x43; //C
 80007b2:	4bbf      	ldr	r3, [pc, #764]	; (8000ab0 <main+0x80c>)
 80007b4:	181b      	adds	r3, r3, r0
 80007b6:	19da      	adds	r2, r3, r7
 80007b8:	2394      	movs	r3, #148	; 0x94
 80007ba:	33ff      	adds	r3, #255	; 0xff
 80007bc:	2143      	movs	r1, #67	; 0x43
 80007be:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][4]  = 0x49; //I
 80007c0:	4bbb      	ldr	r3, [pc, #748]	; (8000ab0 <main+0x80c>)
 80007c2:	181b      	adds	r3, r3, r0
 80007c4:	19da      	adds	r2, r3, r7
 80007c6:	23ca      	movs	r3, #202	; 0xca
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	2149      	movs	r1, #73	; 0x49
 80007cc:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][5]  = 0x50; //P
 80007ce:	4bb8      	ldr	r3, [pc, #736]	; (8000ab0 <main+0x80c>)
 80007d0:	181b      	adds	r3, r3, r0
 80007d2:	19da      	adds	r2, r3, r7
 80007d4:	2396      	movs	r3, #150	; 0x96
 80007d6:	33ff      	adds	r3, #255	; 0xff
 80007d8:	2150      	movs	r1, #80	; 0x50
 80007da:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][6]  = 0x53; //S
 80007dc:	4bb4      	ldr	r3, [pc, #720]	; (8000ab0 <main+0x80c>)
 80007de:	181b      	adds	r3, r3, r0
 80007e0:	19da      	adds	r2, r3, r7
 80007e2:	23cb      	movs	r3, #203	; 0xcb
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	2153      	movs	r1, #83	; 0x53
 80007e8:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][7]  = 0x54; //T
 80007ea:	4bb1      	ldr	r3, [pc, #708]	; (8000ab0 <main+0x80c>)
 80007ec:	181b      	adds	r3, r3, r0
 80007ee:	19da      	adds	r2, r3, r7
 80007f0:	2398      	movs	r3, #152	; 0x98
 80007f2:	33ff      	adds	r3, #255	; 0xff
 80007f4:	2154      	movs	r1, #84	; 0x54
 80007f6:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][8]  = 0x41; //A
 80007f8:	4bad      	ldr	r3, [pc, #692]	; (8000ab0 <main+0x80c>)
 80007fa:	181b      	adds	r3, r3, r0
 80007fc:	19da      	adds	r2, r3, r7
 80007fe:	23cc      	movs	r3, #204	; 0xcc
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	2141      	movs	r1, #65	; 0x41
 8000804:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][9]  = 0x52; //R
 8000806:	4baa      	ldr	r3, [pc, #680]	; (8000ab0 <main+0x80c>)
 8000808:	181b      	adds	r3, r3, r0
 800080a:	19da      	adds	r2, r3, r7
 800080c:	239a      	movs	r3, #154	; 0x9a
 800080e:	33ff      	adds	r3, #255	; 0xff
 8000810:	2152      	movs	r1, #82	; 0x52
 8000812:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][10] = 0x54; //T
 8000814:	4ba6      	ldr	r3, [pc, #664]	; (8000ab0 <main+0x80c>)
 8000816:	181b      	adds	r3, r3, r0
 8000818:	19da      	adds	r2, r3, r7
 800081a:	23cd      	movs	r3, #205	; 0xcd
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	2154      	movs	r1, #84	; 0x54
 8000820:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][11] = 0x3D; //=
 8000822:	4ba3      	ldr	r3, [pc, #652]	; (8000ab0 <main+0x80c>)
 8000824:	181b      	adds	r3, r3, r0
 8000826:	19da      	adds	r2, r3, r7
 8000828:	239c      	movs	r3, #156	; 0x9c
 800082a:	33ff      	adds	r3, #255	; 0xff
 800082c:	213d      	movs	r1, #61	; 0x3d
 800082e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][12] = 0x22; //"
 8000830:	4b9f      	ldr	r3, [pc, #636]	; (8000ab0 <main+0x80c>)
 8000832:	181b      	adds	r3, r3, r0
 8000834:	19da      	adds	r2, r3, r7
 8000836:	23ce      	movs	r3, #206	; 0xce
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	2122      	movs	r1, #34	; 0x22
 800083c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][13] = 0x54; //T
 800083e:	4b9c      	ldr	r3, [pc, #624]	; (8000ab0 <main+0x80c>)
 8000840:	181b      	adds	r3, r3, r0
 8000842:	19da      	adds	r2, r3, r7
 8000844:	239e      	movs	r3, #158	; 0x9e
 8000846:	33ff      	adds	r3, #255	; 0xff
 8000848:	2154      	movs	r1, #84	; 0x54
 800084a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][14] = 0x43; //C
 800084c:	4b98      	ldr	r3, [pc, #608]	; (8000ab0 <main+0x80c>)
 800084e:	181b      	adds	r3, r3, r0
 8000850:	19da      	adds	r2, r3, r7
 8000852:	23cf      	movs	r3, #207	; 0xcf
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	2143      	movs	r1, #67	; 0x43
 8000858:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][15] = 0x50; //P
 800085a:	4b95      	ldr	r3, [pc, #596]	; (8000ab0 <main+0x80c>)
 800085c:	181b      	adds	r3, r3, r0
 800085e:	19da      	adds	r2, r3, r7
 8000860:	23a0      	movs	r3, #160	; 0xa0
 8000862:	33ff      	adds	r3, #255	; 0xff
 8000864:	2150      	movs	r1, #80	; 0x50
 8000866:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][16] = 0x22; //"
 8000868:	4b91      	ldr	r3, [pc, #580]	; (8000ab0 <main+0x80c>)
 800086a:	181b      	adds	r3, r3, r0
 800086c:	19da      	adds	r2, r3, r7
 800086e:	23d0      	movs	r3, #208	; 0xd0
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	2122      	movs	r1, #34	; 0x22
 8000874:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][17] = 0x2C; //,
 8000876:	4b8e      	ldr	r3, [pc, #568]	; (8000ab0 <main+0x80c>)
 8000878:	181b      	adds	r3, r3, r0
 800087a:	19da      	adds	r2, r3, r7
 800087c:	23a2      	movs	r3, #162	; 0xa2
 800087e:	33ff      	adds	r3, #255	; 0xff
 8000880:	212c      	movs	r1, #44	; 0x2c
 8000882:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][18] = 0x22; //"
 8000884:	4b8a      	ldr	r3, [pc, #552]	; (8000ab0 <main+0x80c>)
 8000886:	181b      	adds	r3, r3, r0
 8000888:	19da      	adds	r2, r3, r7
 800088a:	23d1      	movs	r3, #209	; 0xd1
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2122      	movs	r1, #34	; 0x22
 8000890:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][19] = 0x6D; //m
 8000892:	4b87      	ldr	r3, [pc, #540]	; (8000ab0 <main+0x80c>)
 8000894:	181b      	adds	r3, r3, r0
 8000896:	19da      	adds	r2, r3, r7
 8000898:	23a4      	movs	r3, #164	; 0xa4
 800089a:	33ff      	adds	r3, #255	; 0xff
 800089c:	216d      	movs	r1, #109	; 0x6d
 800089e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][20] = 0x71; //q
 80008a0:	4b83      	ldr	r3, [pc, #524]	; (8000ab0 <main+0x80c>)
 80008a2:	181b      	adds	r3, r3, r0
 80008a4:	19da      	adds	r2, r3, r7
 80008a6:	23d2      	movs	r3, #210	; 0xd2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	2171      	movs	r1, #113	; 0x71
 80008ac:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][21] = 0x74; //t
 80008ae:	4b80      	ldr	r3, [pc, #512]	; (8000ab0 <main+0x80c>)
 80008b0:	181b      	adds	r3, r3, r0
 80008b2:	19da      	adds	r2, r3, r7
 80008b4:	23a6      	movs	r3, #166	; 0xa6
 80008b6:	33ff      	adds	r3, #255	; 0xff
 80008b8:	2174      	movs	r1, #116	; 0x74
 80008ba:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][22] = 0x74; //t
 80008bc:	4b7c      	ldr	r3, [pc, #496]	; (8000ab0 <main+0x80c>)
 80008be:	181b      	adds	r3, r3, r0
 80008c0:	19da      	adds	r2, r3, r7
 80008c2:	23d3      	movs	r3, #211	; 0xd3
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2174      	movs	r1, #116	; 0x74
 80008c8:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][23] = 0x2E; //.
 80008ca:	4b79      	ldr	r3, [pc, #484]	; (8000ab0 <main+0x80c>)
 80008cc:	181b      	adds	r3, r3, r0
 80008ce:	19da      	adds	r2, r3, r7
 80008d0:	23a8      	movs	r3, #168	; 0xa8
 80008d2:	33ff      	adds	r3, #255	; 0xff
 80008d4:	212e      	movs	r1, #46	; 0x2e
 80008d6:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][24] = 0x65; //e
 80008d8:	4b75      	ldr	r3, [pc, #468]	; (8000ab0 <main+0x80c>)
 80008da:	181b      	adds	r3, r3, r0
 80008dc:	19da      	adds	r2, r3, r7
 80008de:	23d4      	movs	r3, #212	; 0xd4
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	2165      	movs	r1, #101	; 0x65
 80008e4:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][25] = 0x63; //c
 80008e6:	4b72      	ldr	r3, [pc, #456]	; (8000ab0 <main+0x80c>)
 80008e8:	181b      	adds	r3, r3, r0
 80008ea:	19da      	adds	r2, r3, r7
 80008ec:	23aa      	movs	r3, #170	; 0xaa
 80008ee:	33ff      	adds	r3, #255	; 0xff
 80008f0:	2163      	movs	r1, #99	; 0x63
 80008f2:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][26] = 0x6C; //l
 80008f4:	4b6e      	ldr	r3, [pc, #440]	; (8000ab0 <main+0x80c>)
 80008f6:	181b      	adds	r3, r3, r0
 80008f8:	19da      	adds	r2, r3, r7
 80008fa:	23d5      	movs	r3, #213	; 0xd5
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	216c      	movs	r1, #108	; 0x6c
 8000900:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][27] = 0x69; //i
 8000902:	4b6b      	ldr	r3, [pc, #428]	; (8000ab0 <main+0x80c>)
 8000904:	181b      	adds	r3, r3, r0
 8000906:	19da      	adds	r2, r3, r7
 8000908:	23ac      	movs	r3, #172	; 0xac
 800090a:	33ff      	adds	r3, #255	; 0xff
 800090c:	2169      	movs	r1, #105	; 0x69
 800090e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][28] = 0x70; //p
 8000910:	4b67      	ldr	r3, [pc, #412]	; (8000ab0 <main+0x80c>)
 8000912:	181b      	adds	r3, r3, r0
 8000914:	19da      	adds	r2, r3, r7
 8000916:	23d6      	movs	r3, #214	; 0xd6
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2170      	movs	r1, #112	; 0x70
 800091c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][29] = 0x73; //s
 800091e:	4b64      	ldr	r3, [pc, #400]	; (8000ab0 <main+0x80c>)
 8000920:	181b      	adds	r3, r3, r0
 8000922:	19da      	adds	r2, r3, r7
 8000924:	23ae      	movs	r3, #174	; 0xae
 8000926:	33ff      	adds	r3, #255	; 0xff
 8000928:	2173      	movs	r1, #115	; 0x73
 800092a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][30] = 0x65; //e
 800092c:	4b60      	ldr	r3, [pc, #384]	; (8000ab0 <main+0x80c>)
 800092e:	181b      	adds	r3, r3, r0
 8000930:	19da      	adds	r2, r3, r7
 8000932:	23d7      	movs	r3, #215	; 0xd7
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	2165      	movs	r1, #101	; 0x65
 8000938:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][31] = 0x70; //p
 800093a:	4b5d      	ldr	r3, [pc, #372]	; (8000ab0 <main+0x80c>)
 800093c:	181b      	adds	r3, r3, r0
 800093e:	19da      	adds	r2, r3, r7
 8000940:	23b0      	movs	r3, #176	; 0xb0
 8000942:	33ff      	adds	r3, #255	; 0xff
 8000944:	2170      	movs	r1, #112	; 0x70
 8000946:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][32] = 0x72; //r
 8000948:	4b59      	ldr	r3, [pc, #356]	; (8000ab0 <main+0x80c>)
 800094a:	181b      	adds	r3, r3, r0
 800094c:	19da      	adds	r2, r3, r7
 800094e:	23d8      	movs	r3, #216	; 0xd8
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	2172      	movs	r1, #114	; 0x72
 8000954:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][33] = 0x6F; //o
 8000956:	4b56      	ldr	r3, [pc, #344]	; (8000ab0 <main+0x80c>)
 8000958:	181b      	adds	r3, r3, r0
 800095a:	19da      	adds	r2, r3, r7
 800095c:	23b2      	movs	r3, #178	; 0xb2
 800095e:	33ff      	adds	r3, #255	; 0xff
 8000960:	216f      	movs	r1, #111	; 0x6f
 8000962:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][34] = 0x6A; //j
 8000964:	4b52      	ldr	r3, [pc, #328]	; (8000ab0 <main+0x80c>)
 8000966:	181b      	adds	r3, r3, r0
 8000968:	19da      	adds	r2, r3, r7
 800096a:	23d9      	movs	r3, #217	; 0xd9
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	216a      	movs	r1, #106	; 0x6a
 8000970:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][35] = 0x65; //e
 8000972:	4b4f      	ldr	r3, [pc, #316]	; (8000ab0 <main+0x80c>)
 8000974:	181b      	adds	r3, r3, r0
 8000976:	19da      	adds	r2, r3, r7
 8000978:	23b4      	movs	r3, #180	; 0xb4
 800097a:	33ff      	adds	r3, #255	; 0xff
 800097c:	2165      	movs	r1, #101	; 0x65
 800097e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][36] = 0x63; //c
 8000980:	4b4b      	ldr	r3, [pc, #300]	; (8000ab0 <main+0x80c>)
 8000982:	181b      	adds	r3, r3, r0
 8000984:	19da      	adds	r2, r3, r7
 8000986:	23da      	movs	r3, #218	; 0xda
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	2163      	movs	r1, #99	; 0x63
 800098c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][37] = 0x74; //t
 800098e:	4b48      	ldr	r3, [pc, #288]	; (8000ab0 <main+0x80c>)
 8000990:	181b      	adds	r3, r3, r0
 8000992:	19da      	adds	r2, r3, r7
 8000994:	23b6      	movs	r3, #182	; 0xb6
 8000996:	33ff      	adds	r3, #255	; 0xff
 8000998:	2174      	movs	r1, #116	; 0x74
 800099a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][38] = 0x73; //s
 800099c:	4b44      	ldr	r3, [pc, #272]	; (8000ab0 <main+0x80c>)
 800099e:	181b      	adds	r3, r3, r0
 80009a0:	19da      	adds	r2, r3, r7
 80009a2:	23db      	movs	r3, #219	; 0xdb
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	2173      	movs	r1, #115	; 0x73
 80009a8:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][39] = 0x2E; //.
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <main+0x80c>)
 80009ac:	181b      	adds	r3, r3, r0
 80009ae:	19da      	adds	r2, r3, r7
 80009b0:	23b8      	movs	r3, #184	; 0xb8
 80009b2:	33ff      	adds	r3, #255	; 0xff
 80009b4:	212e      	movs	r1, #46	; 0x2e
 80009b6:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][40] = 0x69; //i
 80009b8:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <main+0x80c>)
 80009ba:	181b      	adds	r3, r3, r0
 80009bc:	19da      	adds	r2, r3, r7
 80009be:	23dc      	movs	r3, #220	; 0xdc
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2169      	movs	r1, #105	; 0x69
 80009c4:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][41] = 0x6F; //o
 80009c6:	4b3a      	ldr	r3, [pc, #232]	; (8000ab0 <main+0x80c>)
 80009c8:	181b      	adds	r3, r3, r0
 80009ca:	19da      	adds	r2, r3, r7
 80009cc:	23ba      	movs	r3, #186	; 0xba
 80009ce:	33ff      	adds	r3, #255	; 0xff
 80009d0:	216f      	movs	r1, #111	; 0x6f
 80009d2:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][42] = 0x22; //"
 80009d4:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <main+0x80c>)
 80009d6:	181b      	adds	r3, r3, r0
 80009d8:	19da      	adds	r2, r3, r7
 80009da:	23dd      	movs	r3, #221	; 0xdd
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	2122      	movs	r1, #34	; 0x22
 80009e0:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][43] = 0x2C; //,
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <main+0x80c>)
 80009e4:	181b      	adds	r3, r3, r0
 80009e6:	19da      	adds	r2, r3, r7
 80009e8:	23bc      	movs	r3, #188	; 0xbc
 80009ea:	33ff      	adds	r3, #255	; 0xff
 80009ec:	212c      	movs	r1, #44	; 0x2c
 80009ee:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][44] = 0x31; //1
 80009f0:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <main+0x80c>)
 80009f2:	181b      	adds	r3, r3, r0
 80009f4:	19da      	adds	r2, r3, r7
 80009f6:	23de      	movs	r3, #222	; 0xde
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	2131      	movs	r1, #49	; 0x31
 80009fc:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][45] = 0x38; //8
 80009fe:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <main+0x80c>)
 8000a00:	181b      	adds	r3, r3, r0
 8000a02:	19da      	adds	r2, r3, r7
 8000a04:	23be      	movs	r3, #190	; 0xbe
 8000a06:	33ff      	adds	r3, #255	; 0xff
 8000a08:	2138      	movs	r1, #56	; 0x38
 8000a0a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][46] = 0x38; //8
 8000a0c:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <main+0x80c>)
 8000a0e:	181b      	adds	r3, r3, r0
 8000a10:	19da      	adds	r2, r3, r7
 8000a12:	23df      	movs	r3, #223	; 0xdf
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	2138      	movs	r1, #56	; 0x38
 8000a18:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][47] = 0x33; //3
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <main+0x80c>)
 8000a1c:	181b      	adds	r3, r3, r0
 8000a1e:	19da      	adds	r2, r3, r7
 8000a20:	23c0      	movs	r3, #192	; 0xc0
 8000a22:	33ff      	adds	r3, #255	; 0xff
 8000a24:	2133      	movs	r1, #51	; 0x33
 8000a26:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][48] = 0x0A; //enter
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <main+0x80c>)
 8000a2a:	181b      	adds	r3, r3, r0
 8000a2c:	19da      	adds	r2, r3, r7
 8000a2e:	23e0      	movs	r3, #224	; 0xe0
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	210a      	movs	r1, #10
 8000a34:	54d1      	strb	r1, [r2, r3]

	at_command[AT_CIPSEND][0]  = 0x41; //A
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <main+0x80c>)
 8000a38:	181b      	adds	r3, r3, r0
 8000a3a:	19da      	adds	r2, r3, r7
 8000a3c:	23e1      	movs	r3, #225	; 0xe1
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2141      	movs	r1, #65	; 0x41
 8000a42:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][1]  = 0x54; //T
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <main+0x80c>)
 8000a46:	181b      	adds	r3, r3, r0
 8000a48:	19da      	adds	r2, r3, r7
 8000a4a:	23c4      	movs	r3, #196	; 0xc4
 8000a4c:	33ff      	adds	r3, #255	; 0xff
 8000a4e:	2154      	movs	r1, #84	; 0x54
 8000a50:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][2]  = 0x2B; //+
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <main+0x80c>)
 8000a54:	181b      	adds	r3, r3, r0
 8000a56:	19da      	adds	r2, r3, r7
 8000a58:	23e2      	movs	r3, #226	; 0xe2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	212b      	movs	r1, #43	; 0x2b
 8000a5e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][3]  = 0x43; //C
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <main+0x80c>)
 8000a62:	181b      	adds	r3, r3, r0
 8000a64:	19da      	adds	r2, r3, r7
 8000a66:	23c6      	movs	r3, #198	; 0xc6
 8000a68:	33ff      	adds	r3, #255	; 0xff
 8000a6a:	2143      	movs	r1, #67	; 0x43
 8000a6c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][4]  = 0x49; //I
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <main+0x80c>)
 8000a70:	181b      	adds	r3, r3, r0
 8000a72:	19da      	adds	r2, r3, r7
 8000a74:	23e3      	movs	r3, #227	; 0xe3
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	2149      	movs	r1, #73	; 0x49
 8000a7a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][5]  = 0x50; //P
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <main+0x80c>)
 8000a7e:	181b      	adds	r3, r3, r0
 8000a80:	19da      	adds	r2, r3, r7
 8000a82:	23c8      	movs	r3, #200	; 0xc8
 8000a84:	33ff      	adds	r3, #255	; 0xff
 8000a86:	2150      	movs	r1, #80	; 0x50
 8000a88:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][6]  = 0x53; //S
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <main+0x80c>)
 8000a8c:	181b      	adds	r3, r3, r0
 8000a8e:	19da      	adds	r2, r3, r7
 8000a90:	23e4      	movs	r3, #228	; 0xe4
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	2153      	movs	r1, #83	; 0x53
 8000a96:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][7]  = 0x45; //E
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <main+0x80c>)
 8000a9a:	181b      	adds	r3, r3, r0
 8000a9c:	19da      	adds	r2, r3, r7
 8000a9e:	23ca      	movs	r3, #202	; 0xca
 8000aa0:	33ff      	adds	r3, #255	; 0xff
 8000aa2:	2145      	movs	r1, #69	; 0x45
 8000aa4:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][8]  = 0x4E; //N
 8000aa6:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <main+0x80c>)
 8000aa8:	181b      	adds	r3, r3, r0
 8000aaa:	19da      	adds	r2, r3, r7
 8000aac:	23e5      	movs	r3, #229	; 0xe5
 8000aae:	e001      	b.n	8000ab4 <main+0x810>
 8000ab0:	fffffcf4 	.word	0xfffffcf4
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	214e      	movs	r1, #78	; 0x4e
 8000ab8:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][9]  = 0x44; //D
 8000aba:	4be1      	ldr	r3, [pc, #900]	; (8000e40 <main+0xb9c>)
 8000abc:	181b      	adds	r3, r3, r0
 8000abe:	19da      	adds	r2, r3, r7
 8000ac0:	23cc      	movs	r3, #204	; 0xcc
 8000ac2:	33ff      	adds	r3, #255	; 0xff
 8000ac4:	2144      	movs	r1, #68	; 0x44
 8000ac6:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][10] = 0x0A; //enter
 8000ac8:	4bdd      	ldr	r3, [pc, #884]	; (8000e40 <main+0xb9c>)
 8000aca:	181b      	adds	r3, r3, r0
 8000acc:	19da      	adds	r2, r3, r7
 8000ace:	23e6      	movs	r3, #230	; 0xe6
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	210a      	movs	r1, #10
 8000ad4:	54d1      	strb	r1, [r2, r3]

	at_command[AT_CIPCLOSE][0]   = 0x41; //A
 8000ad6:	4bda      	ldr	r3, [pc, #872]	; (8000e40 <main+0xb9c>)
 8000ad8:	181b      	adds	r3, r3, r0
 8000ada:	19da      	adds	r2, r3, r7
 8000adc:	23fa      	movs	r3, #250	; 0xfa
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	2141      	movs	r1, #65	; 0x41
 8000ae2:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][1]   = 0x54; //T
 8000ae4:	4bd6      	ldr	r3, [pc, #856]	; (8000e40 <main+0xb9c>)
 8000ae6:	181b      	adds	r3, r3, r0
 8000ae8:	19da      	adds	r2, r3, r7
 8000aea:	23f6      	movs	r3, #246	; 0xf6
 8000aec:	33ff      	adds	r3, #255	; 0xff
 8000aee:	2154      	movs	r1, #84	; 0x54
 8000af0:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][2]   = 0x2B; //+
 8000af2:	4bd3      	ldr	r3, [pc, #844]	; (8000e40 <main+0xb9c>)
 8000af4:	181b      	adds	r3, r3, r0
 8000af6:	19da      	adds	r2, r3, r7
 8000af8:	23fb      	movs	r3, #251	; 0xfb
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	212b      	movs	r1, #43	; 0x2b
 8000afe:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][3]   = 0x43; //C
 8000b00:	4bcf      	ldr	r3, [pc, #828]	; (8000e40 <main+0xb9c>)
 8000b02:	181b      	adds	r3, r3, r0
 8000b04:	19da      	adds	r2, r3, r7
 8000b06:	23f8      	movs	r3, #248	; 0xf8
 8000b08:	33ff      	adds	r3, #255	; 0xff
 8000b0a:	2143      	movs	r1, #67	; 0x43
 8000b0c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][4]   = 0x49; //I
 8000b0e:	4bcc      	ldr	r3, [pc, #816]	; (8000e40 <main+0xb9c>)
 8000b10:	181b      	adds	r3, r3, r0
 8000b12:	19da      	adds	r2, r3, r7
 8000b14:	23fc      	movs	r3, #252	; 0xfc
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	2149      	movs	r1, #73	; 0x49
 8000b1a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][5]   = 0x50; //P
 8000b1c:	4bc8      	ldr	r3, [pc, #800]	; (8000e40 <main+0xb9c>)
 8000b1e:	181b      	adds	r3, r3, r0
 8000b20:	19da      	adds	r2, r3, r7
 8000b22:	23fa      	movs	r3, #250	; 0xfa
 8000b24:	33ff      	adds	r3, #255	; 0xff
 8000b26:	2150      	movs	r1, #80	; 0x50
 8000b28:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][6]   = 0x43; //C
 8000b2a:	4bc5      	ldr	r3, [pc, #788]	; (8000e40 <main+0xb9c>)
 8000b2c:	181b      	adds	r3, r3, r0
 8000b2e:	19da      	adds	r2, r3, r7
 8000b30:	23fd      	movs	r3, #253	; 0xfd
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	2143      	movs	r1, #67	; 0x43
 8000b36:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][7]   = 0x4C; //L
 8000b38:	4bc1      	ldr	r3, [pc, #772]	; (8000e40 <main+0xb9c>)
 8000b3a:	181b      	adds	r3, r3, r0
 8000b3c:	19da      	adds	r2, r3, r7
 8000b3e:	23fc      	movs	r3, #252	; 0xfc
 8000b40:	33ff      	adds	r3, #255	; 0xff
 8000b42:	214c      	movs	r1, #76	; 0x4c
 8000b44:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][8]   = 0x4F; //O
 8000b46:	4bbe      	ldr	r3, [pc, #760]	; (8000e40 <main+0xb9c>)
 8000b48:	181b      	adds	r3, r3, r0
 8000b4a:	19da      	adds	r2, r3, r7
 8000b4c:	23fe      	movs	r3, #254	; 0xfe
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	214f      	movs	r1, #79	; 0x4f
 8000b52:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][9]   = 0x53; //S
 8000b54:	4bba      	ldr	r3, [pc, #744]	; (8000e40 <main+0xb9c>)
 8000b56:	181b      	adds	r3, r3, r0
 8000b58:	19da      	adds	r2, r3, r7
 8000b5a:	23fe      	movs	r3, #254	; 0xfe
 8000b5c:	33ff      	adds	r3, #255	; 0xff
 8000b5e:	2153      	movs	r1, #83	; 0x53
 8000b60:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][10]  = 0x45; //E
 8000b62:	4bb7      	ldr	r3, [pc, #732]	; (8000e40 <main+0xb9c>)
 8000b64:	181b      	adds	r3, r3, r0
 8000b66:	19da      	adds	r2, r3, r7
 8000b68:	23ff      	movs	r3, #255	; 0xff
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2145      	movs	r1, #69	; 0x45
 8000b6e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][11]  = 0x0A; //enter
 8000b70:	4bb3      	ldr	r3, [pc, #716]	; (8000e40 <main+0xb9c>)
 8000b72:	181b      	adds	r3, r3, r0
 8000b74:	19db      	adds	r3, r3, r7
 8000b76:	4ab3      	ldr	r2, [pc, #716]	; (8000e44 <main+0xba0>)
 8000b78:	210a      	movs	r1, #10
 8000b7a:	5499      	strb	r1, [r3, r2]

	unsigned char mqtt_packt_msg[100] = {0};
 8000b7c:	4bb2      	ldr	r3, [pc, #712]	; (8000e48 <main+0xba4>)
 8000b7e:	0004      	movs	r4, r0
 8000b80:	181b      	adds	r3, r3, r0
 8000b82:	19db      	adds	r3, r3, r7
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2260      	movs	r2, #96	; 0x60
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f004 f84c 	bl	8004c2c <memset>

	mqtt_packt_msg[0]  = 0x10; // mqtt connect packet
 8000b94:	4bac      	ldr	r3, [pc, #688]	; (8000e48 <main+0xba4>)
 8000b96:	0020      	movs	r0, r4
 8000b98:	181b      	adds	r3, r3, r0
 8000b9a:	19db      	adds	r3, r3, r7
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	701a      	strb	r2, [r3, #0]
	mqtt_packt_msg[1]  = 0x13; // remaining length
 8000ba0:	4ba9      	ldr	r3, [pc, #676]	; (8000e48 <main+0xba4>)
 8000ba2:	181b      	adds	r3, r3, r0
 8000ba4:	19db      	adds	r3, r3, r7
 8000ba6:	2213      	movs	r2, #19
 8000ba8:	705a      	strb	r2, [r3, #1]
	mqtt_packt_msg[2]  = 0x00; // protocol length
 8000baa:	4ba7      	ldr	r3, [pc, #668]	; (8000e48 <main+0xba4>)
 8000bac:	181b      	adds	r3, r3, r0
 8000bae:	19db      	adds	r3, r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	709a      	strb	r2, [r3, #2]
	mqtt_packt_msg[3]  = 0x04; // protocol length
 8000bb4:	4ba4      	ldr	r3, [pc, #656]	; (8000e48 <main+0xba4>)
 8000bb6:	181b      	adds	r3, r3, r0
 8000bb8:	19db      	adds	r3, r3, r7
 8000bba:	2204      	movs	r2, #4
 8000bbc:	70da      	strb	r2, [r3, #3]
	mqtt_packt_msg[4]  = 0x4D; // protocol M
 8000bbe:	4ba2      	ldr	r3, [pc, #648]	; (8000e48 <main+0xba4>)
 8000bc0:	181b      	adds	r3, r3, r0
 8000bc2:	19db      	adds	r3, r3, r7
 8000bc4:	224d      	movs	r2, #77	; 0x4d
 8000bc6:	711a      	strb	r2, [r3, #4]
	mqtt_packt_msg[5]  = 0x51; // protocol Q
 8000bc8:	4b9f      	ldr	r3, [pc, #636]	; (8000e48 <main+0xba4>)
 8000bca:	181b      	adds	r3, r3, r0
 8000bcc:	19db      	adds	r3, r3, r7
 8000bce:	2251      	movs	r2, #81	; 0x51
 8000bd0:	715a      	strb	r2, [r3, #5]
	mqtt_packt_msg[6]  = 0x54; // protocol T
 8000bd2:	4b9d      	ldr	r3, [pc, #628]	; (8000e48 <main+0xba4>)
 8000bd4:	181b      	adds	r3, r3, r0
 8000bd6:	19db      	adds	r3, r3, r7
 8000bd8:	2254      	movs	r2, #84	; 0x54
 8000bda:	719a      	strb	r2, [r3, #6]
	mqtt_packt_msg[7]  = 0x54; // protocol T
 8000bdc:	4b9a      	ldr	r3, [pc, #616]	; (8000e48 <main+0xba4>)
 8000bde:	181b      	adds	r3, r3, r0
 8000be0:	19db      	adds	r3, r3, r7
 8000be2:	2254      	movs	r2, #84	; 0x54
 8000be4:	71da      	strb	r2, [r3, #7]
	mqtt_packt_msg[8]  = 0x04; // level
 8000be6:	4b98      	ldr	r3, [pc, #608]	; (8000e48 <main+0xba4>)
 8000be8:	181b      	adds	r3, r3, r0
 8000bea:	19db      	adds	r3, r3, r7
 8000bec:	2204      	movs	r2, #4
 8000bee:	721a      	strb	r2, [r3, #8]
	mqtt_packt_msg[9]  = 0x02; // flag
 8000bf0:	4b95      	ldr	r3, [pc, #596]	; (8000e48 <main+0xba4>)
 8000bf2:	181b      	adds	r3, r3, r0
 8000bf4:	19db      	adds	r3, r3, r7
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	725a      	strb	r2, [r3, #9]
	mqtt_packt_msg[10] = 0x00; // KA
 8000bfa:	4b93      	ldr	r3, [pc, #588]	; (8000e48 <main+0xba4>)
 8000bfc:	181b      	adds	r3, r3, r0
 8000bfe:	19db      	adds	r3, r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	729a      	strb	r2, [r3, #10]
	mqtt_packt_msg[11] = 0x3C; // KA
 8000c04:	4b90      	ldr	r3, [pc, #576]	; (8000e48 <main+0xba4>)
 8000c06:	181b      	adds	r3, r3, r0
 8000c08:	19db      	adds	r3, r3, r7
 8000c0a:	223c      	movs	r2, #60	; 0x3c
 8000c0c:	72da      	strb	r2, [r3, #11]
	mqtt_packt_msg[12] = 0x00; // CID length
 8000c0e:	4b8e      	ldr	r3, [pc, #568]	; (8000e48 <main+0xba4>)
 8000c10:	181b      	adds	r3, r3, r0
 8000c12:	19db      	adds	r3, r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	731a      	strb	r2, [r3, #12]
	mqtt_packt_msg[13] = 0x07; // CID length
 8000c18:	4b8b      	ldr	r3, [pc, #556]	; (8000e48 <main+0xba4>)
 8000c1a:	181b      	adds	r3, r3, r0
 8000c1c:	19db      	adds	r3, r3, r7
 8000c1e:	2207      	movs	r2, #7
 8000c20:	735a      	strb	r2, [r3, #13]
	mqtt_packt_msg[14] = 0x63; // CID c
 8000c22:	4b89      	ldr	r3, [pc, #548]	; (8000e48 <main+0xba4>)
 8000c24:	181b      	adds	r3, r3, r0
 8000c26:	19db      	adds	r3, r3, r7
 8000c28:	2263      	movs	r2, #99	; 0x63
 8000c2a:	739a      	strb	r2, [r3, #14]
	mqtt_packt_msg[15] = 0x67; // CID g
 8000c2c:	4b86      	ldr	r3, [pc, #536]	; (8000e48 <main+0xba4>)
 8000c2e:	181b      	adds	r3, r3, r0
 8000c30:	19db      	adds	r3, r3, r7
 8000c32:	2267      	movs	r2, #103	; 0x67
 8000c34:	73da      	strb	r2, [r3, #15]
	mqtt_packt_msg[16] = 0x70; // CID p
 8000c36:	4b84      	ldr	r3, [pc, #528]	; (8000e48 <main+0xba4>)
 8000c38:	181b      	adds	r3, r3, r0
 8000c3a:	19db      	adds	r3, r3, r7
 8000c3c:	2270      	movs	r2, #112	; 0x70
 8000c3e:	741a      	strb	r2, [r3, #16]
	mqtt_packt_msg[17] = 0x73; // CID s
 8000c40:	4b81      	ldr	r3, [pc, #516]	; (8000e48 <main+0xba4>)
 8000c42:	181b      	adds	r3, r3, r0
 8000c44:	19db      	adds	r3, r3, r7
 8000c46:	2273      	movs	r2, #115	; 0x73
 8000c48:	745a      	strb	r2, [r3, #17]
	mqtt_packt_msg[18] = 0x30; // CID 0
 8000c4a:	4b7f      	ldr	r3, [pc, #508]	; (8000e48 <main+0xba4>)
 8000c4c:	181b      	adds	r3, r3, r0
 8000c4e:	19db      	adds	r3, r3, r7
 8000c50:	2230      	movs	r2, #48	; 0x30
 8000c52:	749a      	strb	r2, [r3, #18]
	mqtt_packt_msg[19] = 0x30; // CID 0
 8000c54:	4b7c      	ldr	r3, [pc, #496]	; (8000e48 <main+0xba4>)
 8000c56:	181b      	adds	r3, r3, r0
 8000c58:	19db      	adds	r3, r3, r7
 8000c5a:	2230      	movs	r2, #48	; 0x30
 8000c5c:	74da      	strb	r2, [r3, #19]
	mqtt_packt_msg[20] = 0x31; // CID 1
 8000c5e:	4b7a      	ldr	r3, [pc, #488]	; (8000e48 <main+0xba4>)
 8000c60:	181b      	adds	r3, r3, r0
 8000c62:	19db      	adds	r3, r3, r7
 8000c64:	2231      	movs	r2, #49	; 0x31
 8000c66:	751a      	strb	r2, [r3, #20]
	mqtt_packt_msg[21] = 0x30; // mqtt publish packet
 8000c68:	4b77      	ldr	r3, [pc, #476]	; (8000e48 <main+0xba4>)
 8000c6a:	181b      	adds	r3, r3, r0
 8000c6c:	19db      	adds	r3, r3, r7
 8000c6e:	2230      	movs	r2, #48	; 0x30
 8000c70:	755a      	strb	r2, [r3, #21]
	mqtt_packt_msg[22] = 0x38; // remaining length
 8000c72:	4b75      	ldr	r3, [pc, #468]	; (8000e48 <main+0xba4>)
 8000c74:	181b      	adds	r3, r3, r0
 8000c76:	19db      	adds	r3, r3, r7
 8000c78:	2238      	movs	r2, #56	; 0x38
 8000c7a:	759a      	strb	r2, [r3, #22]
	mqtt_packt_msg[23] = 0x00; // topic length
 8000c7c:	4b72      	ldr	r3, [pc, #456]	; (8000e48 <main+0xba4>)
 8000c7e:	181b      	adds	r3, r3, r0
 8000c80:	19db      	adds	r3, r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	75da      	strb	r2, [r3, #23]
	mqtt_packt_msg[24] = 0x0B; // topic length
 8000c86:	4b70      	ldr	r3, [pc, #448]	; (8000e48 <main+0xba4>)
 8000c88:	181b      	adds	r3, r3, r0
 8000c8a:	19db      	adds	r3, r3, r7
 8000c8c:	220b      	movs	r2, #11
 8000c8e:	761a      	strb	r2, [r3, #24]
	mqtt_packt_msg[25] = 0x63; // topic c
 8000c90:	4b6d      	ldr	r3, [pc, #436]	; (8000e48 <main+0xba4>)
 8000c92:	181b      	adds	r3, r3, r0
 8000c94:	19db      	adds	r3, r3, r7
 8000c96:	2263      	movs	r2, #99	; 0x63
 8000c98:	765a      	strb	r2, [r3, #25]
	mqtt_packt_msg[26] = 0x6F; // topic o
 8000c9a:	4b6b      	ldr	r3, [pc, #428]	; (8000e48 <main+0xba4>)
 8000c9c:	181b      	adds	r3, r3, r0
 8000c9e:	19db      	adds	r3, r3, r7
 8000ca0:	226f      	movs	r2, #111	; 0x6f
 8000ca2:	769a      	strb	r2, [r3, #26]
	mqtt_packt_msg[27] = 0x6C; // topic l
 8000ca4:	4b68      	ldr	r3, [pc, #416]	; (8000e48 <main+0xba4>)
 8000ca6:	181b      	adds	r3, r3, r0
 8000ca8:	19db      	adds	r3, r3, r7
 8000caa:	226c      	movs	r2, #108	; 0x6c
 8000cac:	76da      	strb	r2, [r3, #27]
	mqtt_packt_msg[28] = 0x65; // topic e
 8000cae:	4b66      	ldr	r3, [pc, #408]	; (8000e48 <main+0xba4>)
 8000cb0:	181b      	adds	r3, r3, r0
 8000cb2:	19db      	adds	r3, r3, r7
 8000cb4:	2265      	movs	r2, #101	; 0x65
 8000cb6:	771a      	strb	r2, [r3, #28]
	mqtt_packt_msg[29] = 0x69; // topic i
 8000cb8:	4b63      	ldr	r3, [pc, #396]	; (8000e48 <main+0xba4>)
 8000cba:	181b      	adds	r3, r3, r0
 8000cbc:	19db      	adds	r3, r3, r7
 8000cbe:	2269      	movs	r2, #105	; 0x69
 8000cc0:	775a      	strb	r2, [r3, #29]
	mqtt_packt_msg[30] = 0x72; // topic r
 8000cc2:	4b61      	ldr	r3, [pc, #388]	; (8000e48 <main+0xba4>)
 8000cc4:	181b      	adds	r3, r3, r0
 8000cc6:	19db      	adds	r3, r3, r7
 8000cc8:	2272      	movs	r2, #114	; 0x72
 8000cca:	779a      	strb	r2, [r3, #30]
	mqtt_packt_msg[31] = 0x61; // topic a
 8000ccc:	4b5e      	ldr	r3, [pc, #376]	; (8000e48 <main+0xba4>)
 8000cce:	181b      	adds	r3, r3, r0
 8000cd0:	19db      	adds	r3, r3, r7
 8000cd2:	2261      	movs	r2, #97	; 0x61
 8000cd4:	77da      	strb	r2, [r3, #31]
	mqtt_packt_msg[32] = 0x5F; // topic _
 8000cd6:	4b5c      	ldr	r3, [pc, #368]	; (8000e48 <main+0xba4>)
 8000cd8:	181b      	adds	r3, r3, r0
 8000cda:	19db      	adds	r3, r3, r7
 8000cdc:	2220      	movs	r2, #32
 8000cde:	215f      	movs	r1, #95	; 0x5f
 8000ce0:	5499      	strb	r1, [r3, r2]
	mqtt_packt_msg[33] = 0x67; // topic g
 8000ce2:	4b59      	ldr	r3, [pc, #356]	; (8000e48 <main+0xba4>)
 8000ce4:	181b      	adds	r3, r3, r0
 8000ce6:	19db      	adds	r3, r3, r7
 8000ce8:	2221      	movs	r2, #33	; 0x21
 8000cea:	2167      	movs	r1, #103	; 0x67
 8000cec:	5499      	strb	r1, [r3, r2]
	mqtt_packt_msg[34] = 0x70; // topic p
 8000cee:	4b56      	ldr	r3, [pc, #344]	; (8000e48 <main+0xba4>)
 8000cf0:	181b      	adds	r3, r3, r0
 8000cf2:	19db      	adds	r3, r3, r7
 8000cf4:	2222      	movs	r2, #34	; 0x22
 8000cf6:	2170      	movs	r1, #112	; 0x70
 8000cf8:	5499      	strb	r1, [r3, r2]
	mqtt_packt_msg[35] = 0x73; // topic s
 8000cfa:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <main+0xba4>)
 8000cfc:	181b      	adds	r3, r3, r0
 8000cfe:	19db      	adds	r3, r3, r7
 8000d00:	2223      	movs	r2, #35	; 0x23
 8000d02:	2173      	movs	r1, #115	; 0x73
 8000d04:	5499      	strb	r1, [r3, r2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f001 fbbf 	bl	8002488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f001 f8fd 	bl	8001f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f001 f9d1 	bl	80020b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d12:	f001 f951 	bl	8001fb8 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000d16:	f001 f9af 	bl	8002078 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d1a:	f001 f97d 	bl	8002018 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, data_in_uart1, 400);
 8000d1e:	23c8      	movs	r3, #200	; 0xc8
 8000d20:	005a      	lsls	r2, r3, #1
 8000d22:	494a      	ldr	r1, [pc, #296]	; (8000e4c <main+0xba8>)
 8000d24:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <main+0xbac>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f002 fe77 	bl	8003a1a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, data_in_uart2, 60);
 8000d2c:	4949      	ldr	r1, [pc, #292]	; (8000e54 <main+0xbb0>)
 8000d2e:	4b4a      	ldr	r3, [pc, #296]	; (8000e58 <main+0xbb4>)
 8000d30:	223c      	movs	r2, #60	; 0x3c
 8000d32:	0018      	movs	r0, r3
 8000d34:	f002 fe71 	bl	8003a1a <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin(RESET_SIM800l_GPIO_Port, RESET_SIM800l_Pin, GPIO_PIN_RESET);
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	0219      	lsls	r1, r3, #8
 8000d3c:	2390      	movs	r3, #144	; 0x90
 8000d3e:	05db      	lsls	r3, r3, #23
 8000d40:	2200      	movs	r2, #0
 8000d42:	0018      	movs	r0, r3
 8000d44:	f001 fffa 	bl	8002d3c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000d48:	23fa      	movs	r3, #250	; 0xfa
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f001 fbff 	bl	8002550 <HAL_Delay>
  HAL_GPIO_WritePin(RESET_SIM800l_GPIO_Port, RESET_SIM800l_Pin, GPIO_PIN_SET);
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	0219      	lsls	r1, r3, #8
 8000d56:	2390      	movs	r3, #144	; 0x90
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f001 ffed 	bl	8002d3c <HAL_GPIO_WritePin>
  HAL_Delay(30000);
 8000d62:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <main+0xbb8>)
 8000d64:	0018      	movs	r0, r3
 8000d66:	f001 fbf3 	bl	8002550 <HAL_Delay>

  //INICIO VERIFICAÇÃO DE CONECTIVIDADE GPRS
  while (ctrl_creg_loop == false)
 8000d6a:	e0b4      	b.n	8000ed6 <main+0xc32>
  {
	  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CREG], strlen((const char *)at_command[AT_CREG]), 100);
 8000d6c:	2464      	movs	r4, #100	; 0x64
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	3396      	adds	r3, #150	; 0x96
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff f9c8 	bl	8000108 <strlen>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	3396      	adds	r3, #150	; 0x96
 8000d80:	0019      	movs	r1, r3
 8000d82:	4835      	ldr	r0, [pc, #212]	; (8000e58 <main+0xbb4>)
 8000d84:	2364      	movs	r3, #100	; 0x64
 8000d86:	f002 fd9f 	bl	80038c8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000d8a:	23fa      	movs	r3, #250	; 0xfa
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f001 fbde 	bl	8002550 <HAL_Delay>
	  if (ctrl_uart2 == true)
 8000d94:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <main+0xbbc>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d000      	beq.n	8000d9e <main+0xafa>
 8000d9c:	e06f      	b.n	8000e7e <main+0xbda>
	  {
		  for (uint8_t a = 0; a<=60; a++)
 8000d9e:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <main+0xbc0>)
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e065      	b.n	8000e74 <main+0xbd0>
		  {
			  if ((data_in_uart2[a] == 0x2B) && (data_in_uart2[a+1] == 0x43) && (data_in_uart2[a+2] == 0x52) && (data_in_uart2[a+3] == 0x45)
 8000da8:	492e      	ldr	r1, [pc, #184]	; (8000e64 <main+0xbc0>)
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4a29      	ldr	r2, [pc, #164]	; (8000e54 <main+0xbb0>)
 8000db0:	5cd3      	ldrb	r3, [r2, r3]
 8000db2:	2b2b      	cmp	r3, #43	; 0x2b
 8000db4:	d158      	bne.n	8000e68 <main+0xbc4>
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a25      	ldr	r2, [pc, #148]	; (8000e54 <main+0xbb0>)
 8000dbe:	5cd3      	ldrb	r3, [r2, r3]
 8000dc0:	2b43      	cmp	r3, #67	; 0x43
 8000dc2:	d151      	bne.n	8000e68 <main+0xbc4>
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	3302      	adds	r3, #2
 8000dca:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <main+0xbb0>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	2b52      	cmp	r3, #82	; 0x52
 8000dd0:	d14a      	bne.n	8000e68 <main+0xbc4>
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	3303      	adds	r3, #3
 8000dd8:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <main+0xbb0>)
 8000dda:	5cd3      	ldrb	r3, [r2, r3]
 8000ddc:	2b45      	cmp	r3, #69	; 0x45
 8000dde:	d143      	bne.n	8000e68 <main+0xbc4>
					  && (data_in_uart2[a+4] == 0x47) && (data_in_uart2[a+5] == 0x3A))//filtrar dados +CREG:
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	3304      	adds	r3, #4
 8000de6:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <main+0xbb0>)
 8000de8:	5cd3      	ldrb	r3, [r2, r3]
 8000dea:	2b47      	cmp	r3, #71	; 0x47
 8000dec:	d13c      	bne.n	8000e68 <main+0xbc4>
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	3305      	adds	r3, #5
 8000df4:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <main+0xbb0>)
 8000df6:	5cd3      	ldrb	r3, [r2, r3]
 8000df8:	2b3a      	cmp	r3, #58	; 0x3a
 8000dfa:	d135      	bne.n	8000e68 <main+0xbc4>
  			  {
				  for(uint8_t b = 0; b<=10; b++)
 8000dfc:	23db      	movs	r3, #219	; 0xdb
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e014      	b.n	8000e32 <main+0xb8e>
				  {
					  data_filter_uart2[b] = data_in_uart2[a+b];
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <main+0xbc0>)
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	781a      	ldrb	r2, [r3, #0]
 8000e0e:	20db      	movs	r0, #219	; 0xdb
 8000e10:	0080      	lsls	r0, r0, #2
 8000e12:	183b      	adds	r3, r7, r0
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	18d2      	adds	r2, r2, r3
 8000e18:	183b      	adds	r3, r7, r0
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	490d      	ldr	r1, [pc, #52]	; (8000e54 <main+0xbb0>)
 8000e1e:	5c89      	ldrb	r1, [r1, r2]
 8000e20:	22a6      	movs	r2, #166	; 0xa6
 8000e22:	0092      	lsls	r2, r2, #2
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	54d1      	strb	r1, [r2, r3]
				  for(uint8_t b = 0; b<=10; b++)
 8000e28:	183b      	adds	r3, r7, r0
 8000e2a:	781a      	ldrb	r2, [r3, #0]
 8000e2c:	183b      	adds	r3, r7, r0
 8000e2e:	3201      	adds	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	23db      	movs	r3, #219	; 0xdb
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b0a      	cmp	r3, #10
 8000e3c:	d9e4      	bls.n	8000e08 <main+0xb64>
				  }
				  break;
 8000e3e:	e01e      	b.n	8000e7e <main+0xbda>
 8000e40:	fffffcf4 	.word	0xfffffcf4
 8000e44:	000001ff 	.word	0x000001ff
 8000e48:	fffffc90 	.word	0xfffffc90
 8000e4c:	20000174 	.word	0x20000174
 8000e50:	20000028 	.word	0x20000028
 8000e54:	20000308 	.word	0x20000308
 8000e58:	200000ac 	.word	0x200000ac
 8000e5c:	00007530 	.word	0x00007530
 8000e60:	20000346 	.word	0x20000346
 8000e64:	0000036d 	.word	0x0000036d
		  for (uint8_t a = 0; a<=60; a++)
 8000e68:	49d7      	ldr	r1, [pc, #860]	; (80011c8 <main+0xf24>)
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	3201      	adds	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	4bd4      	ldr	r3, [pc, #848]	; (80011c8 <main+0xf24>)
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b3c      	cmp	r3, #60	; 0x3c
 8000e7c:	d994      	bls.n	8000da8 <main+0xb04>
  			  }
		  }
	  }
	  if ((data_filter_uart2[9] == 0x31) || (data_filter_uart2[9] == 0x35))
 8000e7e:	22a6      	movs	r2, #166	; 0xa6
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	18bb      	adds	r3, r7, r2
 8000e84:	7a5b      	ldrb	r3, [r3, #9]
 8000e86:	2b31      	cmp	r3, #49	; 0x31
 8000e88:	d003      	beq.n	8000e92 <main+0xbee>
 8000e8a:	18bb      	adds	r3, r7, r2
 8000e8c:	7a5b      	ldrb	r3, [r3, #9]
 8000e8e:	2b35      	cmp	r3, #53	; 0x35
 8000e90:	d10c      	bne.n	8000eac <main+0xc08>
	  {
		  HAL_UART_Transmit(&huart1, (unsigned char *)data_filter_uart2, 10, 100);
 8000e92:	23a6      	movs	r3, #166	; 0xa6
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	18f9      	adds	r1, r7, r3
 8000e98:	48cc      	ldr	r0, [pc, #816]	; (80011cc <main+0xf28>)
 8000e9a:	2364      	movs	r3, #100	; 0x64
 8000e9c:	220a      	movs	r2, #10
 8000e9e:	f002 fd13 	bl	80038c8 <HAL_UART_Transmit>
		  ctrl_creg_loop = true;
 8000ea2:	4bcb      	ldr	r3, [pc, #812]	; (80011d0 <main+0xf2c>)
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e014      	b.n	8000ed6 <main+0xc32>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(ERROR_1_GPIO_Port, ERROR_1_Pin, GPIO_PIN_SET); // SIGNIFICA QUE HA PROBLEMA DE CONECTIVIDADE GPRS
 8000eac:	4bc9      	ldr	r3, [pc, #804]	; (80011d4 <main+0xf30>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f001 ff42 	bl	8002d3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ERROR_2_GPIO_Port, ERROR_2_Pin, GPIO_PIN_SET); // SIGNIFICA QUE HA PROBLEMA DE CONECTIVIDADE GPRS
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	48c5      	ldr	r0, [pc, #788]	; (80011d4 <main+0xf30>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	f001 ff3b 	bl	8002d3c <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart1, (unsigned char *)error_msg_NC, 10, 100);
 8000ec6:	23a4      	movs	r3, #164	; 0xa4
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	18f9      	adds	r1, r7, r3
 8000ecc:	48bf      	ldr	r0, [pc, #764]	; (80011cc <main+0xf28>)
 8000ece:	2364      	movs	r3, #100	; 0x64
 8000ed0:	220a      	movs	r2, #10
 8000ed2:	f002 fcf9 	bl	80038c8 <HAL_UART_Transmit>
  while (ctrl_creg_loop == false)
 8000ed6:	4abe      	ldr	r2, [pc, #760]	; (80011d0 <main+0xf2c>)
 8000ed8:	18bb      	adds	r3, r7, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d100      	bne.n	8000ee2 <main+0xc3e>
 8000ee0:	e744      	b.n	8000d6c <main+0xac8>
	  }
  }
  ctrl_creg_loop = false;
 8000ee2:	18bb      	adds	r3, r7, r2
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
  //FIM VERIFICAÇÃO DE CONECTIVIDADE GPRS

  HAL_GPIO_WritePin(ERROR_1_GPIO_Port, ERROR_1_Pin, GPIO_PIN_RESET); // SIGNIFICA QUE HA PROBLEMA DE CONECTIVIDADE GPRS
 8000ee8:	4bba      	ldr	r3, [pc, #744]	; (80011d4 <main+0xf30>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	2120      	movs	r1, #32
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f001 ff24 	bl	8002d3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ERROR_2_GPIO_Port, ERROR_2_Pin, GPIO_PIN_RESET); // SIGNIFICA QUE HA PROBLEMA DE CONECTIVIDADE GPRS
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	48b6      	ldr	r0, [pc, #728]	; (80011d4 <main+0xf30>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	0019      	movs	r1, r3
 8000efe:	f001 ff1d 	bl	8002d3c <HAL_GPIO_WritePin>

  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT], strlen((const char *)at_command[AT]), 100);
 8000f02:	2464      	movs	r4, #100	; 0x64
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	0018      	movs	r0, r3
 8000f08:	f7ff f8fe 	bl	8000108 <strlen>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	1939      	adds	r1, r7, r4
 8000f12:	48b1      	ldr	r0, [pc, #708]	; (80011d8 <main+0xf34>)
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	f002 fcd7 	bl	80038c8 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000f1a:	23fa      	movs	r3, #250	; 0xfa
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f001 fb16 	bl	8002550 <HAL_Delay>
  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CFUN], strlen((const char *)at_command[AT_CFUN]), 100);
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	3332      	adds	r3, #50	; 0x32
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff f8ed 	bl	8000108 <strlen>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	3332      	adds	r3, #50	; 0x32
 8000f36:	0019      	movs	r1, r3
 8000f38:	48a7      	ldr	r0, [pc, #668]	; (80011d8 <main+0xf34>)
 8000f3a:	2364      	movs	r3, #100	; 0x64
 8000f3c:	f002 fcc4 	bl	80038c8 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000f40:	23fa      	movs	r3, #250	; 0xfa
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 fb03 	bl	8002550 <HAL_Delay>
  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CPIN], strlen((const char *)at_command[AT_CPIN]), 100);
 8000f4a:	193b      	adds	r3, r7, r4
 8000f4c:	3364      	adds	r3, #100	; 0x64
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff f8da 	bl	8000108 <strlen>
 8000f54:	0003      	movs	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	3364      	adds	r3, #100	; 0x64
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	489e      	ldr	r0, [pc, #632]	; (80011d8 <main+0xf34>)
 8000f60:	2364      	movs	r3, #100	; 0x64
 8000f62:	f002 fcb1 	bl	80038c8 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000f66:	23fa      	movs	r3, #250	; 0xfa
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f001 faf0 	bl	8002550 <HAL_Delay>
  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CREG], strlen((const char *)at_command[AT_CREG]), 100);
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	3396      	adds	r3, #150	; 0x96
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff f8c7 	bl	8000108 <strlen>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	3396      	adds	r3, #150	; 0x96
 8000f82:	0019      	movs	r1, r3
 8000f84:	4894      	ldr	r0, [pc, #592]	; (80011d8 <main+0xf34>)
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	f002 fc9e 	bl	80038c8 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000f8c:	23fa      	movs	r3, #250	; 0xfa
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	0018      	movs	r0, r3
 8000f92:	f001 fadd 	bl	8002550 <HAL_Delay>
  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CSQ], strlen((const char *)at_command[AT_CSQ]), 100);
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	33c8      	adds	r3, #200	; 0xc8
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f7ff f8b4 	bl	8000108 <strlen>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	33c8      	adds	r3, #200	; 0xc8
 8000fa8:	0019      	movs	r1, r3
 8000faa:	488b      	ldr	r0, [pc, #556]	; (80011d8 <main+0xf34>)
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	f002 fc8b 	bl	80038c8 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000fb2:	23fa      	movs	r3, #250	; 0xfa
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f001 faca 	bl	8002550 <HAL_Delay>
  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CSTT], strlen((const char *)at_command[AT_CSTT]), 100);
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	33fa      	adds	r3, #250	; 0xfa
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff f8a1 	bl	8000108 <strlen>
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	193b      	adds	r3, r7, r4
 8000fcc:	33fa      	adds	r3, #250	; 0xfa
 8000fce:	0019      	movs	r1, r3
 8000fd0:	4881      	ldr	r0, [pc, #516]	; (80011d8 <main+0xf34>)
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	f002 fc78 	bl	80038c8 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000fd8:	23fa      	movs	r3, #250	; 0xfa
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f001 fab7 	bl	8002550 <HAL_Delay>
  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIICR], strlen((const char *)at_command[AT_CIICR]), 100);
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	332d      	adds	r3, #45	; 0x2d
 8000fe6:	33ff      	adds	r3, #255	; 0xff
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff f88d 	bl	8000108 <strlen>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	332d      	adds	r3, #45	; 0x2d
 8000ff6:	33ff      	adds	r3, #255	; 0xff
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	4877      	ldr	r0, [pc, #476]	; (80011d8 <main+0xf34>)
 8000ffc:	2364      	movs	r3, #100	; 0x64
 8000ffe:	f002 fc63 	bl	80038c8 <HAL_UART_Transmit>
  HAL_Delay(5000);
 8001002:	4b76      	ldr	r3, [pc, #472]	; (80011dc <main+0xf38>)
 8001004:	0018      	movs	r0, r3
 8001006:	f001 faa3 	bl	8002550 <HAL_Delay>
  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIFSR], strlen((const char *)at_command[AT_CIFSR]), 100);
 800100a:	193b      	adds	r3, r7, r4
 800100c:	335f      	adds	r3, #95	; 0x5f
 800100e:	33ff      	adds	r3, #255	; 0xff
 8001010:	0018      	movs	r0, r3
 8001012:	f7ff f879 	bl	8000108 <strlen>
 8001016:	0003      	movs	r3, r0
 8001018:	b29a      	uxth	r2, r3
 800101a:	193b      	adds	r3, r7, r4
 800101c:	335f      	adds	r3, #95	; 0x5f
 800101e:	33ff      	adds	r3, #255	; 0xff
 8001020:	0019      	movs	r1, r3
 8001022:	486d      	ldr	r0, [pc, #436]	; (80011d8 <main+0xf34>)
 8001024:	2364      	movs	r3, #100	; 0x64
 8001026:	f002 fc4f 	bl	80038c8 <HAL_UART_Transmit>
  HAL_Delay(5000);
 800102a:	4b6c      	ldr	r3, [pc, #432]	; (80011dc <main+0xf38>)
 800102c:	0018      	movs	r0, r3
 800102e:	f001 fa8f 	bl	8002550 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (ctrl_uart1 == true)
 8001032:	4b6b      	ldr	r3, [pc, #428]	; (80011e0 <main+0xf3c>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d1fb      	bne.n	8001032 <main+0xd8e>
	  {
		  for (uint8_t i = 0; i<=400; i++)
 800103a:	4b6a      	ldr	r3, [pc, #424]	; (80011e4 <main+0xf40>)
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
		  	{
		  		if ((data_in_uart1[i] == 0x24) && (data_in_uart1[i+1] == 0x47) && (data_in_uart1[i+2] == 0x50) && (data_in_uart1[i+3] == 0x47)
 8001042:	4968      	ldr	r1, [pc, #416]	; (80011e4 <main+0xf40>)
 8001044:	187b      	adds	r3, r7, r1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4a67      	ldr	r2, [pc, #412]	; (80011e8 <main+0xf44>)
 800104a:	5cd3      	ldrb	r3, [r2, r3]
 800104c:	2b24      	cmp	r3, #36	; 0x24
 800104e:	d141      	bne.n	80010d4 <main+0xe30>
 8001050:	187b      	adds	r3, r7, r1
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a64      	ldr	r2, [pc, #400]	; (80011e8 <main+0xf44>)
 8001058:	5cd3      	ldrb	r3, [r2, r3]
 800105a:	2b47      	cmp	r3, #71	; 0x47
 800105c:	d13a      	bne.n	80010d4 <main+0xe30>
 800105e:	187b      	adds	r3, r7, r1
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	3302      	adds	r3, #2
 8001064:	4a60      	ldr	r2, [pc, #384]	; (80011e8 <main+0xf44>)
 8001066:	5cd3      	ldrb	r3, [r2, r3]
 8001068:	2b50      	cmp	r3, #80	; 0x50
 800106a:	d133      	bne.n	80010d4 <main+0xe30>
 800106c:	187b      	adds	r3, r7, r1
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	3303      	adds	r3, #3
 8001072:	4a5d      	ldr	r2, [pc, #372]	; (80011e8 <main+0xf44>)
 8001074:	5cd3      	ldrb	r3, [r2, r3]
 8001076:	2b47      	cmp	r3, #71	; 0x47
 8001078:	d12c      	bne.n	80010d4 <main+0xe30>
		  				&& (data_in_uart1[i+4] == 0x4C) && (data_in_uart1[i+5] == 0x4C))//filtrar dados GPGLL
 800107a:	187b      	adds	r3, r7, r1
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3304      	adds	r3, #4
 8001080:	4a59      	ldr	r2, [pc, #356]	; (80011e8 <main+0xf44>)
 8001082:	5cd3      	ldrb	r3, [r2, r3]
 8001084:	2b4c      	cmp	r3, #76	; 0x4c
 8001086:	d125      	bne.n	80010d4 <main+0xe30>
 8001088:	187b      	adds	r3, r7, r1
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	3305      	adds	r3, #5
 800108e:	4a56      	ldr	r2, [pc, #344]	; (80011e8 <main+0xf44>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	2b4c      	cmp	r3, #76	; 0x4c
 8001094:	d11e      	bne.n	80010d4 <main+0xe30>
		  		{
		  			for(uint8_t j = 0; j<=43; j++)
 8001096:	4b55      	ldr	r3, [pc, #340]	; (80011ec <main+0xf48>)
 8001098:	18fb      	adds	r3, r7, r3
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e013      	b.n	80010c8 <main+0xe24>
		  			{
		  				data_filter_uart1[j] = data_in_uart1[i+j];
 80010a0:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <main+0xf40>)
 80010a2:	18fb      	adds	r3, r7, r3
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	4851      	ldr	r0, [pc, #324]	; (80011ec <main+0xf48>)
 80010a8:	183b      	adds	r3, r7, r0
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	18d2      	adds	r2, r2, r3
 80010ae:	183b      	adds	r3, r7, r0
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	494d      	ldr	r1, [pc, #308]	; (80011e8 <main+0xf44>)
 80010b4:	5c89      	ldrb	r1, [r1, r2]
 80010b6:	22bf      	movs	r2, #191	; 0xbf
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	18ba      	adds	r2, r7, r2
 80010bc:	54d1      	strb	r1, [r2, r3]
		  			for(uint8_t j = 0; j<=43; j++)
 80010be:	183b      	adds	r3, r7, r0
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	183b      	adds	r3, r7, r0
 80010c4:	3201      	adds	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	4b48      	ldr	r3, [pc, #288]	; (80011ec <main+0xf48>)
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b2b      	cmp	r3, #43	; 0x2b
 80010d0:	d9e6      	bls.n	80010a0 <main+0xdfc>
		  			}
		  			break;
 80010d2:	e006      	b.n	80010e2 <main+0xe3e>
		  for (uint8_t i = 0; i<=400; i++)
 80010d4:	4943      	ldr	r1, [pc, #268]	; (80011e4 <main+0xf40>)
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	781a      	ldrb	r2, [r3, #0]
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	3201      	adds	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
		  		if ((data_in_uart1[i] == 0x24) && (data_in_uart1[i+1] == 0x47) && (data_in_uart1[i+2] == 0x50) && (data_in_uart1[i+3] == 0x47)
 80010e0:	e7af      	b.n	8001042 <main+0xd9e>
		  		}
		  	}

		  if (data_filter_uart1[7] == 0x2C) //0x2C é o caractere ascii "," , ou seja, não há sinal de GPS
 80010e2:	23bf      	movs	r3, #191	; 0xbf
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	79db      	ldrb	r3, [r3, #7]
 80010ea:	2b2c      	cmp	r3, #44	; 0x2c
 80010ec:	d000      	beq.n	80010f0 <main+0xe4c>
 80010ee:	e194      	b.n	800141a <main+0x1176>
		  {
			  //INICIO VERIFICAÇÃO DE CONECTIVIDADE GPRS
			  while (ctrl_creg_loop == false)
 80010f0:	e178      	b.n	80013e4 <main+0x1140>
			  {
				  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CREG], strlen((const char *)at_command[AT_CREG]), 100);
 80010f2:	2464      	movs	r4, #100	; 0x64
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	3396      	adds	r3, #150	; 0x96
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff f805 	bl	8000108 <strlen>
 80010fe:	0003      	movs	r3, r0
 8001100:	b29a      	uxth	r2, r3
 8001102:	193b      	adds	r3, r7, r4
 8001104:	3396      	adds	r3, #150	; 0x96
 8001106:	0019      	movs	r1, r3
 8001108:	4833      	ldr	r0, [pc, #204]	; (80011d8 <main+0xf34>)
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	f002 fbdc 	bl	80038c8 <HAL_UART_Transmit>
			  	  HAL_Delay(500);
 8001110:	23fa      	movs	r3, #250	; 0xfa
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	0018      	movs	r0, r3
 8001116:	f001 fa1b 	bl	8002550 <HAL_Delay>
			  	  if (ctrl_uart2 == true)
 800111a:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <main+0xf4c>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d000      	beq.n	8001124 <main+0xe80>
 8001122:	e076      	b.n	8001212 <main+0xf6e>
			  	  {
			  		  for (uint8_t a = 0; a<=60; a++)
 8001124:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <main+0xf50>)
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e06c      	b.n	8001208 <main+0xf64>
			  		  {
			  			  if ((data_in_uart2[a] == 0x2B) && (data_in_uart2[a+1] == 0x43) && (data_in_uart2[a+2] == 0x52) && (data_in_uart2[a+3] == 0x45)
 800112e:	4931      	ldr	r1, [pc, #196]	; (80011f4 <main+0xf50>)
 8001130:	187b      	adds	r3, r7, r1
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4a30      	ldr	r2, [pc, #192]	; (80011f8 <main+0xf54>)
 8001136:	5cd3      	ldrb	r3, [r2, r3]
 8001138:	2b2b      	cmp	r3, #43	; 0x2b
 800113a:	d15f      	bne.n	80011fc <main+0xf58>
 800113c:	187b      	adds	r3, r7, r1
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <main+0xf54>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	2b43      	cmp	r3, #67	; 0x43
 8001148:	d158      	bne.n	80011fc <main+0xf58>
 800114a:	187b      	adds	r3, r7, r1
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3302      	adds	r3, #2
 8001150:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <main+0xf54>)
 8001152:	5cd3      	ldrb	r3, [r2, r3]
 8001154:	2b52      	cmp	r3, #82	; 0x52
 8001156:	d151      	bne.n	80011fc <main+0xf58>
 8001158:	187b      	adds	r3, r7, r1
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	3303      	adds	r3, #3
 800115e:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <main+0xf54>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	2b45      	cmp	r3, #69	; 0x45
 8001164:	d14a      	bne.n	80011fc <main+0xf58>
			  					  && (data_in_uart2[a+4] == 0x47) && (data_in_uart2[a+5] == 0x3A))//filtrar dados +CREG:
 8001166:	187b      	adds	r3, r7, r1
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	3304      	adds	r3, #4
 800116c:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <main+0xf54>)
 800116e:	5cd3      	ldrb	r3, [r2, r3]
 8001170:	2b47      	cmp	r3, #71	; 0x47
 8001172:	d143      	bne.n	80011fc <main+0xf58>
 8001174:	187b      	adds	r3, r7, r1
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	3305      	adds	r3, #5
 800117a:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <main+0xf54>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	2b3a      	cmp	r3, #58	; 0x3a
 8001180:	d13c      	bne.n	80011fc <main+0xf58>
			  			  {
			  				  for(uint8_t b = 0; b<=10; b++)
 8001182:	23da      	movs	r3, #218	; 0xda
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e014      	b.n	80011b8 <main+0xf14>
			  				  {
			  					  data_filter_uart2[b] = data_in_uart2[a+b];
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <main+0xf50>)
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	781a      	ldrb	r2, [r3, #0]
 8001194:	20da      	movs	r0, #218	; 0xda
 8001196:	0080      	lsls	r0, r0, #2
 8001198:	183b      	adds	r3, r7, r0
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	18d2      	adds	r2, r2, r3
 800119e:	183b      	adds	r3, r7, r0
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4915      	ldr	r1, [pc, #84]	; (80011f8 <main+0xf54>)
 80011a4:	5c89      	ldrb	r1, [r1, r2]
 80011a6:	22a6      	movs	r2, #166	; 0xa6
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	18ba      	adds	r2, r7, r2
 80011ac:	54d1      	strb	r1, [r2, r3]
			  				  for(uint8_t b = 0; b<=10; b++)
 80011ae:	183b      	adds	r3, r7, r0
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	183b      	adds	r3, r7, r0
 80011b4:	3201      	adds	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	23da      	movs	r3, #218	; 0xda
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b0a      	cmp	r3, #10
 80011c2:	d9e4      	bls.n	800118e <main+0xeea>
			  				  }
			  				  break;
 80011c4:	e025      	b.n	8001212 <main+0xf6e>
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	0000036d 	.word	0x0000036d
 80011cc:	20000028 	.word	0x20000028
 80011d0:	0000036f 	.word	0x0000036f
 80011d4:	48000400 	.word	0x48000400
 80011d8:	200000ac 	.word	0x200000ac
 80011dc:	00001388 	.word	0x00001388
 80011e0:	20000345 	.word	0x20000345
 80011e4:	0000036b 	.word	0x0000036b
 80011e8:	20000174 	.word	0x20000174
 80011ec:	0000036a 	.word	0x0000036a
 80011f0:	20000346 	.word	0x20000346
 80011f4:	00000369 	.word	0x00000369
 80011f8:	20000308 	.word	0x20000308
			  		  for (uint8_t a = 0; a<=60; a++)
 80011fc:	49e5      	ldr	r1, [pc, #916]	; (8001594 <main+0x12f0>)
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	187b      	adds	r3, r7, r1
 8001204:	3201      	adds	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	4be2      	ldr	r3, [pc, #904]	; (8001594 <main+0x12f0>)
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b3c      	cmp	r3, #60	; 0x3c
 8001210:	d98d      	bls.n	800112e <main+0xe8a>
			  			  }
			  		  }
			  	  }
			  	  if ((data_filter_uart2[9] == 0x31) || (data_filter_uart2[9] == 0x35)) // se a resposta do CREG é '1' ou '5' (módulo registrado na rede)
 8001212:	22a6      	movs	r2, #166	; 0xa6
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	18bb      	adds	r3, r7, r2
 8001218:	7a5b      	ldrb	r3, [r3, #9]
 800121a:	2b31      	cmp	r3, #49	; 0x31
 800121c:	d003      	beq.n	8001226 <main+0xf82>
 800121e:	18bb      	adds	r3, r7, r2
 8001220:	7a5b      	ldrb	r3, [r3, #9]
 8001222:	2b35      	cmp	r3, #53	; 0x35
 8001224:	d10c      	bne.n	8001240 <main+0xf9c>
			  	  {
			  		  HAL_UART_Transmit(&huart1, (unsigned char *)data_filter_uart2, 10, 100);
 8001226:	23a6      	movs	r3, #166	; 0xa6
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	18f9      	adds	r1, r7, r3
 800122c:	48da      	ldr	r0, [pc, #872]	; (8001598 <main+0x12f4>)
 800122e:	2364      	movs	r3, #100	; 0x64
 8001230:	220a      	movs	r2, #10
 8001232:	f002 fb49 	bl	80038c8 <HAL_UART_Transmit>
			  		  ctrl_creg_loop = true;
 8001236:	4bd9      	ldr	r3, [pc, #868]	; (800159c <main+0x12f8>)
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	e0c5      	b.n	80013cc <main+0x1128>
			  	  }
			  	  else // se o módulo não estiver registrado na rede
			  	  {
			  		  HAL_GPIO_WritePin(ERROR_1_GPIO_Port, ERROR_1_Pin, GPIO_PIN_SET); // SIGNIFICA QUE HA PROBLEMA DE CONECTIVIDADE GPRS
 8001240:	4bd7      	ldr	r3, [pc, #860]	; (80015a0 <main+0x12fc>)
 8001242:	2201      	movs	r2, #1
 8001244:	2120      	movs	r1, #32
 8001246:	0018      	movs	r0, r3
 8001248:	f001 fd78 	bl	8002d3c <HAL_GPIO_WritePin>
			  		  HAL_GPIO_WritePin(ERROR_2_GPIO_Port, ERROR_2_Pin, GPIO_PIN_SET); // SIGNIFICA QUE HA PROBLEMA DE CONECTIVIDADE GPRS
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	48d3      	ldr	r0, [pc, #844]	; (80015a0 <main+0x12fc>)
 8001252:	2201      	movs	r2, #1
 8001254:	0019      	movs	r1, r3
 8001256:	f001 fd71 	bl	8002d3c <HAL_GPIO_WritePin>

			  		  HAL_UART_Transmit(&huart1, (unsigned char *)data_filter_uart2, 10, 100);
 800125a:	23a6      	movs	r3, #166	; 0xa6
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	18f9      	adds	r1, r7, r3
 8001260:	48cd      	ldr	r0, [pc, #820]	; (8001598 <main+0x12f4>)
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	220a      	movs	r2, #10
 8001266:	f002 fb2f 	bl	80038c8 <HAL_UART_Transmit>
			  		  //reset SIM800L
			  		  HAL_GPIO_WritePin(RESET_SIM800l_GPIO_Port, RESET_SIM800l_Pin, GPIO_PIN_RESET);
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	0219      	lsls	r1, r3, #8
 800126e:	2390      	movs	r3, #144	; 0x90
 8001270:	05db      	lsls	r3, r3, #23
 8001272:	2200      	movs	r2, #0
 8001274:	0018      	movs	r0, r3
 8001276:	f001 fd61 	bl	8002d3c <HAL_GPIO_WritePin>
			  		  HAL_Delay(1000);
 800127a:	23fa      	movs	r3, #250	; 0xfa
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	0018      	movs	r0, r3
 8001280:	f001 f966 	bl	8002550 <HAL_Delay>
			  		  HAL_GPIO_WritePin(RESET_SIM800l_GPIO_Port, RESET_SIM800l_Pin, GPIO_PIN_SET);
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	0219      	lsls	r1, r3, #8
 8001288:	2390      	movs	r3, #144	; 0x90
 800128a:	05db      	lsls	r3, r3, #23
 800128c:	2201      	movs	r2, #1
 800128e:	0018      	movs	r0, r3
 8001290:	f001 fd54 	bl	8002d3c <HAL_GPIO_WritePin>
			  		  HAL_Delay(30000);
 8001294:	4bc3      	ldr	r3, [pc, #780]	; (80015a4 <main+0x1300>)
 8001296:	0018      	movs	r0, r3
 8001298:	f001 f95a 	bl	8002550 <HAL_Delay>

			  		  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT], strlen((const char *)at_command[AT]), 100);
 800129c:	2464      	movs	r4, #100	; 0x64
 800129e:	193b      	adds	r3, r7, r4
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7fe ff31 	bl	8000108 <strlen>
 80012a6:	0003      	movs	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	1939      	adds	r1, r7, r4
 80012ac:	48be      	ldr	r0, [pc, #760]	; (80015a8 <main+0x1304>)
 80012ae:	2364      	movs	r3, #100	; 0x64
 80012b0:	f002 fb0a 	bl	80038c8 <HAL_UART_Transmit>
			  		  HAL_Delay(500);
 80012b4:	23fa      	movs	r3, #250	; 0xfa
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	0018      	movs	r0, r3
 80012ba:	f001 f949 	bl	8002550 <HAL_Delay>
			  		  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CFUN], strlen((const char *)at_command[AT_CFUN]), 100);
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	3332      	adds	r3, #50	; 0x32
 80012c2:	0018      	movs	r0, r3
 80012c4:	f7fe ff20 	bl	8000108 <strlen>
 80012c8:	0003      	movs	r3, r0
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	193b      	adds	r3, r7, r4
 80012ce:	3332      	adds	r3, #50	; 0x32
 80012d0:	0019      	movs	r1, r3
 80012d2:	48b5      	ldr	r0, [pc, #724]	; (80015a8 <main+0x1304>)
 80012d4:	2364      	movs	r3, #100	; 0x64
 80012d6:	f002 faf7 	bl	80038c8 <HAL_UART_Transmit>
			  		  HAL_Delay(500);
 80012da:	23fa      	movs	r3, #250	; 0xfa
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	0018      	movs	r0, r3
 80012e0:	f001 f936 	bl	8002550 <HAL_Delay>
			  		  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CPIN], strlen((const char *)at_command[AT_CPIN]), 100);
 80012e4:	193b      	adds	r3, r7, r4
 80012e6:	3364      	adds	r3, #100	; 0x64
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7fe ff0d 	bl	8000108 <strlen>
 80012ee:	0003      	movs	r3, r0
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	193b      	adds	r3, r7, r4
 80012f4:	3364      	adds	r3, #100	; 0x64
 80012f6:	0019      	movs	r1, r3
 80012f8:	48ab      	ldr	r0, [pc, #684]	; (80015a8 <main+0x1304>)
 80012fa:	2364      	movs	r3, #100	; 0x64
 80012fc:	f002 fae4 	bl	80038c8 <HAL_UART_Transmit>
			  		  HAL_Delay(500);
 8001300:	23fa      	movs	r3, #250	; 0xfa
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	0018      	movs	r0, r3
 8001306:	f001 f923 	bl	8002550 <HAL_Delay>
			  		  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CREG], strlen((const char *)at_command[AT_CREG]), 100);
 800130a:	193b      	adds	r3, r7, r4
 800130c:	3396      	adds	r3, #150	; 0x96
 800130e:	0018      	movs	r0, r3
 8001310:	f7fe fefa 	bl	8000108 <strlen>
 8001314:	0003      	movs	r3, r0
 8001316:	b29a      	uxth	r2, r3
 8001318:	193b      	adds	r3, r7, r4
 800131a:	3396      	adds	r3, #150	; 0x96
 800131c:	0019      	movs	r1, r3
 800131e:	48a2      	ldr	r0, [pc, #648]	; (80015a8 <main+0x1304>)
 8001320:	2364      	movs	r3, #100	; 0x64
 8001322:	f002 fad1 	bl	80038c8 <HAL_UART_Transmit>
			  		  HAL_Delay(500);
 8001326:	23fa      	movs	r3, #250	; 0xfa
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	0018      	movs	r0, r3
 800132c:	f001 f910 	bl	8002550 <HAL_Delay>
			  		  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CSQ], strlen((const char *)at_command[AT_CSQ]), 100);
 8001330:	193b      	adds	r3, r7, r4
 8001332:	33c8      	adds	r3, #200	; 0xc8
 8001334:	0018      	movs	r0, r3
 8001336:	f7fe fee7 	bl	8000108 <strlen>
 800133a:	0003      	movs	r3, r0
 800133c:	b29a      	uxth	r2, r3
 800133e:	193b      	adds	r3, r7, r4
 8001340:	33c8      	adds	r3, #200	; 0xc8
 8001342:	0019      	movs	r1, r3
 8001344:	4898      	ldr	r0, [pc, #608]	; (80015a8 <main+0x1304>)
 8001346:	2364      	movs	r3, #100	; 0x64
 8001348:	f002 fabe 	bl	80038c8 <HAL_UART_Transmit>
			  		  HAL_Delay(500);
 800134c:	23fa      	movs	r3, #250	; 0xfa
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	0018      	movs	r0, r3
 8001352:	f001 f8fd 	bl	8002550 <HAL_Delay>
			  		  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CSTT], strlen((const char *)at_command[AT_CSTT]), 100);
 8001356:	193b      	adds	r3, r7, r4
 8001358:	33fa      	adds	r3, #250	; 0xfa
 800135a:	0018      	movs	r0, r3
 800135c:	f7fe fed4 	bl	8000108 <strlen>
 8001360:	0003      	movs	r3, r0
 8001362:	b29a      	uxth	r2, r3
 8001364:	193b      	adds	r3, r7, r4
 8001366:	33fa      	adds	r3, #250	; 0xfa
 8001368:	0019      	movs	r1, r3
 800136a:	488f      	ldr	r0, [pc, #572]	; (80015a8 <main+0x1304>)
 800136c:	2364      	movs	r3, #100	; 0x64
 800136e:	f002 faab 	bl	80038c8 <HAL_UART_Transmit>
			  		  HAL_Delay(500);
 8001372:	23fa      	movs	r3, #250	; 0xfa
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	0018      	movs	r0, r3
 8001378:	f001 f8ea 	bl	8002550 <HAL_Delay>
			  		  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIICR], strlen((const char *)at_command[AT_CIICR]), 100);
 800137c:	193b      	adds	r3, r7, r4
 800137e:	332d      	adds	r3, #45	; 0x2d
 8001380:	33ff      	adds	r3, #255	; 0xff
 8001382:	0018      	movs	r0, r3
 8001384:	f7fe fec0 	bl	8000108 <strlen>
 8001388:	0003      	movs	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	193b      	adds	r3, r7, r4
 800138e:	332d      	adds	r3, #45	; 0x2d
 8001390:	33ff      	adds	r3, #255	; 0xff
 8001392:	0019      	movs	r1, r3
 8001394:	4884      	ldr	r0, [pc, #528]	; (80015a8 <main+0x1304>)
 8001396:	2364      	movs	r3, #100	; 0x64
 8001398:	f002 fa96 	bl	80038c8 <HAL_UART_Transmit>
			  		  HAL_Delay(5000);
 800139c:	4b83      	ldr	r3, [pc, #524]	; (80015ac <main+0x1308>)
 800139e:	0018      	movs	r0, r3
 80013a0:	f001 f8d6 	bl	8002550 <HAL_Delay>
			  		  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIFSR], strlen((const char *)at_command[AT_CIFSR]), 100);
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	335f      	adds	r3, #95	; 0x5f
 80013a8:	33ff      	adds	r3, #255	; 0xff
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7fe feac 	bl	8000108 <strlen>
 80013b0:	0003      	movs	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	335f      	adds	r3, #95	; 0x5f
 80013b8:	33ff      	adds	r3, #255	; 0xff
 80013ba:	0019      	movs	r1, r3
 80013bc:	487a      	ldr	r0, [pc, #488]	; (80015a8 <main+0x1304>)
 80013be:	2364      	movs	r3, #100	; 0x64
 80013c0:	f002 fa82 	bl	80038c8 <HAL_UART_Transmit>
			  		  HAL_Delay(5000);
 80013c4:	4b79      	ldr	r3, [pc, #484]	; (80015ac <main+0x1308>)
 80013c6:	0018      	movs	r0, r3
 80013c8:	f001 f8c2 	bl	8002550 <HAL_Delay>
			  	  }
			  	  HAL_GPIO_TogglePin(LED_PC13_GPIO_Port, LED_PC13_Pin);
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	019b      	lsls	r3, r3, #6
 80013d0:	4a77      	ldr	r2, [pc, #476]	; (80015b0 <main+0x130c>)
 80013d2:	0019      	movs	r1, r3
 80013d4:	0010      	movs	r0, r2
 80013d6:	f001 fcce 	bl	8002d76 <HAL_GPIO_TogglePin>
			  	  HAL_Delay(500);
 80013da:	23fa      	movs	r3, #250	; 0xfa
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	0018      	movs	r0, r3
 80013e0:	f001 f8b6 	bl	8002550 <HAL_Delay>
			  while (ctrl_creg_loop == false)
 80013e4:	4a6d      	ldr	r2, [pc, #436]	; (800159c <main+0x12f8>)
 80013e6:	18bb      	adds	r3, r7, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d100      	bne.n	80013f0 <main+0x114c>
 80013ee:	e680      	b.n	80010f2 <main+0xe4e>
			  }
			  ctrl_creg_loop = false;
 80013f0:	18bb      	adds	r3, r7, r2
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2, (unsigned char *)error_msg_NS, strlen((const char *)error_msg_NS), 100);
			  HAL_UART_Transmit(&huart2, (unsigned char *)send_msg, strlen((const char *)send_msg), 100);
			  HAL_Delay(5000);

			  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPCLOSE], strlen((const char *)at_command[AT_CIPCLOSE]), 100);*/
			  HAL_GPIO_WritePin(ERROR_1_GPIO_Port, ERROR_1_Pin, GPIO_PIN_SET);   // SIGNIFICA QUE O SIMBOLO DE NS DEVERIA TER SIDO ENVIADO
 80013f6:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <main+0x12fc>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	2120      	movs	r1, #32
 80013fc:	0018      	movs	r0, r3
 80013fe:	f001 fc9d 	bl	8002d3c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ERROR_2_GPIO_Port, ERROR_2_Pin, GPIO_PIN_RESET); // SIGNIFICA QUE O SIMBOLO DE NS DEVERIA TER SIDO ENVIADO
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4866      	ldr	r0, [pc, #408]	; (80015a0 <main+0x12fc>)
 8001408:	2200      	movs	r2, #0
 800140a:	0019      	movs	r1, r3
 800140c:	f001 fc96 	bl	8002d3c <HAL_GPIO_WritePin>
			  HAL_Delay(5000);
 8001410:	4b66      	ldr	r3, [pc, #408]	; (80015ac <main+0x1308>)
 8001412:	0018      	movs	r0, r3
 8001414:	f001 f89c 	bl	8002550 <HAL_Delay>
 8001418:	e3a8      	b.n	8001b6c <main+0x18c8>
		  }
		  else
		  {
			  if ((data_filter_uart1[31] == 0x2C) && ((data_filter_uart1[32] == 0x45) || (data_filter_uart1[32] == 0x57)) && ((data_filter_uart1[33] == 0x2C)))
 800141a:	21bf      	movs	r1, #191	; 0xbf
 800141c:	0089      	lsls	r1, r1, #2
 800141e:	187b      	adds	r3, r7, r1
 8001420:	7fdb      	ldrb	r3, [r3, #31]
 8001422:	2b2c      	cmp	r3, #44	; 0x2c
 8001424:	d000      	beq.n	8001428 <main+0x1184>
 8001426:	e385      	b.n	8001b34 <main+0x1890>
 8001428:	187b      	adds	r3, r7, r1
 800142a:	2220      	movs	r2, #32
 800142c:	5c9b      	ldrb	r3, [r3, r2]
 800142e:	2b45      	cmp	r3, #69	; 0x45
 8001430:	d005      	beq.n	800143e <main+0x119a>
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2220      	movs	r2, #32
 8001436:	5c9b      	ldrb	r3, [r3, r2]
 8001438:	2b57      	cmp	r3, #87	; 0x57
 800143a:	d000      	beq.n	800143e <main+0x119a>
 800143c:	e37a      	b.n	8001b34 <main+0x1890>
 800143e:	21bf      	movs	r1, #191	; 0xbf
 8001440:	0089      	lsls	r1, r1, #2
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2221      	movs	r2, #33	; 0x21
 8001446:	5c9b      	ldrb	r3, [r3, r2]
 8001448:	2b2c      	cmp	r3, #44	; 0x2c
 800144a:	d000      	beq.n	800144e <main+0x11aa>
 800144c:	e372      	b.n	8001b34 <main+0x1890>
				{
				  if ((data_filter_uart1[6] == 0x2C) && (data_filter_uart1[17] == 0x2C) && ((data_filter_uart1[18] == 0x4E) || (data_filter_uart1[18] == 0x53))
 800144e:	187b      	adds	r3, r7, r1
 8001450:	799b      	ldrb	r3, [r3, #6]
 8001452:	2b2c      	cmp	r3, #44	; 0x2c
 8001454:	d000      	beq.n	8001458 <main+0x11b4>
 8001456:	e388      	b.n	8001b6a <main+0x18c6>
 8001458:	187b      	adds	r3, r7, r1
 800145a:	7c5b      	ldrb	r3, [r3, #17]
 800145c:	2b2c      	cmp	r3, #44	; 0x2c
 800145e:	d000      	beq.n	8001462 <main+0x11be>
 8001460:	e383      	b.n	8001b6a <main+0x18c6>
 8001462:	187b      	adds	r3, r7, r1
 8001464:	7c9b      	ldrb	r3, [r3, #18]
 8001466:	2b4e      	cmp	r3, #78	; 0x4e
 8001468:	d004      	beq.n	8001474 <main+0x11d0>
 800146a:	187b      	adds	r3, r7, r1
 800146c:	7c9b      	ldrb	r3, [r3, #18]
 800146e:	2b53      	cmp	r3, #83	; 0x53
 8001470:	d000      	beq.n	8001474 <main+0x11d0>
 8001472:	e37a      	b.n	8001b6a <main+0x18c6>
				  		  					&& (data_filter_uart1[19] == 0x2C))// gambiarra - SE O DADO DE GPS CAPTURADO FOR VÁLIDO, ELE É TRANSMITIDO
 8001474:	23bf      	movs	r3, #191	; 0xbf
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	7cdb      	ldrb	r3, [r3, #19]
 800147c:	2b2c      	cmp	r3, #44	; 0x2c
 800147e:	d000      	beq.n	8001482 <main+0x11de>
 8001480:	e373      	b.n	8001b6a <main+0x18c6>
				  {
					  //INICIO VERIFICAÇÃO DE CONECTIVIDADE GPRS
					  while (ctrl_creg_loop == false)
 8001482:	e171      	b.n	8001768 <main+0x14c4>
					  {
						  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CREG], strlen((const char *)at_command[AT_CREG]), 100);
 8001484:	2464      	movs	r4, #100	; 0x64
 8001486:	193b      	adds	r3, r7, r4
 8001488:	3396      	adds	r3, #150	; 0x96
 800148a:	0018      	movs	r0, r3
 800148c:	f7fe fe3c 	bl	8000108 <strlen>
 8001490:	0003      	movs	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	193b      	adds	r3, r7, r4
 8001496:	3396      	adds	r3, #150	; 0x96
 8001498:	0019      	movs	r1, r3
 800149a:	4843      	ldr	r0, [pc, #268]	; (80015a8 <main+0x1304>)
 800149c:	2364      	movs	r3, #100	; 0x64
 800149e:	f002 fa13 	bl	80038c8 <HAL_UART_Transmit>
						  HAL_Delay(500);
 80014a2:	23fa      	movs	r3, #250	; 0xfa
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	0018      	movs	r0, r3
 80014a8:	f001 f852 	bl	8002550 <HAL_Delay>
						  if (ctrl_uart2 == true)
 80014ac:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <main+0x1310>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d158      	bne.n	8001566 <main+0x12c2>
						  {
							  for (uint8_t a = 0; a<=60; a++)
 80014b4:	4b40      	ldr	r3, [pc, #256]	; (80015b8 <main+0x1314>)
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	e04e      	b.n	800155c <main+0x12b8>
							  {
								  if ((data_in_uart2[a] == 0x2B) && (data_in_uart2[a+1] == 0x43) && (data_in_uart2[a+2] == 0x52) && (data_in_uart2[a+3] == 0x45)
 80014be:	493e      	ldr	r1, [pc, #248]	; (80015b8 <main+0x1314>)
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4a3d      	ldr	r2, [pc, #244]	; (80015bc <main+0x1318>)
 80014c6:	5cd3      	ldrb	r3, [r2, r3]
 80014c8:	2b2b      	cmp	r3, #43	; 0x2b
 80014ca:	d141      	bne.n	8001550 <main+0x12ac>
 80014cc:	187b      	adds	r3, r7, r1
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	4a3a      	ldr	r2, [pc, #232]	; (80015bc <main+0x1318>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	2b43      	cmp	r3, #67	; 0x43
 80014d8:	d13a      	bne.n	8001550 <main+0x12ac>
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	3302      	adds	r3, #2
 80014e0:	4a36      	ldr	r2, [pc, #216]	; (80015bc <main+0x1318>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	2b52      	cmp	r3, #82	; 0x52
 80014e6:	d133      	bne.n	8001550 <main+0x12ac>
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	3303      	adds	r3, #3
 80014ee:	4a33      	ldr	r2, [pc, #204]	; (80015bc <main+0x1318>)
 80014f0:	5cd3      	ldrb	r3, [r2, r3]
 80014f2:	2b45      	cmp	r3, #69	; 0x45
 80014f4:	d12c      	bne.n	8001550 <main+0x12ac>
										  && (data_in_uart2[a+4] == 0x47) && (data_in_uart2[a+5] == 0x3A))//filtrar dados +CREG:
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	3304      	adds	r3, #4
 80014fc:	4a2f      	ldr	r2, [pc, #188]	; (80015bc <main+0x1318>)
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
 8001500:	2b47      	cmp	r3, #71	; 0x47
 8001502:	d125      	bne.n	8001550 <main+0x12ac>
 8001504:	187b      	adds	r3, r7, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	3305      	adds	r3, #5
 800150a:	4a2c      	ldr	r2, [pc, #176]	; (80015bc <main+0x1318>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	2b3a      	cmp	r3, #58	; 0x3a
 8001510:	d11e      	bne.n	8001550 <main+0x12ac>
					  			  {
									  for(uint8_t b = 0; b<=10; b++)
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <main+0x131c>)
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e013      	b.n	8001544 <main+0x12a0>
									  {
										  data_filter_uart2[b] = data_in_uart2[a+b];
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <main+0x1314>)
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	4827      	ldr	r0, [pc, #156]	; (80015c0 <main+0x131c>)
 8001524:	183b      	adds	r3, r7, r0
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	18d2      	adds	r2, r2, r3
 800152a:	183b      	adds	r3, r7, r0
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4923      	ldr	r1, [pc, #140]	; (80015bc <main+0x1318>)
 8001530:	5c89      	ldrb	r1, [r1, r2]
 8001532:	22a6      	movs	r2, #166	; 0xa6
 8001534:	0092      	lsls	r2, r2, #2
 8001536:	18ba      	adds	r2, r7, r2
 8001538:	54d1      	strb	r1, [r2, r3]
									  for(uint8_t b = 0; b<=10; b++)
 800153a:	183b      	adds	r3, r7, r0
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	183b      	adds	r3, r7, r0
 8001540:	3201      	adds	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <main+0x131c>)
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b0a      	cmp	r3, #10
 800154c:	d9e6      	bls.n	800151c <main+0x1278>
									  }
									  break;
 800154e:	e00a      	b.n	8001566 <main+0x12c2>
							  for (uint8_t a = 0; a<=60; a++)
 8001550:	4919      	ldr	r1, [pc, #100]	; (80015b8 <main+0x1314>)
 8001552:	187b      	adds	r3, r7, r1
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	187b      	adds	r3, r7, r1
 8001558:	3201      	adds	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <main+0x1314>)
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b3c      	cmp	r3, #60	; 0x3c
 8001564:	d9ab      	bls.n	80014be <main+0x121a>
					  			  }
							  }
						  }
						  if ((data_filter_uart2[9] == 0x31) || (data_filter_uart2[9] == 0x35))
 8001566:	22a6      	movs	r2, #166	; 0xa6
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	18bb      	adds	r3, r7, r2
 800156c:	7a5b      	ldrb	r3, [r3, #9]
 800156e:	2b31      	cmp	r3, #49	; 0x31
 8001570:	d003      	beq.n	800157a <main+0x12d6>
 8001572:	18bb      	adds	r3, r7, r2
 8001574:	7a5b      	ldrb	r3, [r3, #9]
 8001576:	2b35      	cmp	r3, #53	; 0x35
 8001578:	d124      	bne.n	80015c4 <main+0x1320>
						  {
							  HAL_UART_Transmit(&huart1, (unsigned char *)data_filter_uart2, 10, 100);
 800157a:	23a6      	movs	r3, #166	; 0xa6
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	18f9      	adds	r1, r7, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <main+0x12f4>)
 8001582:	2364      	movs	r3, #100	; 0x64
 8001584:	220a      	movs	r2, #10
 8001586:	f002 f99f 	bl	80038c8 <HAL_UART_Transmit>
							  ctrl_creg_loop = true;
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <main+0x12f8>)
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
 8001592:	e0dd      	b.n	8001750 <main+0x14ac>
 8001594:	00000369 	.word	0x00000369
 8001598:	20000028 	.word	0x20000028
 800159c:	0000036f 	.word	0x0000036f
 80015a0:	48000400 	.word	0x48000400
 80015a4:	00007530 	.word	0x00007530
 80015a8:	200000ac 	.word	0x200000ac
 80015ac:	00001388 	.word	0x00001388
 80015b0:	48000800 	.word	0x48000800
 80015b4:	20000346 	.word	0x20000346
 80015b8:	00000367 	.word	0x00000367
 80015bc:	20000308 	.word	0x20000308
 80015c0:	00000366 	.word	0x00000366
						  }
						  else
						  {
							  HAL_GPIO_WritePin(ERROR_1_GPIO_Port, ERROR_1_Pin, GPIO_PIN_SET); // SIGNIFICA QUE HA PROBLEMA DE CONECTIVIDADE GPRS
 80015c4:	4be8      	ldr	r3, [pc, #928]	; (8001968 <main+0x16c4>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	2120      	movs	r1, #32
 80015ca:	0018      	movs	r0, r3
 80015cc:	f001 fbb6 	bl	8002d3c <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(ERROR_2_GPIO_Port, ERROR_2_Pin, GPIO_PIN_SET); // SIGNIFICA QUE HA PROBLEMA DE CONECTIVIDADE GPRS
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	48e4      	ldr	r0, [pc, #912]	; (8001968 <main+0x16c4>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	0019      	movs	r1, r3
 80015da:	f001 fbaf 	bl	8002d3c <HAL_GPIO_WritePin>

							  HAL_UART_Transmit(&huart1, (unsigned char *)data_filter_uart2, 10, 100);
 80015de:	23a6      	movs	r3, #166	; 0xa6
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	18f9      	adds	r1, r7, r3
 80015e4:	48e1      	ldr	r0, [pc, #900]	; (800196c <main+0x16c8>)
 80015e6:	2364      	movs	r3, #100	; 0x64
 80015e8:	220a      	movs	r2, #10
 80015ea:	f002 f96d 	bl	80038c8 <HAL_UART_Transmit>
							  //reset SIM800L
							  HAL_GPIO_WritePin(RESET_SIM800l_GPIO_Port, RESET_SIM800l_Pin, GPIO_PIN_RESET);
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	0219      	lsls	r1, r3, #8
 80015f2:	2390      	movs	r3, #144	; 0x90
 80015f4:	05db      	lsls	r3, r3, #23
 80015f6:	2200      	movs	r2, #0
 80015f8:	0018      	movs	r0, r3
 80015fa:	f001 fb9f 	bl	8002d3c <HAL_GPIO_WritePin>
							  HAL_Delay(1000);
 80015fe:	23fa      	movs	r3, #250	; 0xfa
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	0018      	movs	r0, r3
 8001604:	f000 ffa4 	bl	8002550 <HAL_Delay>
							  HAL_GPIO_WritePin(RESET_SIM800l_GPIO_Port, RESET_SIM800l_Pin, GPIO_PIN_SET);
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	0219      	lsls	r1, r3, #8
 800160c:	2390      	movs	r3, #144	; 0x90
 800160e:	05db      	lsls	r3, r3, #23
 8001610:	2201      	movs	r2, #1
 8001612:	0018      	movs	r0, r3
 8001614:	f001 fb92 	bl	8002d3c <HAL_GPIO_WritePin>
							  HAL_Delay(30000);
 8001618:	4bd5      	ldr	r3, [pc, #852]	; (8001970 <main+0x16cc>)
 800161a:	0018      	movs	r0, r3
 800161c:	f000 ff98 	bl	8002550 <HAL_Delay>

							  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT], strlen((const char *)at_command[AT]), 100);
 8001620:	2464      	movs	r4, #100	; 0x64
 8001622:	193b      	adds	r3, r7, r4
 8001624:	0018      	movs	r0, r3
 8001626:	f7fe fd6f 	bl	8000108 <strlen>
 800162a:	0003      	movs	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	1939      	adds	r1, r7, r4
 8001630:	48d0      	ldr	r0, [pc, #832]	; (8001974 <main+0x16d0>)
 8001632:	2364      	movs	r3, #100	; 0x64
 8001634:	f002 f948 	bl	80038c8 <HAL_UART_Transmit>
							  HAL_Delay(500);
 8001638:	23fa      	movs	r3, #250	; 0xfa
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	0018      	movs	r0, r3
 800163e:	f000 ff87 	bl	8002550 <HAL_Delay>
							  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CFUN], strlen((const char *)at_command[AT_CFUN]), 100);
 8001642:	193b      	adds	r3, r7, r4
 8001644:	3332      	adds	r3, #50	; 0x32
 8001646:	0018      	movs	r0, r3
 8001648:	f7fe fd5e 	bl	8000108 <strlen>
 800164c:	0003      	movs	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	193b      	adds	r3, r7, r4
 8001652:	3332      	adds	r3, #50	; 0x32
 8001654:	0019      	movs	r1, r3
 8001656:	48c7      	ldr	r0, [pc, #796]	; (8001974 <main+0x16d0>)
 8001658:	2364      	movs	r3, #100	; 0x64
 800165a:	f002 f935 	bl	80038c8 <HAL_UART_Transmit>
							  HAL_Delay(500);
 800165e:	23fa      	movs	r3, #250	; 0xfa
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	0018      	movs	r0, r3
 8001664:	f000 ff74 	bl	8002550 <HAL_Delay>
							  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CPIN], strlen((const char *)at_command[AT_CPIN]), 100);
 8001668:	193b      	adds	r3, r7, r4
 800166a:	3364      	adds	r3, #100	; 0x64
 800166c:	0018      	movs	r0, r3
 800166e:	f7fe fd4b 	bl	8000108 <strlen>
 8001672:	0003      	movs	r3, r0
 8001674:	b29a      	uxth	r2, r3
 8001676:	193b      	adds	r3, r7, r4
 8001678:	3364      	adds	r3, #100	; 0x64
 800167a:	0019      	movs	r1, r3
 800167c:	48bd      	ldr	r0, [pc, #756]	; (8001974 <main+0x16d0>)
 800167e:	2364      	movs	r3, #100	; 0x64
 8001680:	f002 f922 	bl	80038c8 <HAL_UART_Transmit>
							  HAL_Delay(500);
 8001684:	23fa      	movs	r3, #250	; 0xfa
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	0018      	movs	r0, r3
 800168a:	f000 ff61 	bl	8002550 <HAL_Delay>
							  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CREG], strlen((const char *)at_command[AT_CREG]), 100);
 800168e:	193b      	adds	r3, r7, r4
 8001690:	3396      	adds	r3, #150	; 0x96
 8001692:	0018      	movs	r0, r3
 8001694:	f7fe fd38 	bl	8000108 <strlen>
 8001698:	0003      	movs	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	193b      	adds	r3, r7, r4
 800169e:	3396      	adds	r3, #150	; 0x96
 80016a0:	0019      	movs	r1, r3
 80016a2:	48b4      	ldr	r0, [pc, #720]	; (8001974 <main+0x16d0>)
 80016a4:	2364      	movs	r3, #100	; 0x64
 80016a6:	f002 f90f 	bl	80038c8 <HAL_UART_Transmit>
							  HAL_Delay(500);
 80016aa:	23fa      	movs	r3, #250	; 0xfa
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	0018      	movs	r0, r3
 80016b0:	f000 ff4e 	bl	8002550 <HAL_Delay>
							  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CSQ], strlen((const char *)at_command[AT_CSQ]), 100);
 80016b4:	193b      	adds	r3, r7, r4
 80016b6:	33c8      	adds	r3, #200	; 0xc8
 80016b8:	0018      	movs	r0, r3
 80016ba:	f7fe fd25 	bl	8000108 <strlen>
 80016be:	0003      	movs	r3, r0
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	33c8      	adds	r3, #200	; 0xc8
 80016c6:	0019      	movs	r1, r3
 80016c8:	48aa      	ldr	r0, [pc, #680]	; (8001974 <main+0x16d0>)
 80016ca:	2364      	movs	r3, #100	; 0x64
 80016cc:	f002 f8fc 	bl	80038c8 <HAL_UART_Transmit>
							  HAL_Delay(500);
 80016d0:	23fa      	movs	r3, #250	; 0xfa
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	0018      	movs	r0, r3
 80016d6:	f000 ff3b 	bl	8002550 <HAL_Delay>
							  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CSTT], strlen((const char *)at_command[AT_CSTT]), 100);
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	33fa      	adds	r3, #250	; 0xfa
 80016de:	0018      	movs	r0, r3
 80016e0:	f7fe fd12 	bl	8000108 <strlen>
 80016e4:	0003      	movs	r3, r0
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	193b      	adds	r3, r7, r4
 80016ea:	33fa      	adds	r3, #250	; 0xfa
 80016ec:	0019      	movs	r1, r3
 80016ee:	48a1      	ldr	r0, [pc, #644]	; (8001974 <main+0x16d0>)
 80016f0:	2364      	movs	r3, #100	; 0x64
 80016f2:	f002 f8e9 	bl	80038c8 <HAL_UART_Transmit>
							  HAL_Delay(500);
 80016f6:	23fa      	movs	r3, #250	; 0xfa
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	0018      	movs	r0, r3
 80016fc:	f000 ff28 	bl	8002550 <HAL_Delay>
							  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIICR], strlen((const char *)at_command[AT_CIICR]), 100);
 8001700:	193b      	adds	r3, r7, r4
 8001702:	332d      	adds	r3, #45	; 0x2d
 8001704:	33ff      	adds	r3, #255	; 0xff
 8001706:	0018      	movs	r0, r3
 8001708:	f7fe fcfe 	bl	8000108 <strlen>
 800170c:	0003      	movs	r3, r0
 800170e:	b29a      	uxth	r2, r3
 8001710:	193b      	adds	r3, r7, r4
 8001712:	332d      	adds	r3, #45	; 0x2d
 8001714:	33ff      	adds	r3, #255	; 0xff
 8001716:	0019      	movs	r1, r3
 8001718:	4896      	ldr	r0, [pc, #600]	; (8001974 <main+0x16d0>)
 800171a:	2364      	movs	r3, #100	; 0x64
 800171c:	f002 f8d4 	bl	80038c8 <HAL_UART_Transmit>
							  HAL_Delay(5000);
 8001720:	4b95      	ldr	r3, [pc, #596]	; (8001978 <main+0x16d4>)
 8001722:	0018      	movs	r0, r3
 8001724:	f000 ff14 	bl	8002550 <HAL_Delay>
							  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIFSR], strlen((const char *)at_command[AT_CIFSR]), 100);
 8001728:	193b      	adds	r3, r7, r4
 800172a:	335f      	adds	r3, #95	; 0x5f
 800172c:	33ff      	adds	r3, #255	; 0xff
 800172e:	0018      	movs	r0, r3
 8001730:	f7fe fcea 	bl	8000108 <strlen>
 8001734:	0003      	movs	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	193b      	adds	r3, r7, r4
 800173a:	335f      	adds	r3, #95	; 0x5f
 800173c:	33ff      	adds	r3, #255	; 0xff
 800173e:	0019      	movs	r1, r3
 8001740:	488c      	ldr	r0, [pc, #560]	; (8001974 <main+0x16d0>)
 8001742:	2364      	movs	r3, #100	; 0x64
 8001744:	f002 f8c0 	bl	80038c8 <HAL_UART_Transmit>
							  HAL_Delay(5000);
 8001748:	4b8b      	ldr	r3, [pc, #556]	; (8001978 <main+0x16d4>)
 800174a:	0018      	movs	r0, r3
 800174c:	f000 ff00 	bl	8002550 <HAL_Delay>
						  }
						  HAL_GPIO_TogglePin(LED_PC13_GPIO_Port, LED_PC13_Pin);
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	019b      	lsls	r3, r3, #6
 8001754:	4a89      	ldr	r2, [pc, #548]	; (800197c <main+0x16d8>)
 8001756:	0019      	movs	r1, r3
 8001758:	0010      	movs	r0, r2
 800175a:	f001 fb0c 	bl	8002d76 <HAL_GPIO_TogglePin>
						  HAL_Delay(500);
 800175e:	23fa      	movs	r3, #250	; 0xfa
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	0018      	movs	r0, r3
 8001764:	f000 fef4 	bl	8002550 <HAL_Delay>
					  while (ctrl_creg_loop == false)
 8001768:	4a85      	ldr	r2, [pc, #532]	; (8001980 <main+0x16dc>)
 800176a:	18bb      	adds	r3, r7, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d100      	bne.n	8001774 <main+0x14d0>
 8001772:	e687      	b.n	8001484 <main+0x11e0>
					  }
					  ctrl_creg_loop = false;
 8001774:	18bb      	adds	r3, r7, r2
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
					  //FIM VERIFICAÇÃO DE CONECTIVIDADE GPRS

					  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPSTART], strlen((const char *)at_command[AT_CIPSTART]), 100);
 800177a:	2464      	movs	r4, #100	; 0x64
 800177c:	193b      	adds	r3, r7, r4
 800177e:	3391      	adds	r3, #145	; 0x91
 8001780:	33ff      	adds	r3, #255	; 0xff
 8001782:	0018      	movs	r0, r3
 8001784:	f7fe fcc0 	bl	8000108 <strlen>
 8001788:	0003      	movs	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	193b      	adds	r3, r7, r4
 800178e:	3391      	adds	r3, #145	; 0x91
 8001790:	33ff      	adds	r3, #255	; 0xff
 8001792:	0019      	movs	r1, r3
 8001794:	4877      	ldr	r0, [pc, #476]	; (8001974 <main+0x16d0>)
 8001796:	2364      	movs	r3, #100	; 0x64
 8001798:	f002 f896 	bl	80038c8 <HAL_UART_Transmit>
					  HAL_Delay(5000);
 800179c:	4b76      	ldr	r3, [pc, #472]	; (8001978 <main+0x16d4>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 fed6 	bl	8002550 <HAL_Delay>

					  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPSEND], strlen((const char *)at_command[AT_CIPSEND]), 100);
 80017a4:	193b      	adds	r3, r7, r4
 80017a6:	33c3      	adds	r3, #195	; 0xc3
 80017a8:	33ff      	adds	r3, #255	; 0xff
 80017aa:	0018      	movs	r0, r3
 80017ac:	f7fe fcac 	bl	8000108 <strlen>
 80017b0:	0003      	movs	r3, r0
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	33c3      	adds	r3, #195	; 0xc3
 80017b8:	33ff      	adds	r3, #255	; 0xff
 80017ba:	0019      	movs	r1, r3
 80017bc:	486d      	ldr	r0, [pc, #436]	; (8001974 <main+0x16d0>)
 80017be:	2364      	movs	r3, #100	; 0x64
 80017c0:	f002 f882 	bl	80038c8 <HAL_UART_Transmit>
					  HAL_Delay(2000);
 80017c4:	23fa      	movs	r3, #250	; 0xfa
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	0018      	movs	r0, r3
 80017ca:	f000 fec1 	bl	8002550 <HAL_Delay>

					  HAL_UART_Transmit(&huart2, (unsigned char *)mqtt_packt_msg, 36, 100);
 80017ce:	0039      	movs	r1, r7
 80017d0:	4868      	ldr	r0, [pc, #416]	; (8001974 <main+0x16d0>)
 80017d2:	2364      	movs	r3, #100	; 0x64
 80017d4:	2224      	movs	r2, #36	; 0x24
 80017d6:	f002 f877 	bl	80038c8 <HAL_UART_Transmit>
					  HAL_UART_Transmit(&huart2, (unsigned char *)data_filter_uart1, 43, 100);
 80017da:	23bf      	movs	r3, #191	; 0xbf
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	18f9      	adds	r1, r7, r3
 80017e0:	4864      	ldr	r0, [pc, #400]	; (8001974 <main+0x16d0>)
 80017e2:	2364      	movs	r3, #100	; 0x64
 80017e4:	222b      	movs	r2, #43	; 0x2b
 80017e6:	f002 f86f 	bl	80038c8 <HAL_UART_Transmit>
					  HAL_UART_Transmit(&huart2, (unsigned char *)send_msg, strlen((const char *)send_msg), 100);
 80017ea:	25a3      	movs	r5, #163	; 0xa3
 80017ec:	00ad      	lsls	r5, r5, #2
 80017ee:	197b      	adds	r3, r7, r5
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7fe fc89 	bl	8000108 <strlen>
 80017f6:	0003      	movs	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	1979      	adds	r1, r7, r5
 80017fc:	485d      	ldr	r0, [pc, #372]	; (8001974 <main+0x16d0>)
 80017fe:	2364      	movs	r3, #100	; 0x64
 8001800:	f002 f862 	bl	80038c8 <HAL_UART_Transmit>
					  HAL_Delay(5000);
 8001804:	4b5c      	ldr	r3, [pc, #368]	; (8001978 <main+0x16d4>)
 8001806:	0018      	movs	r0, r3
 8001808:	f000 fea2 	bl	8002550 <HAL_Delay>

					  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPCLOSE], strlen((const char *)at_command[AT_CIPCLOSE]), 100);
 800180c:	193b      	adds	r3, r7, r4
 800180e:	33f5      	adds	r3, #245	; 0xf5
 8001810:	33ff      	adds	r3, #255	; 0xff
 8001812:	0018      	movs	r0, r3
 8001814:	f7fe fc78 	bl	8000108 <strlen>
 8001818:	0003      	movs	r3, r0
 800181a:	b29a      	uxth	r2, r3
 800181c:	193b      	adds	r3, r7, r4
 800181e:	33f5      	adds	r3, #245	; 0xf5
 8001820:	33ff      	adds	r3, #255	; 0xff
 8001822:	0019      	movs	r1, r3
 8001824:	4853      	ldr	r0, [pc, #332]	; (8001974 <main+0x16d0>)
 8001826:	2364      	movs	r3, #100	; 0x64
 8001828:	f002 f84e 	bl	80038c8 <HAL_UART_Transmit>
					  HAL_GPIO_WritePin(ERROR_1_GPIO_Port, ERROR_1_Pin, GPIO_PIN_RESET); // SIGNIFICA QUE NAO HA ERRO DE NS - NO SIGNAL
 800182c:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <main+0x16c4>)
 800182e:	2200      	movs	r2, #0
 8001830:	2120      	movs	r1, #32
 8001832:	0018      	movs	r0, r3
 8001834:	f001 fa82 	bl	8002d3c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(ERROR_2_GPIO_Port, ERROR_2_Pin, GPIO_PIN_RESET); // SIGNIFICA QUE NAO HA ERRO DE ID - INVALID DATA
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	484a      	ldr	r0, [pc, #296]	; (8001968 <main+0x16c4>)
 800183e:	2200      	movs	r2, #0
 8001840:	0019      	movs	r1, r3
 8001842:	f001 fa7b 	bl	8002d3c <HAL_GPIO_WritePin>
					  HAL_Delay(5000);
 8001846:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <main+0x16d4>)
 8001848:	0018      	movs	r0, r3
 800184a:	f000 fe81 	bl	8002550 <HAL_Delay>
				  if ((data_filter_uart1[6] == 0x2C) && (data_filter_uart1[17] == 0x2C) && ((data_filter_uart1[18] == 0x4E) || (data_filter_uart1[18] == 0x53))
 800184e:	e18c      	b.n	8001b6a <main+0x18c6>
			  else
			  {
				  //INICIO VERIFICAÇÃO DE CONECTIVIDADE GPRS
				  while (ctrl_creg_loop == false)
				  {
					  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CREG], strlen((const char *)at_command[AT_CREG]), 100);
 8001850:	2464      	movs	r4, #100	; 0x64
 8001852:	193b      	adds	r3, r7, r4
 8001854:	3396      	adds	r3, #150	; 0x96
 8001856:	0018      	movs	r0, r3
 8001858:	f7fe fc56 	bl	8000108 <strlen>
 800185c:	0003      	movs	r3, r0
 800185e:	b29a      	uxth	r2, r3
 8001860:	193b      	adds	r3, r7, r4
 8001862:	3396      	adds	r3, #150	; 0x96
 8001864:	0019      	movs	r1, r3
 8001866:	4843      	ldr	r0, [pc, #268]	; (8001974 <main+0x16d0>)
 8001868:	2364      	movs	r3, #100	; 0x64
 800186a:	f002 f82d 	bl	80038c8 <HAL_UART_Transmit>
					  HAL_Delay(500);
 800186e:	23fa      	movs	r3, #250	; 0xfa
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	0018      	movs	r0, r3
 8001874:	f000 fe6c 	bl	8002550 <HAL_Delay>
					  if (ctrl_uart2 == true)
 8001878:	4b42      	ldr	r3, [pc, #264]	; (8001984 <main+0x16e0>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d15b      	bne.n	8001938 <main+0x1694>
					  {
						  for (uint8_t a = 0; a<=60; a++)
 8001880:	4b41      	ldr	r3, [pc, #260]	; (8001988 <main+0x16e4>)
 8001882:	18fb      	adds	r3, r7, r3
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
 8001888:	e051      	b.n	800192e <main+0x168a>
						  {
							  if ((data_in_uart2[a] == 0x2B) && (data_in_uart2[a+1] == 0x43) && (data_in_uart2[a+2] == 0x52) && (data_in_uart2[a+3] == 0x45)
 800188a:	493f      	ldr	r1, [pc, #252]	; (8001988 <main+0x16e4>)
 800188c:	187b      	adds	r3, r7, r1
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4a3e      	ldr	r2, [pc, #248]	; (800198c <main+0x16e8>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	2b2b      	cmp	r3, #43	; 0x2b
 8001896:	d144      	bne.n	8001922 <main+0x167e>
 8001898:	187b      	adds	r3, r7, r1
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	4a3b      	ldr	r2, [pc, #236]	; (800198c <main+0x16e8>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	2b43      	cmp	r3, #67	; 0x43
 80018a4:	d13d      	bne.n	8001922 <main+0x167e>
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	3302      	adds	r3, #2
 80018ac:	4a37      	ldr	r2, [pc, #220]	; (800198c <main+0x16e8>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	2b52      	cmp	r3, #82	; 0x52
 80018b2:	d136      	bne.n	8001922 <main+0x167e>
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	3303      	adds	r3, #3
 80018ba:	4a34      	ldr	r2, [pc, #208]	; (800198c <main+0x16e8>)
 80018bc:	5cd3      	ldrb	r3, [r2, r3]
 80018be:	2b45      	cmp	r3, #69	; 0x45
 80018c0:	d12f      	bne.n	8001922 <main+0x167e>
									  && (data_in_uart2[a+4] == 0x47) && (data_in_uart2[a+5] == 0x3A))//filtrar dados +CREG:
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3304      	adds	r3, #4
 80018c8:	4a30      	ldr	r2, [pc, #192]	; (800198c <main+0x16e8>)
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	2b47      	cmp	r3, #71	; 0x47
 80018ce:	d128      	bne.n	8001922 <main+0x167e>
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	3305      	adds	r3, #5
 80018d6:	4a2d      	ldr	r2, [pc, #180]	; (800198c <main+0x16e8>)
 80018d8:	5cd3      	ldrb	r3, [r2, r3]
 80018da:	2b3a      	cmp	r3, #58	; 0x3a
 80018dc:	d121      	bne.n	8001922 <main+0x167e>
				  			  {
								  for(uint8_t b = 0; b<=10; b++)
 80018de:	23d9      	movs	r3, #217	; 0xd9
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	e014      	b.n	8001914 <main+0x1670>
								  {
									  data_filter_uart2[b] = data_in_uart2[a+b];
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <main+0x16e4>)
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	20d9      	movs	r0, #217	; 0xd9
 80018f2:	0080      	lsls	r0, r0, #2
 80018f4:	183b      	adds	r3, r7, r0
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	18d2      	adds	r2, r2, r3
 80018fa:	183b      	adds	r3, r7, r0
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4923      	ldr	r1, [pc, #140]	; (800198c <main+0x16e8>)
 8001900:	5c89      	ldrb	r1, [r1, r2]
 8001902:	22a6      	movs	r2, #166	; 0xa6
 8001904:	0092      	lsls	r2, r2, #2
 8001906:	18ba      	adds	r2, r7, r2
 8001908:	54d1      	strb	r1, [r2, r3]
								  for(uint8_t b = 0; b<=10; b++)
 800190a:	183b      	adds	r3, r7, r0
 800190c:	781a      	ldrb	r2, [r3, #0]
 800190e:	183b      	adds	r3, r7, r0
 8001910:	3201      	adds	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	23d9      	movs	r3, #217	; 0xd9
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b0a      	cmp	r3, #10
 800191e:	d9e4      	bls.n	80018ea <main+0x1646>
								  }
								  break;
 8001920:	e00a      	b.n	8001938 <main+0x1694>
						  for (uint8_t a = 0; a<=60; a++)
 8001922:	4919      	ldr	r1, [pc, #100]	; (8001988 <main+0x16e4>)
 8001924:	187b      	adds	r3, r7, r1
 8001926:	781a      	ldrb	r2, [r3, #0]
 8001928:	187b      	adds	r3, r7, r1
 800192a:	3201      	adds	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <main+0x16e4>)
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b3c      	cmp	r3, #60	; 0x3c
 8001936:	d9a8      	bls.n	800188a <main+0x15e6>
				  			  }
						  }
					  }
					  if ((data_filter_uart2[9] == 0x31) || (data_filter_uart2[9] == 0x35))
 8001938:	22a6      	movs	r2, #166	; 0xa6
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	18bb      	adds	r3, r7, r2
 800193e:	7a5b      	ldrb	r3, [r3, #9]
 8001940:	2b31      	cmp	r3, #49	; 0x31
 8001942:	d003      	beq.n	800194c <main+0x16a8>
 8001944:	18bb      	adds	r3, r7, r2
 8001946:	7a5b      	ldrb	r3, [r3, #9]
 8001948:	2b35      	cmp	r3, #53	; 0x35
 800194a:	d121      	bne.n	8001990 <main+0x16ec>
					  {
						  HAL_UART_Transmit(&huart1, (unsigned char *)data_filter_uart2, 10, 100);
 800194c:	23a6      	movs	r3, #166	; 0xa6
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	18f9      	adds	r1, r7, r3
 8001952:	4806      	ldr	r0, [pc, #24]	; (800196c <main+0x16c8>)
 8001954:	2364      	movs	r3, #100	; 0x64
 8001956:	220a      	movs	r2, #10
 8001958:	f001 ffb6 	bl	80038c8 <HAL_UART_Transmit>
						  ctrl_creg_loop = true;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <main+0x16dc>)
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e0da      	b.n	8001b1c <main+0x1878>
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	48000400 	.word	0x48000400
 800196c:	20000028 	.word	0x20000028
 8001970:	00007530 	.word	0x00007530
 8001974:	200000ac 	.word	0x200000ac
 8001978:	00001388 	.word	0x00001388
 800197c:	48000800 	.word	0x48000800
 8001980:	0000036f 	.word	0x0000036f
 8001984:	20000346 	.word	0x20000346
 8001988:	00000365 	.word	0x00000365
 800198c:	20000308 	.word	0x20000308
					  }
					  else
					  {
						  HAL_GPIO_WritePin(ERROR_1_GPIO_Port, ERROR_1_Pin, GPIO_PIN_SET); // SIGNIFICA QUE HA PROBLEMA DE CONECTIVIDADE GPRS
 8001990:	4beb      	ldr	r3, [pc, #940]	; (8001d40 <main+0x1a9c>)
 8001992:	2201      	movs	r2, #1
 8001994:	2120      	movs	r1, #32
 8001996:	0018      	movs	r0, r3
 8001998:	f001 f9d0 	bl	8002d3c <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(ERROR_2_GPIO_Port, ERROR_2_Pin, GPIO_PIN_SET); // SIGNIFICA QUE HA PROBLEMA DE CONECTIVIDADE GPRS
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	48e7      	ldr	r0, [pc, #924]	; (8001d40 <main+0x1a9c>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	0019      	movs	r1, r3
 80019a6:	f001 f9c9 	bl	8002d3c <HAL_GPIO_WritePin>

						  HAL_UART_Transmit(&huart1, (unsigned char *)data_filter_uart2, 10, 100);
 80019aa:	23a6      	movs	r3, #166	; 0xa6
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	18f9      	adds	r1, r7, r3
 80019b0:	48e4      	ldr	r0, [pc, #912]	; (8001d44 <main+0x1aa0>)
 80019b2:	2364      	movs	r3, #100	; 0x64
 80019b4:	220a      	movs	r2, #10
 80019b6:	f001 ff87 	bl	80038c8 <HAL_UART_Transmit>
						  //reset SIM800L
						  HAL_GPIO_WritePin(RESET_SIM800l_GPIO_Port, RESET_SIM800l_Pin, GPIO_PIN_RESET);
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	0219      	lsls	r1, r3, #8
 80019be:	2390      	movs	r3, #144	; 0x90
 80019c0:	05db      	lsls	r3, r3, #23
 80019c2:	2200      	movs	r2, #0
 80019c4:	0018      	movs	r0, r3
 80019c6:	f001 f9b9 	bl	8002d3c <HAL_GPIO_WritePin>
						  HAL_Delay(1000);
 80019ca:	23fa      	movs	r3, #250	; 0xfa
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	0018      	movs	r0, r3
 80019d0:	f000 fdbe 	bl	8002550 <HAL_Delay>
						  HAL_GPIO_WritePin(RESET_SIM800l_GPIO_Port, RESET_SIM800l_Pin, GPIO_PIN_SET);
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	0219      	lsls	r1, r3, #8
 80019d8:	2390      	movs	r3, #144	; 0x90
 80019da:	05db      	lsls	r3, r3, #23
 80019dc:	2201      	movs	r2, #1
 80019de:	0018      	movs	r0, r3
 80019e0:	f001 f9ac 	bl	8002d3c <HAL_GPIO_WritePin>
						  HAL_Delay(30000);
 80019e4:	4bd8      	ldr	r3, [pc, #864]	; (8001d48 <main+0x1aa4>)
 80019e6:	0018      	movs	r0, r3
 80019e8:	f000 fdb2 	bl	8002550 <HAL_Delay>

						  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT], strlen((const char *)at_command[AT]), 100);
 80019ec:	2464      	movs	r4, #100	; 0x64
 80019ee:	193b      	adds	r3, r7, r4
 80019f0:	0018      	movs	r0, r3
 80019f2:	f7fe fb89 	bl	8000108 <strlen>
 80019f6:	0003      	movs	r3, r0
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	1939      	adds	r1, r7, r4
 80019fc:	48d3      	ldr	r0, [pc, #844]	; (8001d4c <main+0x1aa8>)
 80019fe:	2364      	movs	r3, #100	; 0x64
 8001a00:	f001 ff62 	bl	80038c8 <HAL_UART_Transmit>
						  HAL_Delay(500);
 8001a04:	23fa      	movs	r3, #250	; 0xfa
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 fda1 	bl	8002550 <HAL_Delay>
						  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CFUN], strlen((const char *)at_command[AT_CFUN]), 100);
 8001a0e:	193b      	adds	r3, r7, r4
 8001a10:	3332      	adds	r3, #50	; 0x32
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7fe fb78 	bl	8000108 <strlen>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	3332      	adds	r3, #50	; 0x32
 8001a20:	0019      	movs	r1, r3
 8001a22:	48ca      	ldr	r0, [pc, #808]	; (8001d4c <main+0x1aa8>)
 8001a24:	2364      	movs	r3, #100	; 0x64
 8001a26:	f001 ff4f 	bl	80038c8 <HAL_UART_Transmit>
						  HAL_Delay(500);
 8001a2a:	23fa      	movs	r3, #250	; 0xfa
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 fd8e 	bl	8002550 <HAL_Delay>
						  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CPIN], strlen((const char *)at_command[AT_CPIN]), 100);
 8001a34:	193b      	adds	r3, r7, r4
 8001a36:	3364      	adds	r3, #100	; 0x64
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7fe fb65 	bl	8000108 <strlen>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	3364      	adds	r3, #100	; 0x64
 8001a46:	0019      	movs	r1, r3
 8001a48:	48c0      	ldr	r0, [pc, #768]	; (8001d4c <main+0x1aa8>)
 8001a4a:	2364      	movs	r3, #100	; 0x64
 8001a4c:	f001 ff3c 	bl	80038c8 <HAL_UART_Transmit>
						  HAL_Delay(500);
 8001a50:	23fa      	movs	r3, #250	; 0xfa
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	0018      	movs	r0, r3
 8001a56:	f000 fd7b 	bl	8002550 <HAL_Delay>
						  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CREG], strlen((const char *)at_command[AT_CREG]), 100);
 8001a5a:	193b      	adds	r3, r7, r4
 8001a5c:	3396      	adds	r3, #150	; 0x96
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7fe fb52 	bl	8000108 <strlen>
 8001a64:	0003      	movs	r3, r0
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	193b      	adds	r3, r7, r4
 8001a6a:	3396      	adds	r3, #150	; 0x96
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	48b7      	ldr	r0, [pc, #732]	; (8001d4c <main+0x1aa8>)
 8001a70:	2364      	movs	r3, #100	; 0x64
 8001a72:	f001 ff29 	bl	80038c8 <HAL_UART_Transmit>
						  HAL_Delay(500);
 8001a76:	23fa      	movs	r3, #250	; 0xfa
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f000 fd68 	bl	8002550 <HAL_Delay>
						  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CSQ], strlen((const char *)at_command[AT_CSQ]), 100);
 8001a80:	193b      	adds	r3, r7, r4
 8001a82:	33c8      	adds	r3, #200	; 0xc8
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7fe fb3f 	bl	8000108 <strlen>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	193b      	adds	r3, r7, r4
 8001a90:	33c8      	adds	r3, #200	; 0xc8
 8001a92:	0019      	movs	r1, r3
 8001a94:	48ad      	ldr	r0, [pc, #692]	; (8001d4c <main+0x1aa8>)
 8001a96:	2364      	movs	r3, #100	; 0x64
 8001a98:	f001 ff16 	bl	80038c8 <HAL_UART_Transmit>
						  HAL_Delay(500);
 8001a9c:	23fa      	movs	r3, #250	; 0xfa
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 fd55 	bl	8002550 <HAL_Delay>
						  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CSTT], strlen((const char *)at_command[AT_CSTT]), 100);
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	33fa      	adds	r3, #250	; 0xfa
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7fe fb2c 	bl	8000108 <strlen>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	193b      	adds	r3, r7, r4
 8001ab6:	33fa      	adds	r3, #250	; 0xfa
 8001ab8:	0019      	movs	r1, r3
 8001aba:	48a4      	ldr	r0, [pc, #656]	; (8001d4c <main+0x1aa8>)
 8001abc:	2364      	movs	r3, #100	; 0x64
 8001abe:	f001 ff03 	bl	80038c8 <HAL_UART_Transmit>
						  HAL_Delay(500);
 8001ac2:	23fa      	movs	r3, #250	; 0xfa
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 fd42 	bl	8002550 <HAL_Delay>
						  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIICR], strlen((const char *)at_command[AT_CIICR]), 100);
 8001acc:	193b      	adds	r3, r7, r4
 8001ace:	332d      	adds	r3, #45	; 0x2d
 8001ad0:	33ff      	adds	r3, #255	; 0xff
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f7fe fb18 	bl	8000108 <strlen>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	193b      	adds	r3, r7, r4
 8001ade:	332d      	adds	r3, #45	; 0x2d
 8001ae0:	33ff      	adds	r3, #255	; 0xff
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	4899      	ldr	r0, [pc, #612]	; (8001d4c <main+0x1aa8>)
 8001ae6:	2364      	movs	r3, #100	; 0x64
 8001ae8:	f001 feee 	bl	80038c8 <HAL_UART_Transmit>
						  HAL_Delay(5000);
 8001aec:	4b98      	ldr	r3, [pc, #608]	; (8001d50 <main+0x1aac>)
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 fd2e 	bl	8002550 <HAL_Delay>
						  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIFSR], strlen((const char *)at_command[AT_CIFSR]), 100);
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	335f      	adds	r3, #95	; 0x5f
 8001af8:	33ff      	adds	r3, #255	; 0xff
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7fe fb04 	bl	8000108 <strlen>
 8001b00:	0003      	movs	r3, r0
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	193b      	adds	r3, r7, r4
 8001b06:	335f      	adds	r3, #95	; 0x5f
 8001b08:	33ff      	adds	r3, #255	; 0xff
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	488f      	ldr	r0, [pc, #572]	; (8001d4c <main+0x1aa8>)
 8001b0e:	2364      	movs	r3, #100	; 0x64
 8001b10:	f001 feda 	bl	80038c8 <HAL_UART_Transmit>
						  HAL_Delay(5000);
 8001b14:	4b8e      	ldr	r3, [pc, #568]	; (8001d50 <main+0x1aac>)
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 fd1a 	bl	8002550 <HAL_Delay>
					  }
	  			  	  HAL_GPIO_TogglePin(LED_PC13_GPIO_Port, LED_PC13_Pin);
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	019b      	lsls	r3, r3, #6
 8001b20:	4a8c      	ldr	r2, [pc, #560]	; (8001d54 <main+0x1ab0>)
 8001b22:	0019      	movs	r1, r3
 8001b24:	0010      	movs	r0, r2
 8001b26:	f001 f926 	bl	8002d76 <HAL_GPIO_TogglePin>
	  			  	  HAL_Delay(500);
 8001b2a:	23fa      	movs	r3, #250	; 0xfa
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f000 fd0e 	bl	8002550 <HAL_Delay>
				  while (ctrl_creg_loop == false)
 8001b34:	4a88      	ldr	r2, [pc, #544]	; (8001d58 <main+0x1ab4>)
 8001b36:	18bb      	adds	r3, r7, r2
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d100      	bne.n	8001b40 <main+0x189c>
 8001b3e:	e687      	b.n	8001850 <main+0x15ac>
				  }
				  ctrl_creg_loop = false;
 8001b40:	18bb      	adds	r3, r7, r2
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, (unsigned char *)error_msg_ID, strlen((const char *)error_msg_ID), 100);
				  HAL_UART_Transmit(&huart2, (unsigned char *)send_msg, strlen((const char *)send_msg), 100);
				  HAL_Delay(5000);

				  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPCLOSE], strlen((const char *)at_command[AT_CIPCLOSE]), 100);*/
				  HAL_GPIO_WritePin(ERROR_1_GPIO_Port, ERROR_1_Pin, GPIO_PIN_RESET); // SIGNIFICA QUE O SIMBOLO DE ID DEVERIA TER SIDO ENVIADO
 8001b46:	4b7e      	ldr	r3, [pc, #504]	; (8001d40 <main+0x1a9c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f001 f8f5 	bl	8002d3c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(ERROR_2_GPIO_Port, ERROR_2_Pin, GPIO_PIN_SET); // SIGNIFICA QUE O SIMBOLO DE ID DEVERIA TER SIDO ENVIADO
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	487a      	ldr	r0, [pc, #488]	; (8001d40 <main+0x1a9c>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	f001 f8ee 	bl	8002d3c <HAL_GPIO_WritePin>
				  HAL_Delay(5000);
 8001b60:	4b7b      	ldr	r3, [pc, #492]	; (8001d50 <main+0x1aac>)
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 fcf4 	bl	8002550 <HAL_Delay>
 8001b68:	e000      	b.n	8001b6c <main+0x18c8>
				  if ((data_filter_uart1[6] == 0x2C) && (data_filter_uart1[17] == 0x2C) && ((data_filter_uart1[18] == 0x4E) || (data_filter_uart1[18] == 0x53))
 8001b6a:	46c0      	nop			; (mov r8, r8)
			  }
		  }
		  ctrl_uart1 = false;
 8001b6c:	4b7b      	ldr	r3, [pc, #492]	; (8001d5c <main+0x1ab8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]

		  //RESETAR O SIM800L A CADA 15 CICLOS PARA EVITAR QUE FIQUE PRESO EM ERROS
		  cont_loop1++;
 8001b72:	497b      	ldr	r1, [pc, #492]	; (8001d60 <main+0x1abc>)
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	3201      	adds	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
		  if (cont_loop1 == 15)
 8001b7e:	187b      	adds	r3, r7, r1
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	d001      	beq.n	8001b8a <main+0x18e6>
 8001b86:	f7ff fa54 	bl	8001032 <main+0xd8e>
		  {
			  for(uint8_t i = 0; i<100; i++)
 8001b8a:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <main+0x1ac0>)
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	e014      	b.n	8001bbe <main+0x191a>
			  {
				  HAL_GPIO_TogglePin(ERROR_1_GPIO_Port, ERROR_1_Pin);
 8001b94:	4b6a      	ldr	r3, [pc, #424]	; (8001d40 <main+0x1a9c>)
 8001b96:	2120      	movs	r1, #32
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f001 f8ec 	bl	8002d76 <HAL_GPIO_TogglePin>
				  HAL_GPIO_TogglePin(ERROR_2_GPIO_Port, ERROR_2_Pin);
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4a67      	ldr	r2, [pc, #412]	; (8001d40 <main+0x1a9c>)
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	f001 f8e5 	bl	8002d76 <HAL_GPIO_TogglePin>
				  HAL_Delay(100);
 8001bac:	2064      	movs	r0, #100	; 0x64
 8001bae:	f000 fccf 	bl	8002550 <HAL_Delay>
			  for(uint8_t i = 0; i<100; i++)
 8001bb2:	496c      	ldr	r1, [pc, #432]	; (8001d64 <main+0x1ac0>)
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	3201      	adds	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <main+0x1ac0>)
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b63      	cmp	r3, #99	; 0x63
 8001bc6:	d9e5      	bls.n	8001b94 <main+0x18f0>
			  }
			  HAL_GPIO_WritePin(ERROR_1_GPIO_Port, ERROR_1_Pin, GPIO_PIN_RESET);
 8001bc8:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <main+0x1a9c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2120      	movs	r1, #32
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f001 f8b4 	bl	8002d3c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ERROR_2_GPIO_Port, ERROR_2_Pin, GPIO_PIN_RESET);
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4859      	ldr	r0, [pc, #356]	; (8001d40 <main+0x1a9c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	0019      	movs	r1, r3
 8001bde:	f001 f8ad 	bl	8002d3c <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(ERROR_1_GPIO_Port, ERROR_1_Pin, GPIO_PIN_RESET); // SIGNIFICA QUE O SIMBOLO DE ID DEVERIA TER SIDO ENVIADO
 8001be2:	4b57      	ldr	r3, [pc, #348]	; (8001d40 <main+0x1a9c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	2120      	movs	r1, #32
 8001be8:	0018      	movs	r0, r3
 8001bea:	f001 f8a7 	bl	8002d3c <HAL_GPIO_WritePin>
			  	HAL_GPIO_WritePin(ERROR_2_GPIO_Port, ERROR_2_Pin, GPIO_PIN_SET); // SIGNIFICA QUE O SIMBOLO DE ID DEVERIA TER SIDO ENVIADO
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4853      	ldr	r0, [pc, #332]	; (8001d40 <main+0x1a9c>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	f001 f8a0 	bl	8002d3c <HAL_GPIO_WritePin>

			  	HAL_GPIO_WritePin(RESET_SIM800l_GPIO_Port, RESET_SIM800l_Pin, GPIO_PIN_RESET);
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	0219      	lsls	r1, r3, #8
 8001c00:	2390      	movs	r3, #144	; 0x90
 8001c02:	05db      	lsls	r3, r3, #23
 8001c04:	2200      	movs	r2, #0
 8001c06:	0018      	movs	r0, r3
 8001c08:	f001 f898 	bl	8002d3c <HAL_GPIO_WritePin>
			    HAL_Delay(1000);
 8001c0c:	23fa      	movs	r3, #250	; 0xfa
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 fc9d 	bl	8002550 <HAL_Delay>
			    HAL_GPIO_WritePin(RESET_SIM800l_GPIO_Port, RESET_SIM800l_Pin, GPIO_PIN_SET);
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	0219      	lsls	r1, r3, #8
 8001c1a:	2390      	movs	r3, #144	; 0x90
 8001c1c:	05db      	lsls	r3, r3, #23
 8001c1e:	2201      	movs	r2, #1
 8001c20:	0018      	movs	r0, r3
 8001c22:	f001 f88b 	bl	8002d3c <HAL_GPIO_WritePin>
			    HAL_Delay(30000);
 8001c26:	4b48      	ldr	r3, [pc, #288]	; (8001d48 <main+0x1aa4>)
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f000 fc91 	bl	8002550 <HAL_Delay>

			    //INICIO VERIFICAÇÃO DE CONECTIVIDADE GPRS
			    while (ctrl_creg_loop == false)
 8001c2e:	e0b8      	b.n	8001da2 <main+0x1afe>
			    {
			  	  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CREG], strlen((const char *)at_command[AT_CREG]), 100);
 8001c30:	2464      	movs	r4, #100	; 0x64
 8001c32:	193b      	adds	r3, r7, r4
 8001c34:	3396      	adds	r3, #150	; 0x96
 8001c36:	0018      	movs	r0, r3
 8001c38:	f7fe fa66 	bl	8000108 <strlen>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	193b      	adds	r3, r7, r4
 8001c42:	3396      	adds	r3, #150	; 0x96
 8001c44:	0019      	movs	r1, r3
 8001c46:	4841      	ldr	r0, [pc, #260]	; (8001d4c <main+0x1aa8>)
 8001c48:	2364      	movs	r3, #100	; 0x64
 8001c4a:	f001 fe3d 	bl	80038c8 <HAL_UART_Transmit>
			  	  HAL_Delay(500);
 8001c4e:	23fa      	movs	r3, #250	; 0xfa
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 fc7c 	bl	8002550 <HAL_Delay>
			  	  if (ctrl_uart2 == true)
 8001c58:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <main+0x1ac4>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d158      	bne.n	8001d12 <main+0x1a6e>
			  	  {
			  		  for (uint8_t a = 0; a<=60; a++)
 8001c60:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <main+0x1ac8>)
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	e04e      	b.n	8001d08 <main+0x1a64>
			  		  {
			  			  if ((data_in_uart2[a] == 0x2B) && (data_in_uart2[a+1] == 0x43) && (data_in_uart2[a+2] == 0x52) && (data_in_uart2[a+3] == 0x45)
 8001c6a:	4940      	ldr	r1, [pc, #256]	; (8001d6c <main+0x1ac8>)
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4a3f      	ldr	r2, [pc, #252]	; (8001d70 <main+0x1acc>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	2b2b      	cmp	r3, #43	; 0x2b
 8001c76:	d141      	bne.n	8001cfc <main+0x1a58>
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	4a3c      	ldr	r2, [pc, #240]	; (8001d70 <main+0x1acc>)
 8001c80:	5cd3      	ldrb	r3, [r2, r3]
 8001c82:	2b43      	cmp	r3, #67	; 0x43
 8001c84:	d13a      	bne.n	8001cfc <main+0x1a58>
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	4a38      	ldr	r2, [pc, #224]	; (8001d70 <main+0x1acc>)
 8001c8e:	5cd3      	ldrb	r3, [r2, r3]
 8001c90:	2b52      	cmp	r3, #82	; 0x52
 8001c92:	d133      	bne.n	8001cfc <main+0x1a58>
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3303      	adds	r3, #3
 8001c9a:	4a35      	ldr	r2, [pc, #212]	; (8001d70 <main+0x1acc>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	2b45      	cmp	r3, #69	; 0x45
 8001ca0:	d12c      	bne.n	8001cfc <main+0x1a58>
			  					  && (data_in_uart2[a+4] == 0x47) && (data_in_uart2[a+5] == 0x3A))//filtrar dados +CREG:
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	4a31      	ldr	r2, [pc, #196]	; (8001d70 <main+0x1acc>)
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
 8001cac:	2b47      	cmp	r3, #71	; 0x47
 8001cae:	d125      	bne.n	8001cfc <main+0x1a58>
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	3305      	adds	r3, #5
 8001cb6:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <main+0x1acc>)
 8001cb8:	5cd3      	ldrb	r3, [r2, r3]
 8001cba:	2b3a      	cmp	r3, #58	; 0x3a
 8001cbc:	d11e      	bne.n	8001cfc <main+0x1a58>
			    			  {
			  				  for(uint8_t b = 0; b<=10; b++)
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <main+0x1ad0>)
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e013      	b.n	8001cf0 <main+0x1a4c>
			  				  {
			  					  data_filter_uart2[b] = data_in_uart2[a+b];
 8001cc8:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <main+0x1ac8>)
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	4829      	ldr	r0, [pc, #164]	; (8001d74 <main+0x1ad0>)
 8001cd0:	183b      	adds	r3, r7, r0
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	18d2      	adds	r2, r2, r3
 8001cd6:	183b      	adds	r3, r7, r0
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	4925      	ldr	r1, [pc, #148]	; (8001d70 <main+0x1acc>)
 8001cdc:	5c89      	ldrb	r1, [r1, r2]
 8001cde:	22a6      	movs	r2, #166	; 0xa6
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	18ba      	adds	r2, r7, r2
 8001ce4:	54d1      	strb	r1, [r2, r3]
			  				  for(uint8_t b = 0; b<=10; b++)
 8001ce6:	183b      	adds	r3, r7, r0
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	183b      	adds	r3, r7, r0
 8001cec:	3201      	adds	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <main+0x1ad0>)
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b0a      	cmp	r3, #10
 8001cf8:	d9e6      	bls.n	8001cc8 <main+0x1a24>
			  				  }
			  				  break;
 8001cfa:	e00a      	b.n	8001d12 <main+0x1a6e>
			  		  for (uint8_t a = 0; a<=60; a++)
 8001cfc:	491b      	ldr	r1, [pc, #108]	; (8001d6c <main+0x1ac8>)
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	3201      	adds	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <main+0x1ac8>)
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b3c      	cmp	r3, #60	; 0x3c
 8001d10:	d9ab      	bls.n	8001c6a <main+0x19c6>
			    			  }
			  		  }
			  	  }
			  	  if ((data_filter_uart2[9] == 0x31) || (data_filter_uart2[9] == 0x35))
 8001d12:	22a6      	movs	r2, #166	; 0xa6
 8001d14:	0092      	lsls	r2, r2, #2
 8001d16:	18bb      	adds	r3, r7, r2
 8001d18:	7a5b      	ldrb	r3, [r3, #9]
 8001d1a:	2b31      	cmp	r3, #49	; 0x31
 8001d1c:	d003      	beq.n	8001d26 <main+0x1a82>
 8001d1e:	18bb      	adds	r3, r7, r2
 8001d20:	7a5b      	ldrb	r3, [r3, #9]
 8001d22:	2b35      	cmp	r3, #53	; 0x35
 8001d24:	d128      	bne.n	8001d78 <main+0x1ad4>
			  	  {
			  		  HAL_UART_Transmit(&huart1, (unsigned char *)data_filter_uart2, 10, 100);
 8001d26:	23a6      	movs	r3, #166	; 0xa6
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	18f9      	adds	r1, r7, r3
 8001d2c:	4805      	ldr	r0, [pc, #20]	; (8001d44 <main+0x1aa0>)
 8001d2e:	2364      	movs	r3, #100	; 0x64
 8001d30:	220a      	movs	r2, #10
 8001d32:	f001 fdc9 	bl	80038c8 <HAL_UART_Transmit>
			  		  ctrl_creg_loop = true;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <main+0x1ab4>)
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
 8001d3e:	e030      	b.n	8001da2 <main+0x1afe>
 8001d40:	48000400 	.word	0x48000400
 8001d44:	20000028 	.word	0x20000028
 8001d48:	00007530 	.word	0x00007530
 8001d4c:	200000ac 	.word	0x200000ac
 8001d50:	00001388 	.word	0x00001388
 8001d54:	48000800 	.word	0x48000800
 8001d58:	0000036f 	.word	0x0000036f
 8001d5c:	20000345 	.word	0x20000345
 8001d60:	0000036e 	.word	0x0000036e
 8001d64:	00000363 	.word	0x00000363
 8001d68:	20000346 	.word	0x20000346
 8001d6c:	00000362 	.word	0x00000362
 8001d70:	20000308 	.word	0x20000308
 8001d74:	00000361 	.word	0x00000361
			  	  }
			  	  else
			  	  {
			  		  HAL_GPIO_WritePin(ERROR_1_GPIO_Port, ERROR_1_Pin, GPIO_PIN_SET); // SIGNIFICA QUE HA PROBLEMA DE CONECTIVIDADE GPRS
 8001d78:	4b5d      	ldr	r3, [pc, #372]	; (8001ef0 <main+0x1c4c>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f000 ffdc 	bl	8002d3c <HAL_GPIO_WritePin>
			  		  HAL_GPIO_WritePin(ERROR_2_GPIO_Port, ERROR_2_Pin, GPIO_PIN_SET); // SIGNIFICA QUE HA PROBLEMA DE CONECTIVIDADE GPRS
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4859      	ldr	r0, [pc, #356]	; (8001ef0 <main+0x1c4c>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	f000 ffd5 	bl	8002d3c <HAL_GPIO_WritePin>
			  		  HAL_UART_Transmit(&huart1, (unsigned char *)error_msg_NC, 10, 100);
 8001d92:	23a4      	movs	r3, #164	; 0xa4
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	18f9      	adds	r1, r7, r3
 8001d98:	4856      	ldr	r0, [pc, #344]	; (8001ef4 <main+0x1c50>)
 8001d9a:	2364      	movs	r3, #100	; 0x64
 8001d9c:	220a      	movs	r2, #10
 8001d9e:	f001 fd93 	bl	80038c8 <HAL_UART_Transmit>
			    while (ctrl_creg_loop == false)
 8001da2:	4a55      	ldr	r2, [pc, #340]	; (8001ef8 <main+0x1c54>)
 8001da4:	18bb      	adds	r3, r7, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d100      	bne.n	8001dae <main+0x1b0a>
 8001dac:	e740      	b.n	8001c30 <main+0x198c>
			  	  }
			    }
			    ctrl_creg_loop = false;
 8001dae:	18bb      	adds	r3, r7, r2
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
			    //FIM VERIFICAÇÃO DE CONECTIVIDADE GPRS

			    HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT], strlen((const char *)at_command[AT]), 100);
 8001db4:	2464      	movs	r4, #100	; 0x64
 8001db6:	193b      	adds	r3, r7, r4
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7fe f9a5 	bl	8000108 <strlen>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	1939      	adds	r1, r7, r4
 8001dc4:	484d      	ldr	r0, [pc, #308]	; (8001efc <main+0x1c58>)
 8001dc6:	2364      	movs	r3, #100	; 0x64
 8001dc8:	f001 fd7e 	bl	80038c8 <HAL_UART_Transmit>
			    HAL_Delay(500);
 8001dcc:	23fa      	movs	r3, #250	; 0xfa
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 fbbd 	bl	8002550 <HAL_Delay>
			    HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CFUN], strlen((const char *)at_command[AT_CFUN]), 100);
 8001dd6:	193b      	adds	r3, r7, r4
 8001dd8:	3332      	adds	r3, #50	; 0x32
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7fe f994 	bl	8000108 <strlen>
 8001de0:	0003      	movs	r3, r0
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	193b      	adds	r3, r7, r4
 8001de6:	3332      	adds	r3, #50	; 0x32
 8001de8:	0019      	movs	r1, r3
 8001dea:	4844      	ldr	r0, [pc, #272]	; (8001efc <main+0x1c58>)
 8001dec:	2364      	movs	r3, #100	; 0x64
 8001dee:	f001 fd6b 	bl	80038c8 <HAL_UART_Transmit>
			    HAL_Delay(500);
 8001df2:	23fa      	movs	r3, #250	; 0xfa
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 fbaa 	bl	8002550 <HAL_Delay>
			    HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CPIN], strlen((const char *)at_command[AT_CPIN]), 100);
 8001dfc:	193b      	adds	r3, r7, r4
 8001dfe:	3364      	adds	r3, #100	; 0x64
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7fe f981 	bl	8000108 <strlen>
 8001e06:	0003      	movs	r3, r0
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	193b      	adds	r3, r7, r4
 8001e0c:	3364      	adds	r3, #100	; 0x64
 8001e0e:	0019      	movs	r1, r3
 8001e10:	483a      	ldr	r0, [pc, #232]	; (8001efc <main+0x1c58>)
 8001e12:	2364      	movs	r3, #100	; 0x64
 8001e14:	f001 fd58 	bl	80038c8 <HAL_UART_Transmit>
			    HAL_Delay(500);
 8001e18:	23fa      	movs	r3, #250	; 0xfa
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 fb97 	bl	8002550 <HAL_Delay>
			    HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CREG], strlen((const char *)at_command[AT_CREG]), 100);
 8001e22:	193b      	adds	r3, r7, r4
 8001e24:	3396      	adds	r3, #150	; 0x96
 8001e26:	0018      	movs	r0, r3
 8001e28:	f7fe f96e 	bl	8000108 <strlen>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	193b      	adds	r3, r7, r4
 8001e32:	3396      	adds	r3, #150	; 0x96
 8001e34:	0019      	movs	r1, r3
 8001e36:	4831      	ldr	r0, [pc, #196]	; (8001efc <main+0x1c58>)
 8001e38:	2364      	movs	r3, #100	; 0x64
 8001e3a:	f001 fd45 	bl	80038c8 <HAL_UART_Transmit>
			    HAL_Delay(500);
 8001e3e:	23fa      	movs	r3, #250	; 0xfa
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	0018      	movs	r0, r3
 8001e44:	f000 fb84 	bl	8002550 <HAL_Delay>
			    HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CSQ], strlen((const char *)at_command[AT_CSQ]), 100);
 8001e48:	193b      	adds	r3, r7, r4
 8001e4a:	33c8      	adds	r3, #200	; 0xc8
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7fe f95b 	bl	8000108 <strlen>
 8001e52:	0003      	movs	r3, r0
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	193b      	adds	r3, r7, r4
 8001e58:	33c8      	adds	r3, #200	; 0xc8
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	4827      	ldr	r0, [pc, #156]	; (8001efc <main+0x1c58>)
 8001e5e:	2364      	movs	r3, #100	; 0x64
 8001e60:	f001 fd32 	bl	80038c8 <HAL_UART_Transmit>
			    HAL_Delay(500);
 8001e64:	23fa      	movs	r3, #250	; 0xfa
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f000 fb71 	bl	8002550 <HAL_Delay>
			    HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CSTT], strlen((const char *)at_command[AT_CSTT]), 100);
 8001e6e:	193b      	adds	r3, r7, r4
 8001e70:	33fa      	adds	r3, #250	; 0xfa
 8001e72:	0018      	movs	r0, r3
 8001e74:	f7fe f948 	bl	8000108 <strlen>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	193b      	adds	r3, r7, r4
 8001e7e:	33fa      	adds	r3, #250	; 0xfa
 8001e80:	0019      	movs	r1, r3
 8001e82:	481e      	ldr	r0, [pc, #120]	; (8001efc <main+0x1c58>)
 8001e84:	2364      	movs	r3, #100	; 0x64
 8001e86:	f001 fd1f 	bl	80038c8 <HAL_UART_Transmit>
			    HAL_Delay(500);
 8001e8a:	23fa      	movs	r3, #250	; 0xfa
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f000 fb5e 	bl	8002550 <HAL_Delay>
			    HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIICR], strlen((const char *)at_command[AT_CIICR]), 100);
 8001e94:	193b      	adds	r3, r7, r4
 8001e96:	332d      	adds	r3, #45	; 0x2d
 8001e98:	33ff      	adds	r3, #255	; 0xff
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7fe f934 	bl	8000108 <strlen>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	193b      	adds	r3, r7, r4
 8001ea6:	332d      	adds	r3, #45	; 0x2d
 8001ea8:	33ff      	adds	r3, #255	; 0xff
 8001eaa:	0019      	movs	r1, r3
 8001eac:	4813      	ldr	r0, [pc, #76]	; (8001efc <main+0x1c58>)
 8001eae:	2364      	movs	r3, #100	; 0x64
 8001eb0:	f001 fd0a 	bl	80038c8 <HAL_UART_Transmit>
			    HAL_Delay(5000);
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <main+0x1c5c>)
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 fb4a 	bl	8002550 <HAL_Delay>
			    HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIFSR], strlen((const char *)at_command[AT_CIFSR]), 100);
 8001ebc:	193b      	adds	r3, r7, r4
 8001ebe:	335f      	adds	r3, #95	; 0x5f
 8001ec0:	33ff      	adds	r3, #255	; 0xff
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7fe f920 	bl	8000108 <strlen>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	193b      	adds	r3, r7, r4
 8001ece:	335f      	adds	r3, #95	; 0x5f
 8001ed0:	33ff      	adds	r3, #255	; 0xff
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	4809      	ldr	r0, [pc, #36]	; (8001efc <main+0x1c58>)
 8001ed6:	2364      	movs	r3, #100	; 0x64
 8001ed8:	f001 fcf6 	bl	80038c8 <HAL_UART_Transmit>
			    HAL_Delay(5000);
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <main+0x1c5c>)
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f000 fb36 	bl	8002550 <HAL_Delay>

			  cont_loop1 = 0;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <main+0x1c60>)
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
	  if (ctrl_uart1 == true)
 8001eec:	f7ff f8a1 	bl	8001032 <main+0xd8e>
 8001ef0:	48000400 	.word	0x48000400
 8001ef4:	20000028 	.word	0x20000028
 8001ef8:	0000036f 	.word	0x0000036f
 8001efc:	200000ac 	.word	0x200000ac
 8001f00:	00001388 	.word	0x00001388
 8001f04:	0000036e 	.word	0x0000036e

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b095      	sub	sp, #84	; 0x54
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	2420      	movs	r4, #32
 8001f10:	193b      	adds	r3, r7, r4
 8001f12:	0018      	movs	r0, r3
 8001f14:	2330      	movs	r3, #48	; 0x30
 8001f16:	001a      	movs	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	f002 fe87 	bl	8004c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1e:	2310      	movs	r3, #16
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	0018      	movs	r0, r3
 8001f24:	2310      	movs	r3, #16
 8001f26:	001a      	movs	r2, r3
 8001f28:	2100      	movs	r1, #0
 8001f2a:	f002 fe7f 	bl	8004c2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f2e:	003b      	movs	r3, r7
 8001f30:	0018      	movs	r0, r3
 8001f32:	2310      	movs	r3, #16
 8001f34:	001a      	movs	r2, r3
 8001f36:	2100      	movs	r1, #0
 8001f38:	f002 fe78 	bl	8004c2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f3c:	0021      	movs	r1, r4
 8001f3e:	187b      	adds	r3, r7, r1
 8001f40:	2202      	movs	r2, #2
 8001f42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	2201      	movs	r2, #1
 8001f48:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	2200      	movs	r2, #0
 8001f54:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f56:	187b      	adds	r3, r7, r1
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f000 ff27 	bl	8002dac <HAL_RCC_OscConfig>
 8001f5e:	1e03      	subs	r3, r0, #0
 8001f60:	d001      	beq.n	8001f66 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001f62:	f000 f939 	bl	80021d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f66:	2110      	movs	r1, #16
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f7a:	187b      	adds	r3, r7, r1
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	2100      	movs	r1, #0
 8001f84:	0018      	movs	r0, r3
 8001f86:	f001 fa2b 	bl	80033e0 <HAL_RCC_ClockConfig>
 8001f8a:	1e03      	subs	r3, r0, #0
 8001f8c:	d001      	beq.n	8001f92 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001f8e:	f000 f923 	bl	80021d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f92:	003b      	movs	r3, r7
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001f98:	003b      	movs	r3, r7
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f9e:	003b      	movs	r3, r7
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f001 fb6f 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d001      	beq.n	8001fae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001faa:	f000 f915 	bl	80021d8 <Error_Handler>
  }
}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b015      	add	sp, #84	; 0x54
 8001fb4:	bd90      	pop	{r4, r7, pc}
	...

08001fb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fbe:	4a15      	ldr	r2, [pc, #84]	; (8002014 <MX_USART1_UART_Init+0x5c>)
 8001fc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fc4:	2296      	movs	r2, #150	; 0x96
 8001fc6:	0192      	lsls	r2, r2, #6
 8001fc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fde:	220c      	movs	r2, #12
 8001fe0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f001 fc0f 	bl	8003820 <HAL_UART_Init>
 8002002:	1e03      	subs	r3, r0, #0
 8002004:	d001      	beq.n	800200a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002006:	f000 f8e7 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000028 	.word	0x20000028
 8002014:	40013800 	.word	0x40013800

08002018 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <MX_USART2_UART_Init+0x58>)
 800201e:	4a15      	ldr	r2, [pc, #84]	; (8002074 <MX_USART2_UART_Init+0x5c>)
 8002020:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <MX_USART2_UART_Init+0x58>)
 8002024:	2296      	movs	r2, #150	; 0x96
 8002026:	0192      	lsls	r2, r2, #6
 8002028:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <MX_USART2_UART_Init+0x58>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <MX_USART2_UART_Init+0x58>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <MX_USART2_UART_Init+0x58>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <MX_USART2_UART_Init+0x58>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <MX_USART2_UART_Init+0x58>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <MX_USART2_UART_Init+0x58>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <MX_USART2_UART_Init+0x58>)
 8002050:	2200      	movs	r2, #0
 8002052:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <MX_USART2_UART_Init+0x58>)
 8002056:	2200      	movs	r2, #0
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <MX_USART2_UART_Init+0x58>)
 800205c:	0018      	movs	r0, r3
 800205e:	f001 fbdf 	bl	8003820 <HAL_UART_Init>
 8002062:	1e03      	subs	r3, r0, #0
 8002064:	d001      	beq.n	800206a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002066:	f000 f8b7 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200000ac 	.word	0x200000ac
 8002074:	40004400 	.word	0x40004400

08002078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <MX_DMA_Init+0x38>)
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <MX_DMA_Init+0x38>)
 8002084:	2101      	movs	r1, #1
 8002086:	430a      	orrs	r2, r1
 8002088:	615a      	str	r2, [r3, #20]
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <MX_DMA_Init+0x38>)
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2201      	movs	r2, #1
 8002090:	4013      	ands	r3, r2
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	200a      	movs	r0, #10
 800209c:	f000 fb28 	bl	80026f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80020a0:	200a      	movs	r0, #10
 80020a2:	f000 fb3a 	bl	800271a <HAL_NVIC_EnableIRQ>

}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000

080020b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ba:	240c      	movs	r4, #12
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	0018      	movs	r0, r3
 80020c0:	2314      	movs	r3, #20
 80020c2:	001a      	movs	r2, r3
 80020c4:	2100      	movs	r1, #0
 80020c6:	f002 fdb1 	bl	8004c2c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	4b40      	ldr	r3, [pc, #256]	; (80021cc <MX_GPIO_Init+0x118>)
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <MX_GPIO_Init+0x118>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0309      	lsls	r1, r1, #12
 80020d4:	430a      	orrs	r2, r1
 80020d6:	615a      	str	r2, [r3, #20]
 80020d8:	4b3c      	ldr	r3, [pc, #240]	; (80021cc <MX_GPIO_Init+0x118>)
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	031b      	lsls	r3, r3, #12
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	4b39      	ldr	r3, [pc, #228]	; (80021cc <MX_GPIO_Init+0x118>)
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <MX_GPIO_Init+0x118>)
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	0289      	lsls	r1, r1, #10
 80020f0:	430a      	orrs	r2, r1
 80020f2:	615a      	str	r2, [r3, #20]
 80020f4:	4b35      	ldr	r3, [pc, #212]	; (80021cc <MX_GPIO_Init+0x118>)
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	029b      	lsls	r3, r3, #10
 80020fc:	4013      	ands	r3, r2
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	4b32      	ldr	r3, [pc, #200]	; (80021cc <MX_GPIO_Init+0x118>)
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	4b31      	ldr	r3, [pc, #196]	; (80021cc <MX_GPIO_Init+0x118>)
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	02c9      	lsls	r1, r1, #11
 800210c:	430a      	orrs	r2, r1
 800210e:	615a      	str	r2, [r3, #20]
 8002110:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <MX_GPIO_Init+0x118>)
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	02db      	lsls	r3, r3, #11
 8002118:	4013      	ands	r3, r2
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_SET);
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	019b      	lsls	r3, r3, #6
 8002122:	482b      	ldr	r0, [pc, #172]	; (80021d0 <MX_GPIO_Init+0x11c>)
 8002124:	2201      	movs	r2, #1
 8002126:	0019      	movs	r1, r3
 8002128:	f000 fe08 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_SIM800l_GPIO_Port, RESET_SIM800l_Pin, GPIO_PIN_RESET);
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	0219      	lsls	r1, r3, #8
 8002130:	2390      	movs	r3, #144	; 0x90
 8002132:	05db      	lsls	r3, r3, #23
 8002134:	2200      	movs	r2, #0
 8002136:	0018      	movs	r0, r3
 8002138:	f000 fe00 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERROR_1_Pin|ERROR_2_Pin, GPIO_PIN_RESET);
 800213c:	2390      	movs	r3, #144	; 0x90
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4824      	ldr	r0, [pc, #144]	; (80021d4 <MX_GPIO_Init+0x120>)
 8002142:	2200      	movs	r2, #0
 8002144:	0019      	movs	r1, r3
 8002146:	f000 fdf9 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PC13_Pin */
  GPIO_InitStruct.Pin = LED_PC13_Pin;
 800214a:	193b      	adds	r3, r7, r4
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	0192      	lsls	r2, r2, #6
 8002150:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	193b      	adds	r3, r7, r4
 8002154:	2201      	movs	r2, #1
 8002156:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	193b      	adds	r3, r7, r4
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	193b      	adds	r3, r7, r4
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 8002164:	193b      	adds	r3, r7, r4
 8002166:	4a1a      	ldr	r2, [pc, #104]	; (80021d0 <MX_GPIO_Init+0x11c>)
 8002168:	0019      	movs	r1, r3
 800216a:	0010      	movs	r0, r2
 800216c:	f000 fc76 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_SIM800l_Pin */
  GPIO_InitStruct.Pin = RESET_SIM800l_Pin;
 8002170:	0021      	movs	r1, r4
 8002172:	187b      	adds	r3, r7, r1
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	0212      	lsls	r2, r2, #8
 8002178:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217a:	000c      	movs	r4, r1
 800217c:	193b      	adds	r3, r7, r4
 800217e:	2201      	movs	r2, #1
 8002180:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	193b      	adds	r3, r7, r4
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	193b      	adds	r3, r7, r4
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RESET_SIM800l_GPIO_Port, &GPIO_InitStruct);
 800218e:	193a      	adds	r2, r7, r4
 8002190:	2390      	movs	r3, #144	; 0x90
 8002192:	05db      	lsls	r3, r3, #23
 8002194:	0011      	movs	r1, r2
 8002196:	0018      	movs	r0, r3
 8002198:	f000 fc60 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ERROR_1_Pin ERROR_2_Pin */
  GPIO_InitStruct.Pin = ERROR_1_Pin|ERROR_2_Pin;
 800219c:	0021      	movs	r1, r4
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	2290      	movs	r2, #144	; 0x90
 80021a2:	0052      	lsls	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	2201      	movs	r2, #1
 80021aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	187b      	adds	r3, r7, r1
 80021b4:	2200      	movs	r2, #0
 80021b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <MX_GPIO_Init+0x120>)
 80021bc:	0019      	movs	r1, r3
 80021be:	0010      	movs	r0, r2
 80021c0:	f000 fc4c 	bl	8002a5c <HAL_GPIO_Init>

}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b009      	add	sp, #36	; 0x24
 80021ca:	bd90      	pop	{r4, r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	48000800 	.word	0x48000800
 80021d4:	48000400 	.word	0x48000400

080021d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
}
 80021de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <Error_Handler+0x8>
	...

080021e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_MspInit+0x44>)
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_MspInit+0x44>)
 80021f0:	2101      	movs	r1, #1
 80021f2:	430a      	orrs	r2, r1
 80021f4:	619a      	str	r2, [r3, #24]
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <HAL_MspInit+0x44>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2201      	movs	r2, #1
 80021fc:	4013      	ands	r3, r2
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_MspInit+0x44>)
 8002204:	69da      	ldr	r2, [r3, #28]
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_MspInit+0x44>)
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	0549      	lsls	r1, r1, #21
 800220c:	430a      	orrs	r2, r1
 800220e:	61da      	str	r2, [r3, #28]
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_MspInit+0x44>)
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	055b      	lsls	r3, r3, #21
 8002218:	4013      	ands	r3, r2
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	b002      	add	sp, #8
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b08d      	sub	sp, #52	; 0x34
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	241c      	movs	r4, #28
 8002236:	193b      	adds	r3, r7, r4
 8002238:	0018      	movs	r0, r3
 800223a:	2314      	movs	r3, #20
 800223c:	001a      	movs	r2, r3
 800223e:	2100      	movs	r1, #0
 8002240:	f002 fcf4 	bl	8004c2c <memset>
  if(huart->Instance==USART1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a54      	ldr	r2, [pc, #336]	; (800239c <HAL_UART_MspInit+0x170>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d162      	bne.n	8002314 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800224e:	4b54      	ldr	r3, [pc, #336]	; (80023a0 <HAL_UART_MspInit+0x174>)
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_UART_MspInit+0x174>)
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	01c9      	lsls	r1, r1, #7
 8002258:	430a      	orrs	r2, r1
 800225a:	619a      	str	r2, [r3, #24]
 800225c:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <HAL_UART_MspInit+0x174>)
 800225e:	699a      	ldr	r2, [r3, #24]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	01db      	lsls	r3, r3, #7
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	4b4d      	ldr	r3, [pc, #308]	; (80023a0 <HAL_UART_MspInit+0x174>)
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <HAL_UART_MspInit+0x174>)
 8002270:	2180      	movs	r1, #128	; 0x80
 8002272:	0289      	lsls	r1, r1, #10
 8002274:	430a      	orrs	r2, r1
 8002276:	615a      	str	r2, [r3, #20]
 8002278:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <HAL_UART_MspInit+0x174>)
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	029b      	lsls	r3, r3, #10
 8002280:	4013      	ands	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002286:	193b      	adds	r3, r7, r4
 8002288:	22c0      	movs	r2, #192	; 0xc0
 800228a:	00d2      	lsls	r2, r2, #3
 800228c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	0021      	movs	r1, r4
 8002290:	187b      	adds	r3, r7, r1
 8002292:	2202      	movs	r2, #2
 8002294:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	187b      	adds	r3, r7, r1
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800229c:	187b      	adds	r3, r7, r1
 800229e:	2203      	movs	r2, #3
 80022a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80022a2:	187b      	adds	r3, r7, r1
 80022a4:	2201      	movs	r2, #1
 80022a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	187a      	adds	r2, r7, r1
 80022aa:	2390      	movs	r3, #144	; 0x90
 80022ac:	05db      	lsls	r3, r3, #23
 80022ae:	0011      	movs	r1, r2
 80022b0:	0018      	movs	r0, r3
 80022b2:	f000 fbd3 	bl	8002a5c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80022b6:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <HAL_UART_MspInit+0x178>)
 80022b8:	4a3b      	ldr	r2, [pc, #236]	; (80023a8 <HAL_UART_MspInit+0x17c>)
 80022ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022bc:	4b39      	ldr	r3, [pc, #228]	; (80023a4 <HAL_UART_MspInit+0x178>)
 80022be:	2200      	movs	r2, #0
 80022c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c2:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <HAL_UART_MspInit+0x178>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022c8:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_UART_MspInit+0x178>)
 80022ca:	2280      	movs	r2, #128	; 0x80
 80022cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ce:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <HAL_UART_MspInit+0x178>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d4:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <HAL_UART_MspInit+0x178>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022da:	4b32      	ldr	r3, [pc, #200]	; (80023a4 <HAL_UART_MspInit+0x178>)
 80022dc:	2220      	movs	r2, #32
 80022de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <HAL_UART_MspInit+0x178>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022e6:	4b2f      	ldr	r3, [pc, #188]	; (80023a4 <HAL_UART_MspInit+0x178>)
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 fa33 	bl	8002754 <HAL_DMA_Init>
 80022ee:	1e03      	subs	r3, r0, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80022f2:	f7ff ff71 	bl	80021d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2a      	ldr	r2, [pc, #168]	; (80023a4 <HAL_UART_MspInit+0x178>)
 80022fa:	671a      	str	r2, [r3, #112]	; 0x70
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_UART_MspInit+0x178>)
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	201b      	movs	r0, #27
 8002308:	f000 f9f2 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800230c:	201b      	movs	r0, #27
 800230e:	f000 fa04 	bl	800271a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002312:	e03f      	b.n	8002394 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_UART_MspInit+0x180>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d13a      	bne.n	8002394 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_UART_MspInit+0x174>)
 8002320:	69da      	ldr	r2, [r3, #28]
 8002322:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <HAL_UART_MspInit+0x174>)
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	0289      	lsls	r1, r1, #10
 8002328:	430a      	orrs	r2, r1
 800232a:	61da      	str	r2, [r3, #28]
 800232c:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_UART_MspInit+0x174>)
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	029b      	lsls	r3, r3, #10
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_UART_MspInit+0x174>)
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <HAL_UART_MspInit+0x174>)
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	0289      	lsls	r1, r1, #10
 8002344:	430a      	orrs	r2, r1
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_UART_MspInit+0x174>)
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	029b      	lsls	r3, r3, #10
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002356:	211c      	movs	r1, #28
 8002358:	187b      	adds	r3, r7, r1
 800235a:	220c      	movs	r2, #12
 800235c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	187b      	adds	r3, r7, r1
 8002360:	2202      	movs	r2, #2
 8002362:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	187b      	adds	r3, r7, r1
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2203      	movs	r2, #3
 800236e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002370:	187b      	adds	r3, r7, r1
 8002372:	2201      	movs	r2, #1
 8002374:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	187a      	adds	r2, r7, r1
 8002378:	2390      	movs	r3, #144	; 0x90
 800237a:	05db      	lsls	r3, r3, #23
 800237c:	0011      	movs	r1, r2
 800237e:	0018      	movs	r0, r3
 8002380:	f000 fb6c 	bl	8002a5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	201c      	movs	r0, #28
 800238a:	f000 f9b1 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800238e:	201c      	movs	r0, #28
 8002390:	f000 f9c3 	bl	800271a <HAL_NVIC_EnableIRQ>
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b00d      	add	sp, #52	; 0x34
 800239a:	bd90      	pop	{r4, r7, pc}
 800239c:	40013800 	.word	0x40013800
 80023a0:	40021000 	.word	0x40021000
 80023a4:	20000130 	.word	0x20000130
 80023a8:	40020030 	.word	0x40020030
 80023ac:	40004400 	.word	0x40004400

080023b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <NMI_Handler+0x4>

080023b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <HardFault_Handler+0x4>

080023bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d4:	f000 f8a0 	bl	8002518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d8:	46c0      	nop			; (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 fa79 	bl	80028de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80023ec:	46c0      	nop			; (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	20000130 	.word	0x20000130

080023f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <USART1_IRQHandler+0x14>)
 80023fe:	0018      	movs	r0, r3
 8002400:	f001 fb6c 	bl	8003adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	20000028 	.word	0x20000028

08002410 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <USART2_IRQHandler+0x14>)
 8002416:	0018      	movs	r0, r3
 8002418:	f001 fb60 	bl	8003adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	200000ac 	.word	0x200000ac

08002428 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <Reset_Handler>:
 8002434:	480d      	ldr	r0, [pc, #52]	; (800246c <LoopForever+0x2>)
 8002436:	4685      	mov	sp, r0
 8002438:	480d      	ldr	r0, [pc, #52]	; (8002470 <LoopForever+0x6>)
 800243a:	490e      	ldr	r1, [pc, #56]	; (8002474 <LoopForever+0xa>)
 800243c:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <LoopForever+0xe>)
 800243e:	2300      	movs	r3, #0
 8002440:	e002      	b.n	8002448 <LoopCopyDataInit>

08002442 <CopyDataInit>:
 8002442:	58d4      	ldr	r4, [r2, r3]
 8002444:	50c4      	str	r4, [r0, r3]
 8002446:	3304      	adds	r3, #4

08002448 <LoopCopyDataInit>:
 8002448:	18c4      	adds	r4, r0, r3
 800244a:	428c      	cmp	r4, r1
 800244c:	d3f9      	bcc.n	8002442 <CopyDataInit>
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <LoopForever+0x12>)
 8002450:	4c0b      	ldr	r4, [pc, #44]	; (8002480 <LoopForever+0x16>)
 8002452:	2300      	movs	r3, #0
 8002454:	e001      	b.n	800245a <LoopFillZerobss>

08002456 <FillZerobss>:
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	3204      	adds	r2, #4

0800245a <LoopFillZerobss>:
 800245a:	42a2      	cmp	r2, r4
 800245c:	d3fb      	bcc.n	8002456 <FillZerobss>
 800245e:	f7ff ffe3 	bl	8002428 <SystemInit>
 8002462:	f002 fbbf 	bl	8004be4 <__libc_init_array>
 8002466:	f7fd ff1d 	bl	80002a4 <main>

0800246a <LoopForever>:
 800246a:	e7fe      	b.n	800246a <LoopForever>
 800246c:	20002000 	.word	0x20002000
 8002470:	20000000 	.word	0x20000000
 8002474:	2000000c 	.word	0x2000000c
 8002478:	08004c94 	.word	0x08004c94
 800247c:	2000000c 	.word	0x2000000c
 8002480:	2000034c 	.word	0x2000034c

08002484 <ADC1_IRQHandler>:
 8002484:	e7fe      	b.n	8002484 <ADC1_IRQHandler>
	...

08002488 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_Init+0x24>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_Init+0x24>)
 8002492:	2110      	movs	r1, #16
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002498:	2003      	movs	r0, #3
 800249a:	f000 f809 	bl	80024b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800249e:	f7ff fea1 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	40022000 	.word	0x40022000

080024b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_InitTick+0x5c>)
 80024ba:	681c      	ldr	r4, [r3, #0]
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_InitTick+0x60>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	0019      	movs	r1, r3
 80024c2:	23fa      	movs	r3, #250	; 0xfa
 80024c4:	0098      	lsls	r0, r3, #2
 80024c6:	f7fd fe27 	bl	8000118 <__udivsi3>
 80024ca:	0003      	movs	r3, r0
 80024cc:	0019      	movs	r1, r3
 80024ce:	0020      	movs	r0, r4
 80024d0:	f7fd fe22 	bl	8000118 <__udivsi3>
 80024d4:	0003      	movs	r3, r0
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 f92f 	bl	800273a <HAL_SYSTICK_Config>
 80024dc:	1e03      	subs	r3, r0, #0
 80024de:	d001      	beq.n	80024e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e00f      	b.n	8002504 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d80b      	bhi.n	8002502 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	2301      	movs	r3, #1
 80024ee:	425b      	negs	r3, r3
 80024f0:	2200      	movs	r2, #0
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 f8fc 	bl	80026f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_InitTick+0x64>)
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	e000      	b.n	8002504 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b003      	add	sp, #12
 800250a:	bd90      	pop	{r4, r7, pc}
 800250c:	20000000 	.word	0x20000000
 8002510:	20000008 	.word	0x20000008
 8002514:	20000004 	.word	0x20000004

08002518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_IncTick+0x1c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	001a      	movs	r2, r3
 8002522:	4b05      	ldr	r3, [pc, #20]	; (8002538 <HAL_IncTick+0x20>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	18d2      	adds	r2, r2, r3
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_IncTick+0x20>)
 800252a:	601a      	str	r2, [r3, #0]
}
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	20000008 	.word	0x20000008
 8002538:	20000348 	.word	0x20000348

0800253c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  return uwTick;
 8002540:	4b02      	ldr	r3, [pc, #8]	; (800254c <HAL_GetTick+0x10>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	0018      	movs	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	20000348 	.word	0x20000348

08002550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff fff0 	bl	800253c <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3301      	adds	r3, #1
 8002568:	d005      	beq.n	8002576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_Delay+0x44>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	001a      	movs	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	189b      	adds	r3, r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	f7ff ffe0 	bl	800253c <HAL_GetTick>
 800257c:	0002      	movs	r2, r0
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	429a      	cmp	r2, r3
 8002586:	d8f7      	bhi.n	8002578 <HAL_Delay+0x28>
  {
  }
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b004      	add	sp, #16
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	20000008 	.word	0x20000008

08002598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	0002      	movs	r2, r0
 80025a0:	1dfb      	adds	r3, r7, #7
 80025a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	1dfb      	adds	r3, r7, #7
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b7f      	cmp	r3, #127	; 0x7f
 80025aa:	d809      	bhi.n	80025c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ac:	1dfb      	adds	r3, r7, #7
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	001a      	movs	r2, r3
 80025b2:	231f      	movs	r3, #31
 80025b4:	401a      	ands	r2, r3
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <__NVIC_EnableIRQ+0x30>)
 80025b8:	2101      	movs	r1, #1
 80025ba:	4091      	lsls	r1, r2
 80025bc:	000a      	movs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]
  }
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	e000e100 	.word	0xe000e100

080025cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	0002      	movs	r2, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	1dfb      	adds	r3, r7, #7
 80025d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b7f      	cmp	r3, #127	; 0x7f
 80025e0:	d828      	bhi.n	8002634 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025e2:	4a2f      	ldr	r2, [pc, #188]	; (80026a0 <__NVIC_SetPriority+0xd4>)
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	33c0      	adds	r3, #192	; 0xc0
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	589b      	ldr	r3, [r3, r2]
 80025f2:	1dfa      	adds	r2, r7, #7
 80025f4:	7812      	ldrb	r2, [r2, #0]
 80025f6:	0011      	movs	r1, r2
 80025f8:	2203      	movs	r2, #3
 80025fa:	400a      	ands	r2, r1
 80025fc:	00d2      	lsls	r2, r2, #3
 80025fe:	21ff      	movs	r1, #255	; 0xff
 8002600:	4091      	lsls	r1, r2
 8002602:	000a      	movs	r2, r1
 8002604:	43d2      	mvns	r2, r2
 8002606:	401a      	ands	r2, r3
 8002608:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	019b      	lsls	r3, r3, #6
 800260e:	22ff      	movs	r2, #255	; 0xff
 8002610:	401a      	ands	r2, r3
 8002612:	1dfb      	adds	r3, r7, #7
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	0018      	movs	r0, r3
 8002618:	2303      	movs	r3, #3
 800261a:	4003      	ands	r3, r0
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002620:	481f      	ldr	r0, [pc, #124]	; (80026a0 <__NVIC_SetPriority+0xd4>)
 8002622:	1dfb      	adds	r3, r7, #7
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b25b      	sxtb	r3, r3
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	430a      	orrs	r2, r1
 800262c:	33c0      	adds	r3, #192	; 0xc0
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002632:	e031      	b.n	8002698 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002634:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <__NVIC_SetPriority+0xd8>)
 8002636:	1dfb      	adds	r3, r7, #7
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	0019      	movs	r1, r3
 800263c:	230f      	movs	r3, #15
 800263e:	400b      	ands	r3, r1
 8002640:	3b08      	subs	r3, #8
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3306      	adds	r3, #6
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	18d3      	adds	r3, r2, r3
 800264a:	3304      	adds	r3, #4
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	1dfa      	adds	r2, r7, #7
 8002650:	7812      	ldrb	r2, [r2, #0]
 8002652:	0011      	movs	r1, r2
 8002654:	2203      	movs	r2, #3
 8002656:	400a      	ands	r2, r1
 8002658:	00d2      	lsls	r2, r2, #3
 800265a:	21ff      	movs	r1, #255	; 0xff
 800265c:	4091      	lsls	r1, r2
 800265e:	000a      	movs	r2, r1
 8002660:	43d2      	mvns	r2, r2
 8002662:	401a      	ands	r2, r3
 8002664:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	019b      	lsls	r3, r3, #6
 800266a:	22ff      	movs	r2, #255	; 0xff
 800266c:	401a      	ands	r2, r3
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	0018      	movs	r0, r3
 8002674:	2303      	movs	r3, #3
 8002676:	4003      	ands	r3, r0
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800267c:	4809      	ldr	r0, [pc, #36]	; (80026a4 <__NVIC_SetPriority+0xd8>)
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	001c      	movs	r4, r3
 8002684:	230f      	movs	r3, #15
 8002686:	4023      	ands	r3, r4
 8002688:	3b08      	subs	r3, #8
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	430a      	orrs	r2, r1
 800268e:	3306      	adds	r3, #6
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	18c3      	adds	r3, r0, r3
 8002694:	3304      	adds	r3, #4
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b003      	add	sp, #12
 800269e:	bd90      	pop	{r4, r7, pc}
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	1e5a      	subs	r2, r3, #1
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	045b      	lsls	r3, r3, #17
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d301      	bcc.n	80026c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026bc:	2301      	movs	r3, #1
 80026be:	e010      	b.n	80026e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <SysTick_Config+0x44>)
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	3a01      	subs	r2, #1
 80026c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c8:	2301      	movs	r3, #1
 80026ca:	425b      	negs	r3, r3
 80026cc:	2103      	movs	r1, #3
 80026ce:	0018      	movs	r0, r3
 80026d0:	f7ff ff7c 	bl	80025cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <SysTick_Config+0x44>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SysTick_Config+0x44>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	0018      	movs	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b002      	add	sp, #8
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	210f      	movs	r1, #15
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	1c02      	adds	r2, r0, #0
 8002700:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	187b      	adds	r3, r7, r1
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b25b      	sxtb	r3, r3
 800270a:	0011      	movs	r1, r2
 800270c:	0018      	movs	r0, r3
 800270e:	f7ff ff5d 	bl	80025cc <__NVIC_SetPriority>
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b004      	add	sp, #16
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	0002      	movs	r2, r0
 8002722:	1dfb      	adds	r3, r7, #7
 8002724:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002726:	1dfb      	adds	r3, r7, #7
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b25b      	sxtb	r3, r3
 800272c:	0018      	movs	r0, r3
 800272e:	f7ff ff33 	bl	8002598 <__NVIC_EnableIRQ>
}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	46bd      	mov	sp, r7
 8002736:	b002      	add	sp, #8
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	0018      	movs	r0, r3
 8002746:	f7ff ffaf 	bl	80026a8 <SysTick_Config>
 800274a:	0003      	movs	r3, r0
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	b002      	add	sp, #8
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e036      	b.n	80027d8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2221      	movs	r2, #33	; 0x21
 800276e:	2102      	movs	r1, #2
 8002770:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4a18      	ldr	r2, [pc, #96]	; (80027e0 <HAL_DMA_Init+0x8c>)
 800277e:	4013      	ands	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800278a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 f932 	bl	8002a24 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2221      	movs	r2, #33	; 0x21
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	2100      	movs	r1, #0
 80027d4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}  
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b004      	add	sp, #16
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	ffffc00f 	.word	0xffffc00f

080027e4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2221      	movs	r2, #33	; 0x21
 80027f0:	5c9b      	ldrb	r3, [r3, r2]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d008      	beq.n	800280a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2204      	movs	r2, #4
 80027fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	2100      	movs	r1, #0
 8002804:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e020      	b.n	800284c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	210e      	movs	r1, #14
 8002816:	438a      	bics	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2101      	movs	r1, #1
 8002826:	438a      	bics	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	2101      	movs	r1, #1
 8002834:	4091      	lsls	r1, r2
 8002836:	000a      	movs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2221      	movs	r2, #33	; 0x21
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	2100      	movs	r1, #0
 8002848:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b002      	add	sp, #8
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	210f      	movs	r1, #15
 800285e:	187b      	adds	r3, r7, r1
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2221      	movs	r2, #33	; 0x21
 8002868:	5c9b      	ldrb	r3, [r3, r2]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d006      	beq.n	800287e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2204      	movs	r2, #4
 8002874:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002876:	187b      	adds	r3, r7, r1
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	e028      	b.n	80028d0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	210e      	movs	r1, #14
 800288a:	438a      	bics	r2, r1
 800288c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	438a      	bics	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	2101      	movs	r1, #1
 80028a8:	4091      	lsls	r1, r2
 80028aa:	000a      	movs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2221      	movs	r2, #33	; 0x21
 80028b2:	2101      	movs	r1, #1
 80028b4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	2100      	movs	r1, #0
 80028bc:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	0010      	movs	r0, r2
 80028ce:	4798      	blx	r3
    } 
  }
  return status;
 80028d0:	230f      	movs	r3, #15
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	781b      	ldrb	r3, [r3, #0]
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b004      	add	sp, #16
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	2204      	movs	r2, #4
 80028fc:	409a      	lsls	r2, r3
 80028fe:	0013      	movs	r3, r2
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4013      	ands	r3, r2
 8002904:	d024      	beq.n	8002950 <HAL_DMA_IRQHandler+0x72>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2204      	movs	r2, #4
 800290a:	4013      	ands	r3, r2
 800290c:	d020      	beq.n	8002950 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2220      	movs	r2, #32
 8002916:	4013      	ands	r3, r2
 8002918:	d107      	bne.n	800292a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2104      	movs	r1, #4
 8002926:	438a      	bics	r2, r1
 8002928:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	2104      	movs	r1, #4
 8002934:	4091      	lsls	r1, r2
 8002936:	000a      	movs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d100      	bne.n	8002944 <HAL_DMA_IRQHandler+0x66>
 8002942:	e06a      	b.n	8002a1a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	0010      	movs	r0, r2
 800294c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800294e:	e064      	b.n	8002a1a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2202      	movs	r2, #2
 8002956:	409a      	lsls	r2, r3
 8002958:	0013      	movs	r3, r2
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4013      	ands	r3, r2
 800295e:	d02b      	beq.n	80029b8 <HAL_DMA_IRQHandler+0xda>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d027      	beq.n	80029b8 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2220      	movs	r2, #32
 8002970:	4013      	ands	r3, r2
 8002972:	d10b      	bne.n	800298c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	210a      	movs	r1, #10
 8002980:	438a      	bics	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2221      	movs	r2, #33	; 0x21
 8002988:	2101      	movs	r1, #1
 800298a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002994:	2102      	movs	r1, #2
 8002996:	4091      	lsls	r1, r2
 8002998:	000a      	movs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	2100      	movs	r1, #0
 80029a2:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d036      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	0010      	movs	r0, r2
 80029b4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80029b6:	e030      	b.n	8002a1a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	2208      	movs	r2, #8
 80029be:	409a      	lsls	r2, r3
 80029c0:	0013      	movs	r3, r2
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	d028      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x13c>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2208      	movs	r2, #8
 80029cc:	4013      	ands	r3, r2
 80029ce:	d024      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	210e      	movs	r1, #14
 80029dc:	438a      	bics	r2, r1
 80029de:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e8:	2101      	movs	r1, #1
 80029ea:	4091      	lsls	r1, r2
 80029ec:	000a      	movs	r2, r1
 80029ee:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2221      	movs	r2, #33	; 0x21
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	0010      	movs	r0, r2
 8002a16:	4798      	blx	r3
    }
   }
}  
 8002a18:	e7ff      	b.n	8002a1a <HAL_DMA_IRQHandler+0x13c>
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a08      	ldr	r2, [pc, #32]	; (8002a54 <DMA_CalcBaseAndBitshift+0x30>)
 8002a32:	4694      	mov	ip, r2
 8002a34:	4463      	add	r3, ip
 8002a36:	2114      	movs	r1, #20
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7fd fb6d 	bl	8000118 <__udivsi3>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	009a      	lsls	r2, r3, #2
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a03      	ldr	r2, [pc, #12]	; (8002a58 <DMA_CalcBaseAndBitshift+0x34>)
 8002a4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	bffdfff8 	.word	0xbffdfff8
 8002a58:	40020000 	.word	0x40020000

08002a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6a:	e14f      	b.n	8002d0c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2101      	movs	r1, #1
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4091      	lsls	r1, r2
 8002a76:	000a      	movs	r2, r1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d100      	bne.n	8002a84 <HAL_GPIO_Init+0x28>
 8002a82:	e140      	b.n	8002d06 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2203      	movs	r2, #3
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d005      	beq.n	8002a9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2203      	movs	r2, #3
 8002a96:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d130      	bne.n	8002afe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	0013      	movs	r3, r2
 8002aac:	43da      	mvns	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	409a      	lsls	r2, r3
 8002abe:	0013      	movs	r3, r2
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	0013      	movs	r3, r2
 8002ada:	43da      	mvns	r2, r3
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	2201      	movs	r2, #1
 8002aea:	401a      	ands	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
 8002af0:	0013      	movs	r3, r2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2203      	movs	r2, #3
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d017      	beq.n	8002b3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	409a      	lsls	r2, r3
 8002b18:	0013      	movs	r3, r2
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2203      	movs	r2, #3
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d123      	bne.n	8002b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	08da      	lsrs	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3208      	adds	r2, #8
 8002b4e:	0092      	lsls	r2, r2, #2
 8002b50:	58d3      	ldr	r3, [r2, r3]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2207      	movs	r2, #7
 8002b58:	4013      	ands	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	0013      	movs	r3, r2
 8002b62:	43da      	mvns	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2107      	movs	r1, #7
 8002b72:	400b      	ands	r3, r1
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	409a      	lsls	r2, r3
 8002b78:	0013      	movs	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	0092      	lsls	r2, r2, #2
 8002b8a:	6939      	ldr	r1, [r7, #16]
 8002b8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	0013      	movs	r3, r2
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2203      	movs	r2, #3
 8002bac:	401a      	ands	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	0013      	movs	r3, r2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	23c0      	movs	r3, #192	; 0xc0
 8002bc8:	029b      	lsls	r3, r3, #10
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d100      	bne.n	8002bd0 <HAL_GPIO_Init+0x174>
 8002bce:	e09a      	b.n	8002d06 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd0:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <HAL_GPIO_Init+0x2c8>)
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_GPIO_Init+0x2c8>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	619a      	str	r2, [r3, #24]
 8002bdc:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <HAL_GPIO_Init+0x2c8>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2201      	movs	r2, #1
 8002be2:	4013      	ands	r3, r2
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002be8:	4a4f      	ldr	r2, [pc, #316]	; (8002d28 <HAL_GPIO_Init+0x2cc>)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	589b      	ldr	r3, [r3, r2]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220f      	movs	r2, #15
 8002c00:	409a      	lsls	r2, r3
 8002c02:	0013      	movs	r3, r2
 8002c04:	43da      	mvns	r2, r3
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	2390      	movs	r3, #144	; 0x90
 8002c10:	05db      	lsls	r3, r3, #23
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d013      	beq.n	8002c3e <HAL_GPIO_Init+0x1e2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a44      	ldr	r2, [pc, #272]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00d      	beq.n	8002c3a <HAL_GPIO_Init+0x1de>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a43      	ldr	r2, [pc, #268]	; (8002d30 <HAL_GPIO_Init+0x2d4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d007      	beq.n	8002c36 <HAL_GPIO_Init+0x1da>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a42      	ldr	r2, [pc, #264]	; (8002d34 <HAL_GPIO_Init+0x2d8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_GPIO_Init+0x1d6>
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x1e4>
 8002c32:	2305      	movs	r3, #5
 8002c34:	e004      	b.n	8002c40 <HAL_GPIO_Init+0x1e4>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_Init+0x1e4>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x1e4>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	2103      	movs	r1, #3
 8002c44:	400a      	ands	r2, r1
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	4093      	lsls	r3, r2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c50:	4935      	ldr	r1, [pc, #212]	; (8002d28 <HAL_GPIO_Init+0x2cc>)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c5e:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_GPIO_Init+0x2dc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	43da      	mvns	r2, r3
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	025b      	lsls	r3, r3, #9
 8002c76:	4013      	ands	r3, r2
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c82:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_GPIO_Init+0x2dc>)
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c88:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_GPIO_Init+0x2dc>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	029b      	lsls	r3, r3, #10
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_GPIO_Init+0x2dc>)
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb2:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <HAL_GPIO_Init+0x2dc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	035b      	lsls	r3, r3, #13
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cd6:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <HAL_GPIO_Init+0x2dc>)
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002cdc:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <HAL_GPIO_Init+0x2dc>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	039b      	lsls	r3, r3, #14
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d00:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_GPIO_Init+0x2dc>)
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	40da      	lsrs	r2, r3
 8002d14:	1e13      	subs	r3, r2, #0
 8002d16:	d000      	beq.n	8002d1a <HAL_GPIO_Init+0x2be>
 8002d18:	e6a8      	b.n	8002a6c <HAL_GPIO_Init+0x10>
  } 
}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b006      	add	sp, #24
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40010000 	.word	0x40010000
 8002d2c:	48000400 	.word	0x48000400
 8002d30:	48000800 	.word	0x48000800
 8002d34:	48000c00 	.word	0x48000c00
 8002d38:	40010400 	.word	0x40010400

08002d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	0008      	movs	r0, r1
 8002d46:	0011      	movs	r1, r2
 8002d48:	1cbb      	adds	r3, r7, #2
 8002d4a:	1c02      	adds	r2, r0, #0
 8002d4c:	801a      	strh	r2, [r3, #0]
 8002d4e:	1c7b      	adds	r3, r7, #1
 8002d50:	1c0a      	adds	r2, r1, #0
 8002d52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d54:	1c7b      	adds	r3, r7, #1
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d004      	beq.n	8002d66 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d5c:	1cbb      	adds	r3, r7, #2
 8002d5e:	881a      	ldrh	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d64:	e003      	b.n	8002d6e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d66:	1cbb      	adds	r3, r7, #2
 8002d68:	881a      	ldrh	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b002      	add	sp, #8
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	000a      	movs	r2, r1
 8002d80:	1cbb      	adds	r3, r7, #2
 8002d82:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d8a:	1cbb      	adds	r3, r7, #2
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4013      	ands	r3, r2
 8002d92:	041a      	lsls	r2, r3, #16
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	1cb9      	adds	r1, r7, #2
 8002d9a:	8809      	ldrh	r1, [r1, #0]
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	619a      	str	r2, [r3, #24]
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b004      	add	sp, #16
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e301      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d100      	bne.n	8002dca <HAL_RCC_OscConfig+0x1e>
 8002dc8:	e08d      	b.n	8002ee6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002dca:	4bc3      	ldr	r3, [pc, #780]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	220c      	movs	r2, #12
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d00e      	beq.n	8002df4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dd6:	4bc0      	ldr	r3, [pc, #768]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	220c      	movs	r2, #12
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d116      	bne.n	8002e10 <HAL_RCC_OscConfig+0x64>
 8002de2:	4bbd      	ldr	r3, [pc, #756]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	025b      	lsls	r3, r3, #9
 8002dea:	401a      	ands	r2, r3
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	025b      	lsls	r3, r3, #9
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d10d      	bne.n	8002e10 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	4bb8      	ldr	r3, [pc, #736]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	029b      	lsls	r3, r3, #10
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d100      	bne.n	8002e02 <HAL_RCC_OscConfig+0x56>
 8002e00:	e070      	b.n	8002ee4 <HAL_RCC_OscConfig+0x138>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d000      	beq.n	8002e0c <HAL_RCC_OscConfig+0x60>
 8002e0a:	e06b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e2d8      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x7c>
 8002e18:	4baf      	ldr	r3, [pc, #700]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4bae      	ldr	r3, [pc, #696]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	0249      	lsls	r1, r1, #9
 8002e22:	430a      	orrs	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e02f      	b.n	8002e88 <HAL_RCC_OscConfig+0xdc>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10c      	bne.n	8002e4a <HAL_RCC_OscConfig+0x9e>
 8002e30:	4ba9      	ldr	r3, [pc, #676]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4ba8      	ldr	r3, [pc, #672]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e36:	49a9      	ldr	r1, [pc, #676]	; (80030dc <HAL_RCC_OscConfig+0x330>)
 8002e38:	400a      	ands	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	4ba6      	ldr	r3, [pc, #664]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4ba5      	ldr	r3, [pc, #660]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e42:	49a7      	ldr	r1, [pc, #668]	; (80030e0 <HAL_RCC_OscConfig+0x334>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e01e      	b.n	8002e88 <HAL_RCC_OscConfig+0xdc>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b05      	cmp	r3, #5
 8002e50:	d10e      	bne.n	8002e70 <HAL_RCC_OscConfig+0xc4>
 8002e52:	4ba1      	ldr	r3, [pc, #644]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4ba0      	ldr	r3, [pc, #640]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	02c9      	lsls	r1, r1, #11
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	4b9d      	ldr	r3, [pc, #628]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b9c      	ldr	r3, [pc, #624]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	0249      	lsls	r1, r1, #9
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0xdc>
 8002e70:	4b99      	ldr	r3, [pc, #612]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b98      	ldr	r3, [pc, #608]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e76:	4999      	ldr	r1, [pc, #612]	; (80030dc <HAL_RCC_OscConfig+0x330>)
 8002e78:	400a      	ands	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	4b96      	ldr	r3, [pc, #600]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b95      	ldr	r3, [pc, #596]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002e82:	4997      	ldr	r1, [pc, #604]	; (80030e0 <HAL_RCC_OscConfig+0x334>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d014      	beq.n	8002eba <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7ff fb54 	bl	800253c <HAL_GetTick>
 8002e94:	0003      	movs	r3, r0
 8002e96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9a:	f7ff fb4f 	bl	800253c <HAL_GetTick>
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b64      	cmp	r3, #100	; 0x64
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e28a      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eac:	4b8a      	ldr	r3, [pc, #552]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	029b      	lsls	r3, r3, #10
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0xee>
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7ff fb3f 	bl	800253c <HAL_GetTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7ff fb3a 	bl	800253c <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e275      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed6:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	029b      	lsls	r3, r3, #10
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x118>
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2202      	movs	r2, #2
 8002eec:	4013      	ands	r3, r2
 8002eee:	d100      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x146>
 8002ef0:	e069      	b.n	8002fc6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ef2:	4b79      	ldr	r3, [pc, #484]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d00b      	beq.n	8002f14 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002efc:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	220c      	movs	r2, #12
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d11c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x196>
 8002f08:	4b73      	ldr	r3, [pc, #460]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	025b      	lsls	r3, r3, #9
 8002f10:	4013      	ands	r3, r2
 8002f12:	d116      	bne.n	8002f42 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f14:	4b70      	ldr	r3, [pc, #448]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d005      	beq.n	8002f2a <HAL_RCC_OscConfig+0x17e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e24b      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2a:	4b6b      	ldr	r3, [pc, #428]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	22f8      	movs	r2, #248	; 0xf8
 8002f30:	4393      	bics	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	00da      	lsls	r2, r3, #3
 8002f3a:	4b67      	ldr	r3, [pc, #412]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f40:	e041      	b.n	8002fc6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d024      	beq.n	8002f94 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4a:	4b63      	ldr	r3, [pc, #396]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002f50:	2101      	movs	r1, #1
 8002f52:	430a      	orrs	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7ff faf1 	bl	800253c <HAL_GetTick>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f60:	f7ff faec 	bl	800253c <HAL_GetTick>
 8002f64:	0002      	movs	r2, r0
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e227      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f72:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2202      	movs	r2, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d0f1      	beq.n	8002f60 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	4b56      	ldr	r3, [pc, #344]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	22f8      	movs	r2, #248	; 0xf8
 8002f82:	4393      	bics	r3, r2
 8002f84:	0019      	movs	r1, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00da      	lsls	r2, r3, #3
 8002f8c:	4b52      	ldr	r3, [pc, #328]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	e018      	b.n	8002fc6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f94:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b4f      	ldr	r3, [pc, #316]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	438a      	bics	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7ff facc 	bl	800253c <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002faa:	f7ff fac7 	bl	800253c <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e202      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbc:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d1f1      	bne.n	8002faa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2208      	movs	r2, #8
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d036      	beq.n	800303e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d019      	beq.n	800300c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd8:	4b3f      	ldr	r3, [pc, #252]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fdc:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8002fde:	2101      	movs	r1, #1
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe4:	f7ff faaa 	bl	800253c <HAL_GetTick>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fee:	f7ff faa5 	bl	800253c <HAL_GetTick>
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1e0      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003000:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2202      	movs	r2, #2
 8003006:	4013      	ands	r3, r2
 8003008:	d0f1      	beq.n	8002fee <HAL_RCC_OscConfig+0x242>
 800300a:	e018      	b.n	800303e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300c:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 800300e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003010:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8003012:	2101      	movs	r1, #1
 8003014:	438a      	bics	r2, r1
 8003016:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003018:	f7ff fa90 	bl	800253c <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003022:	f7ff fa8b 	bl	800253c <HAL_GetTick>
 8003026:	0002      	movs	r2, r0
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e1c6      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003034:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2202      	movs	r2, #2
 800303a:	4013      	ands	r3, r2
 800303c:	d1f1      	bne.n	8003022 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2204      	movs	r2, #4
 8003044:	4013      	ands	r3, r2
 8003046:	d100      	bne.n	800304a <HAL_RCC_OscConfig+0x29e>
 8003048:	e0b4      	b.n	80031b4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304a:	201f      	movs	r0, #31
 800304c:	183b      	adds	r3, r7, r0
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003052:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	055b      	lsls	r3, r3, #21
 800305a:	4013      	ands	r3, r2
 800305c:	d110      	bne.n	8003080 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 8003064:	2180      	movs	r1, #128	; 0x80
 8003066:	0549      	lsls	r1, r1, #21
 8003068:	430a      	orrs	r2, r1
 800306a:	61da      	str	r2, [r3, #28]
 800306c:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	055b      	lsls	r3, r3, #21
 8003074:	4013      	ands	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800307a:	183b      	adds	r3, r7, r0
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <HAL_RCC_OscConfig+0x338>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4013      	ands	r3, r2
 800308a:	d11a      	bne.n	80030c2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308c:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_RCC_OscConfig+0x338>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_RCC_OscConfig+0x338>)
 8003092:	2180      	movs	r1, #128	; 0x80
 8003094:	0049      	lsls	r1, r1, #1
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309a:	f7ff fa4f 	bl	800253c <HAL_GetTick>
 800309e:	0003      	movs	r3, r0
 80030a0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a4:	f7ff fa4a 	bl	800253c <HAL_GetTick>
 80030a8:	0002      	movs	r2, r0
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e185      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_OscConfig+0x338>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d10e      	bne.n	80030e8 <HAL_RCC_OscConfig+0x33c>
 80030ca:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 80030cc:	6a1a      	ldr	r2, [r3, #32]
 80030ce:	4b02      	ldr	r3, [pc, #8]	; (80030d8 <HAL_RCC_OscConfig+0x32c>)
 80030d0:	2101      	movs	r1, #1
 80030d2:	430a      	orrs	r2, r1
 80030d4:	621a      	str	r2, [r3, #32]
 80030d6:	e035      	b.n	8003144 <HAL_RCC_OscConfig+0x398>
 80030d8:	40021000 	.word	0x40021000
 80030dc:	fffeffff 	.word	0xfffeffff
 80030e0:	fffbffff 	.word	0xfffbffff
 80030e4:	40007000 	.word	0x40007000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10c      	bne.n	800310a <HAL_RCC_OscConfig+0x35e>
 80030f0:	4bb6      	ldr	r3, [pc, #728]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80030f2:	6a1a      	ldr	r2, [r3, #32]
 80030f4:	4bb5      	ldr	r3, [pc, #724]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	438a      	bics	r2, r1
 80030fa:	621a      	str	r2, [r3, #32]
 80030fc:	4bb3      	ldr	r3, [pc, #716]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	4bb2      	ldr	r3, [pc, #712]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003102:	2104      	movs	r1, #4
 8003104:	438a      	bics	r2, r1
 8003106:	621a      	str	r2, [r3, #32]
 8003108:	e01c      	b.n	8003144 <HAL_RCC_OscConfig+0x398>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b05      	cmp	r3, #5
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x380>
 8003112:	4bae      	ldr	r3, [pc, #696]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003114:	6a1a      	ldr	r2, [r3, #32]
 8003116:	4bad      	ldr	r3, [pc, #692]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003118:	2104      	movs	r1, #4
 800311a:	430a      	orrs	r2, r1
 800311c:	621a      	str	r2, [r3, #32]
 800311e:	4bab      	ldr	r3, [pc, #684]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	4baa      	ldr	r3, [pc, #680]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003124:	2101      	movs	r1, #1
 8003126:	430a      	orrs	r2, r1
 8003128:	621a      	str	r2, [r3, #32]
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0x398>
 800312c:	4ba7      	ldr	r3, [pc, #668]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800312e:	6a1a      	ldr	r2, [r3, #32]
 8003130:	4ba6      	ldr	r3, [pc, #664]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003132:	2101      	movs	r1, #1
 8003134:	438a      	bics	r2, r1
 8003136:	621a      	str	r2, [r3, #32]
 8003138:	4ba4      	ldr	r3, [pc, #656]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800313a:	6a1a      	ldr	r2, [r3, #32]
 800313c:	4ba3      	ldr	r3, [pc, #652]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800313e:	2104      	movs	r1, #4
 8003140:	438a      	bics	r2, r1
 8003142:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d014      	beq.n	8003176 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314c:	f7ff f9f6 	bl	800253c <HAL_GetTick>
 8003150:	0003      	movs	r3, r0
 8003152:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003154:	e009      	b.n	800316a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7ff f9f1 	bl	800253c <HAL_GetTick>
 800315a:	0002      	movs	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	4a9b      	ldr	r2, [pc, #620]	; (80033d0 <HAL_RCC_OscConfig+0x624>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e12b      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316a:	4b98      	ldr	r3, [pc, #608]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	2202      	movs	r2, #2
 8003170:	4013      	ands	r3, r2
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x3aa>
 8003174:	e013      	b.n	800319e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7ff f9e1 	bl	800253c <HAL_GetTick>
 800317a:	0003      	movs	r3, r0
 800317c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317e:	e009      	b.n	8003194 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7ff f9dc 	bl	800253c <HAL_GetTick>
 8003184:	0002      	movs	r2, r0
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	4a91      	ldr	r2, [pc, #580]	; (80033d0 <HAL_RCC_OscConfig+0x624>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e116      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	4b8d      	ldr	r3, [pc, #564]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	2202      	movs	r2, #2
 800319a:	4013      	ands	r3, r2
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800319e:	231f      	movs	r3, #31
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d105      	bne.n	80031b4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a8:	4b88      	ldr	r3, [pc, #544]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80031aa:	69da      	ldr	r2, [r3, #28]
 80031ac:	4b87      	ldr	r3, [pc, #540]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80031ae:	4989      	ldr	r1, [pc, #548]	; (80033d4 <HAL_RCC_OscConfig+0x628>)
 80031b0:	400a      	ands	r2, r1
 80031b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2210      	movs	r2, #16
 80031ba:	4013      	ands	r3, r2
 80031bc:	d063      	beq.n	8003286 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d12a      	bne.n	800321c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80031c6:	4b81      	ldr	r3, [pc, #516]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80031c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ca:	4b80      	ldr	r3, [pc, #512]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80031cc:	2104      	movs	r1, #4
 80031ce:	430a      	orrs	r2, r1
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80031d2:	4b7e      	ldr	r3, [pc, #504]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80031d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d6:	4b7d      	ldr	r3, [pc, #500]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80031d8:	2101      	movs	r1, #1
 80031da:	430a      	orrs	r2, r1
 80031dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031de:	f7ff f9ad 	bl	800253c <HAL_GetTick>
 80031e2:	0003      	movs	r3, r0
 80031e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031e8:	f7ff f9a8 	bl	800253c <HAL_GetTick>
 80031ec:	0002      	movs	r2, r0
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0e3      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031fa:	4b74      	ldr	r3, [pc, #464]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	2202      	movs	r2, #2
 8003200:	4013      	ands	r3, r2
 8003202:	d0f1      	beq.n	80031e8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003204:	4b71      	ldr	r3, [pc, #452]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	22f8      	movs	r2, #248	; 0xf8
 800320a:	4393      	bics	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	00da      	lsls	r2, r3, #3
 8003214:	4b6d      	ldr	r3, [pc, #436]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003216:	430a      	orrs	r2, r1
 8003218:	635a      	str	r2, [r3, #52]	; 0x34
 800321a:	e034      	b.n	8003286 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	3305      	adds	r3, #5
 8003222:	d111      	bne.n	8003248 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003228:	4b68      	ldr	r3, [pc, #416]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800322a:	2104      	movs	r1, #4
 800322c:	438a      	bics	r2, r1
 800322e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003230:	4b66      	ldr	r3, [pc, #408]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003234:	22f8      	movs	r2, #248	; 0xf8
 8003236:	4393      	bics	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	00da      	lsls	r2, r3, #3
 8003240:	4b62      	ldr	r3, [pc, #392]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003242:	430a      	orrs	r2, r1
 8003244:	635a      	str	r2, [r3, #52]	; 0x34
 8003246:	e01e      	b.n	8003286 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003248:	4b60      	ldr	r3, [pc, #384]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800324a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324c:	4b5f      	ldr	r3, [pc, #380]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800324e:	2104      	movs	r1, #4
 8003250:	430a      	orrs	r2, r1
 8003252:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003254:	4b5d      	ldr	r3, [pc, #372]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003258:	4b5c      	ldr	r3, [pc, #368]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800325a:	2101      	movs	r1, #1
 800325c:	438a      	bics	r2, r1
 800325e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003260:	f7ff f96c 	bl	800253c <HAL_GetTick>
 8003264:	0003      	movs	r3, r0
 8003266:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800326a:	f7ff f967 	bl	800253c <HAL_GetTick>
 800326e:	0002      	movs	r2, r0
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e0a2      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800327c:	4b53      	ldr	r3, [pc, #332]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	2202      	movs	r2, #2
 8003282:	4013      	ands	r3, r2
 8003284:	d1f1      	bne.n	800326a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d100      	bne.n	8003290 <HAL_RCC_OscConfig+0x4e4>
 800328e:	e097      	b.n	80033c0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003290:	4b4e      	ldr	r3, [pc, #312]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	220c      	movs	r2, #12
 8003296:	4013      	ands	r3, r2
 8003298:	2b08      	cmp	r3, #8
 800329a:	d100      	bne.n	800329e <HAL_RCC_OscConfig+0x4f2>
 800329c:	e06b      	b.n	8003376 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d14c      	bne.n	8003340 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b49      	ldr	r3, [pc, #292]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b48      	ldr	r3, [pc, #288]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80032ac:	494a      	ldr	r1, [pc, #296]	; (80033d8 <HAL_RCC_OscConfig+0x62c>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7ff f943 	bl	800253c <HAL_GetTick>
 80032b6:	0003      	movs	r3, r0
 80032b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032bc:	f7ff f93e 	bl	800253c <HAL_GetTick>
 80032c0:	0002      	movs	r2, r0
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e079      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ce:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	049b      	lsls	r3, r3, #18
 80032d6:	4013      	ands	r3, r2
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032da:	4b3c      	ldr	r3, [pc, #240]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	220f      	movs	r2, #15
 80032e0:	4393      	bics	r3, r2
 80032e2:	0019      	movs	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	4b38      	ldr	r3, [pc, #224]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80032ea:	430a      	orrs	r2, r1
 80032ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4a3a      	ldr	r2, [pc, #232]	; (80033dc <HAL_RCC_OscConfig+0x630>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	0019      	movs	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	431a      	orrs	r2, r3
 8003302:	4b32      	ldr	r3, [pc, #200]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003304:	430a      	orrs	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003308:	4b30      	ldr	r3, [pc, #192]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800330e:	2180      	movs	r1, #128	; 0x80
 8003310:	0449      	lsls	r1, r1, #17
 8003312:	430a      	orrs	r2, r1
 8003314:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7ff f911 	bl	800253c <HAL_GetTick>
 800331a:	0003      	movs	r3, r0
 800331c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003320:	f7ff f90c 	bl	800253c <HAL_GetTick>
 8003324:	0002      	movs	r2, r0
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e047      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003332:	4b26      	ldr	r3, [pc, #152]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	049b      	lsls	r3, r3, #18
 800333a:	4013      	ands	r3, r2
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x574>
 800333e:	e03f      	b.n	80033c0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003340:	4b22      	ldr	r3, [pc, #136]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b21      	ldr	r3, [pc, #132]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003346:	4924      	ldr	r1, [pc, #144]	; (80033d8 <HAL_RCC_OscConfig+0x62c>)
 8003348:	400a      	ands	r2, r1
 800334a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7ff f8f6 	bl	800253c <HAL_GetTick>
 8003350:	0003      	movs	r3, r0
 8003352:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003356:	f7ff f8f1 	bl	800253c <HAL_GetTick>
 800335a:	0002      	movs	r2, r0
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e02c      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003368:	4b18      	ldr	r3, [pc, #96]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	049b      	lsls	r3, r3, #18
 8003370:	4013      	ands	r3, r2
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x5aa>
 8003374:	e024      	b.n	80033c0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e01f      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003388:	4b10      	ldr	r3, [pc, #64]	; (80033cc <HAL_RCC_OscConfig+0x620>)
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	025b      	lsls	r3, r3, #9
 8003394:	401a      	ands	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	429a      	cmp	r2, r3
 800339c:	d10e      	bne.n	80033bc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	220f      	movs	r2, #15
 80033a2:	401a      	ands	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	23f0      	movs	r3, #240	; 0xf0
 80033b0:	039b      	lsls	r3, r3, #14
 80033b2:	401a      	ands	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b008      	add	sp, #32
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	40021000 	.word	0x40021000
 80033d0:	00001388 	.word	0x00001388
 80033d4:	efffffff 	.word	0xefffffff
 80033d8:	feffffff 	.word	0xfeffffff
 80033dc:	ffc2ffff 	.word	0xffc2ffff

080033e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0b3      	b.n	800355c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f4:	4b5b      	ldr	r3, [pc, #364]	; (8003564 <HAL_RCC_ClockConfig+0x184>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2201      	movs	r2, #1
 80033fa:	4013      	ands	r3, r2
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d911      	bls.n	8003426 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b58      	ldr	r3, [pc, #352]	; (8003564 <HAL_RCC_ClockConfig+0x184>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2201      	movs	r2, #1
 8003408:	4393      	bics	r3, r2
 800340a:	0019      	movs	r1, r3
 800340c:	4b55      	ldr	r3, [pc, #340]	; (8003564 <HAL_RCC_ClockConfig+0x184>)
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003414:	4b53      	ldr	r3, [pc, #332]	; (8003564 <HAL_RCC_ClockConfig+0x184>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2201      	movs	r2, #1
 800341a:	4013      	ands	r3, r2
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d001      	beq.n	8003426 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e09a      	b.n	800355c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2202      	movs	r2, #2
 800342c:	4013      	ands	r3, r2
 800342e:	d015      	beq.n	800345c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2204      	movs	r2, #4
 8003436:	4013      	ands	r3, r2
 8003438:	d006      	beq.n	8003448 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800343a:	4b4b      	ldr	r3, [pc, #300]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	4b4a      	ldr	r3, [pc, #296]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 8003440:	21e0      	movs	r1, #224	; 0xe0
 8003442:	00c9      	lsls	r1, r1, #3
 8003444:	430a      	orrs	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003448:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	22f0      	movs	r2, #240	; 0xf0
 800344e:	4393      	bics	r3, r2
 8003450:	0019      	movs	r1, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	4b44      	ldr	r3, [pc, #272]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 8003458:	430a      	orrs	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2201      	movs	r2, #1
 8003462:	4013      	ands	r3, r2
 8003464:	d040      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	029b      	lsls	r3, r3, #10
 8003476:	4013      	ands	r3, r2
 8003478:	d114      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e06e      	b.n	800355c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	4b38      	ldr	r3, [pc, #224]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	049b      	lsls	r3, r3, #18
 800348e:	4013      	ands	r3, r2
 8003490:	d108      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e062      	b.n	800355c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	4b34      	ldr	r3, [pc, #208]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2202      	movs	r2, #2
 800349c:	4013      	ands	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e05b      	b.n	800355c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a4:	4b30      	ldr	r3, [pc, #192]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2203      	movs	r2, #3
 80034aa:	4393      	bics	r3, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b8:	f7ff f840 	bl	800253c <HAL_GetTick>
 80034bc:	0003      	movs	r3, r0
 80034be:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c0:	e009      	b.n	80034d6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c2:	f7ff f83b 	bl	800253c <HAL_GetTick>
 80034c6:	0002      	movs	r2, r0
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	4a27      	ldr	r2, [pc, #156]	; (800356c <HAL_RCC_ClockConfig+0x18c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e042      	b.n	800355c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	220c      	movs	r2, #12
 80034dc:	401a      	ands	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1ec      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e8:	4b1e      	ldr	r3, [pc, #120]	; (8003564 <HAL_RCC_ClockConfig+0x184>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2201      	movs	r2, #1
 80034ee:	4013      	ands	r3, r2
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d211      	bcs.n	800351a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_RCC_ClockConfig+0x184>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2201      	movs	r2, #1
 80034fc:	4393      	bics	r3, r2
 80034fe:	0019      	movs	r1, r3
 8003500:	4b18      	ldr	r3, [pc, #96]	; (8003564 <HAL_RCC_ClockConfig+0x184>)
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003508:	4b16      	ldr	r3, [pc, #88]	; (8003564 <HAL_RCC_ClockConfig+0x184>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2201      	movs	r2, #1
 800350e:	4013      	ands	r3, r2
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d001      	beq.n	800351a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e020      	b.n	800355c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2204      	movs	r2, #4
 8003520:	4013      	ands	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003524:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a11      	ldr	r2, [pc, #68]	; (8003570 <HAL_RCC_ClockConfig+0x190>)
 800352a:	4013      	ands	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003538:	f000 f820 	bl	800357c <HAL_RCC_GetSysClockFreq>
 800353c:	0001      	movs	r1, r0
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x188>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	220f      	movs	r2, #15
 8003546:	4013      	ands	r3, r2
 8003548:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <HAL_RCC_ClockConfig+0x194>)
 800354a:	5cd3      	ldrb	r3, [r2, r3]
 800354c:	000a      	movs	r2, r1
 800354e:	40da      	lsrs	r2, r3
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_RCC_ClockConfig+0x198>)
 8003552:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003554:	2003      	movs	r0, #3
 8003556:	f7fe ffab 	bl	80024b0 <HAL_InitTick>
  
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b004      	add	sp, #16
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40022000 	.word	0x40022000
 8003568:	40021000 	.word	0x40021000
 800356c:	00001388 	.word	0x00001388
 8003570:	fffff8ff 	.word	0xfffff8ff
 8003574:	08004c74 	.word	0x08004c74
 8003578:	20000000 	.word	0x20000000

0800357c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b08f      	sub	sp, #60	; 0x3c
 8003580:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003582:	2314      	movs	r3, #20
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003588:	ca13      	ldmia	r2!, {r0, r1, r4}
 800358a:	c313      	stmia	r3!, {r0, r1, r4}
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	4a29      	ldr	r2, [pc, #164]	; (8003638 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003594:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003596:	c313      	stmia	r3!, {r0, r1, r4}
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a0:	2300      	movs	r3, #0
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a4:	2300      	movs	r3, #0
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
 80035a8:	2300      	movs	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80035b0:	4b22      	ldr	r3, [pc, #136]	; (800363c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	220c      	movs	r2, #12
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d002      	beq.n	80035c6 <HAL_RCC_GetSysClockFreq+0x4a>
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d003      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x50>
 80035c4:	e02d      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035c6:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035ca:	e02d      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	0c9b      	lsrs	r3, r3, #18
 80035d0:	220f      	movs	r2, #15
 80035d2:	4013      	ands	r3, r2
 80035d4:	2214      	movs	r2, #20
 80035d6:	18ba      	adds	r2, r7, r2
 80035d8:	5cd3      	ldrb	r3, [r2, r3]
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80035dc:	4b17      	ldr	r3, [pc, #92]	; (800363c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	220f      	movs	r2, #15
 80035e2:	4013      	ands	r3, r2
 80035e4:	1d3a      	adds	r2, r7, #4
 80035e6:	5cd3      	ldrb	r3, [r2, r3]
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	025b      	lsls	r3, r3, #9
 80035f0:	4013      	ands	r3, r2
 80035f2:	d009      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035f6:	4812      	ldr	r0, [pc, #72]	; (8003640 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035f8:	f7fc fd8e 	bl	8000118 <__udivsi3>
 80035fc:	0003      	movs	r3, r0
 80035fe:	001a      	movs	r2, r3
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	4353      	muls	r3, r2
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
 8003606:	e009      	b.n	800361c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800360a:	000a      	movs	r2, r1
 800360c:	0152      	lsls	r2, r2, #5
 800360e:	1a52      	subs	r2, r2, r1
 8003610:	0193      	lsls	r3, r2, #6
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	185b      	adds	r3, r3, r1
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003620:	e002      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003624:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003626:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800362a:	0018      	movs	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	b00f      	add	sp, #60	; 0x3c
 8003630:	bd90      	pop	{r4, r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	08004c54 	.word	0x08004c54
 8003638:	08004c64 	.word	0x08004c64
 800363c:	40021000 	.word	0x40021000
 8003640:	007a1200 	.word	0x007a1200

08003644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003648:	4b02      	ldr	r3, [pc, #8]	; (8003654 <HAL_RCC_GetHCLKFreq+0x10>)
 800364a:	681b      	ldr	r3, [r3, #0]
}
 800364c:	0018      	movs	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	20000000 	.word	0x20000000

08003658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800365c:	f7ff fff2 	bl	8003644 <HAL_RCC_GetHCLKFreq>
 8003660:	0001      	movs	r1, r0
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	2207      	movs	r2, #7
 800366a:	4013      	ands	r3, r2
 800366c:	4a04      	ldr	r2, [pc, #16]	; (8003680 <HAL_RCC_GetPCLK1Freq+0x28>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	40d9      	lsrs	r1, r3
 8003672:	000b      	movs	r3, r1
}    
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	40021000 	.word	0x40021000
 8003680:	08004c84 	.word	0x08004c84

08003684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	025b      	lsls	r3, r3, #9
 800369c:	4013      	ands	r3, r2
 800369e:	d100      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80036a0:	e08e      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80036a2:	2017      	movs	r0, #23
 80036a4:	183b      	adds	r3, r7, r0
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036aa:	4b57      	ldr	r3, [pc, #348]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036ac:	69da      	ldr	r2, [r3, #28]
 80036ae:	2380      	movs	r3, #128	; 0x80
 80036b0:	055b      	lsls	r3, r3, #21
 80036b2:	4013      	ands	r3, r2
 80036b4:	d110      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036b6:	4b54      	ldr	r3, [pc, #336]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036b8:	69da      	ldr	r2, [r3, #28]
 80036ba:	4b53      	ldr	r3, [pc, #332]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	0549      	lsls	r1, r1, #21
 80036c0:	430a      	orrs	r2, r1
 80036c2:	61da      	str	r2, [r3, #28]
 80036c4:	4b50      	ldr	r3, [pc, #320]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	055b      	lsls	r3, r3, #21
 80036cc:	4013      	ands	r3, r2
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d2:	183b      	adds	r3, r7, r0
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	4b4c      	ldr	r3, [pc, #304]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4013      	ands	r3, r2
 80036e2:	d11a      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e4:	4b49      	ldr	r3, [pc, #292]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b48      	ldr	r3, [pc, #288]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	0049      	lsls	r1, r1, #1
 80036ee:	430a      	orrs	r2, r1
 80036f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f2:	f7fe ff23 	bl	800253c <HAL_GetTick>
 80036f6:	0003      	movs	r3, r0
 80036f8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fa:	e008      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fc:	f7fe ff1e 	bl	800253c <HAL_GetTick>
 8003700:	0002      	movs	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	; 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e077      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	4b3f      	ldr	r3, [pc, #252]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4013      	ands	r3, r2
 8003718:	d0f0      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800371a:	4b3b      	ldr	r3, [pc, #236]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	23c0      	movs	r3, #192	; 0xc0
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4013      	ands	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d034      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	23c0      	movs	r3, #192	; 0xc0
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4013      	ands	r3, r2
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	429a      	cmp	r2, r3
 800373a:	d02c      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800373c:	4b32      	ldr	r3, [pc, #200]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4a33      	ldr	r2, [pc, #204]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003742:	4013      	ands	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003746:	4b30      	ldr	r3, [pc, #192]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003748:	6a1a      	ldr	r2, [r3, #32]
 800374a:	4b2f      	ldr	r3, [pc, #188]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800374c:	2180      	movs	r1, #128	; 0x80
 800374e:	0249      	lsls	r1, r1, #9
 8003750:	430a      	orrs	r2, r1
 8003752:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003754:	4b2c      	ldr	r3, [pc, #176]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003756:	6a1a      	ldr	r2, [r3, #32]
 8003758:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800375a:	492e      	ldr	r1, [pc, #184]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800375c:	400a      	ands	r2, r1
 800375e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003760:	4b29      	ldr	r3, [pc, #164]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	4013      	ands	r3, r2
 800376c:	d013      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fe fee5 	bl	800253c <HAL_GetTick>
 8003772:	0003      	movs	r3, r0
 8003774:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003776:	e009      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7fe fee0 	bl	800253c <HAL_GetTick>
 800377c:	0002      	movs	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	4a25      	ldr	r2, [pc, #148]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d901      	bls.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e038      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378c:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	2202      	movs	r2, #2
 8003792:	4013      	ands	r3, r2
 8003794:	d0f0      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003796:	4b1c      	ldr	r3, [pc, #112]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800379c:	4013      	ands	r3, r2
 800379e:	0019      	movs	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	4b18      	ldr	r3, [pc, #96]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037a6:	430a      	orrs	r2, r1
 80037a8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037aa:	2317      	movs	r3, #23
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b4:	4b14      	ldr	r3, [pc, #80]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	4b13      	ldr	r3, [pc, #76]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037ba:	4918      	ldr	r1, [pc, #96]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80037bc:	400a      	ands	r2, r1
 80037be:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2201      	movs	r2, #1
 80037c6:	4013      	ands	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	2203      	movs	r2, #3
 80037d0:	4393      	bics	r3, r2
 80037d2:	0019      	movs	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037da:	430a      	orrs	r2, r1
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2220      	movs	r2, #32
 80037e4:	4013      	ands	r3, r2
 80037e6:	d009      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037e8:	4b07      	ldr	r3, [pc, #28]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	2210      	movs	r2, #16
 80037ee:	4393      	bics	r3, r2
 80037f0:	0019      	movs	r1, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037f8:	430a      	orrs	r2, r1
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	0018      	movs	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	b006      	add	sp, #24
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	40021000 	.word	0x40021000
 800380c:	40007000 	.word	0x40007000
 8003810:	fffffcff 	.word	0xfffffcff
 8003814:	fffeffff 	.word	0xfffeffff
 8003818:	00001388 	.word	0x00001388
 800381c:	efffffff 	.word	0xefffffff

08003820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e044      	b.n	80038bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003836:	2b00      	cmp	r3, #0
 8003838:	d107      	bne.n	800384a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2274      	movs	r2, #116	; 0x74
 800383e:	2100      	movs	r1, #0
 8003840:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	0018      	movs	r0, r3
 8003846:	f7fe fcf1 	bl	800222c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2224      	movs	r2, #36	; 0x24
 800384e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2101      	movs	r1, #1
 800385c:	438a      	bics	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	0018      	movs	r0, r3
 8003864:	f000 fc16 	bl	8004094 <UART_SetConfig>
 8003868:	0003      	movs	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e024      	b.n	80038bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0018      	movs	r0, r3
 800387e:	f000 fd49 	bl	8004314 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	490d      	ldr	r1, [pc, #52]	; (80038c4 <HAL_UART_Init+0xa4>)
 800388e:	400a      	ands	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2108      	movs	r1, #8
 800389e:	438a      	bics	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2101      	movs	r1, #1
 80038ae:	430a      	orrs	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 fde1 	bl	800447c <UART_CheckIdleState>
 80038ba:	0003      	movs	r3, r0
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	fffff7ff 	.word	0xfffff7ff

080038c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	1dbb      	adds	r3, r7, #6
 80038d6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d000      	beq.n	80038e2 <HAL_UART_Transmit+0x1a>
 80038e0:	e096      	b.n	8003a10 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_UART_Transmit+0x28>
 80038e8:	1dbb      	adds	r3, r7, #6
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e08e      	b.n	8003a12 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	015b      	lsls	r3, r3, #5
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d109      	bne.n	8003914 <HAL_UART_Transmit+0x4c>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2201      	movs	r2, #1
 800390c:	4013      	ands	r3, r2
 800390e:	d001      	beq.n	8003914 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e07e      	b.n	8003a12 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2274      	movs	r2, #116	; 0x74
 8003918:	5c9b      	ldrb	r3, [r3, r2]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_UART_Transmit+0x5a>
 800391e:	2302      	movs	r3, #2
 8003920:	e077      	b.n	8003a12 <HAL_UART_Transmit+0x14a>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2274      	movs	r2, #116	; 0x74
 8003926:	2101      	movs	r1, #1
 8003928:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2280      	movs	r2, #128	; 0x80
 800392e:	2100      	movs	r1, #0
 8003930:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2221      	movs	r2, #33	; 0x21
 8003936:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003938:	f7fe fe00 	bl	800253c <HAL_GetTick>
 800393c:	0003      	movs	r3, r0
 800393e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1dba      	adds	r2, r7, #6
 8003944:	2150      	movs	r1, #80	; 0x50
 8003946:	8812      	ldrh	r2, [r2, #0]
 8003948:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1dba      	adds	r2, r7, #6
 800394e:	2152      	movs	r1, #82	; 0x52
 8003950:	8812      	ldrh	r2, [r2, #0]
 8003952:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	015b      	lsls	r3, r3, #5
 800395c:	429a      	cmp	r2, r3
 800395e:	d108      	bne.n	8003972 <HAL_UART_Transmit+0xaa>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e003      	b.n	800397a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2274      	movs	r2, #116	; 0x74
 800397e:	2100      	movs	r1, #0
 8003980:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003982:	e02d      	b.n	80039e0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	0013      	movs	r3, r2
 800398e:	2200      	movs	r2, #0
 8003990:	2180      	movs	r1, #128	; 0x80
 8003992:	f000 fdbb 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 8003996:	1e03      	subs	r3, r0, #0
 8003998:	d001      	beq.n	800399e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e039      	b.n	8003a12 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	881a      	ldrh	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	05d2      	lsls	r2, r2, #23
 80039ae:	0dd2      	lsrs	r2, r2, #23
 80039b0:	b292      	uxth	r2, r2
 80039b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	3302      	adds	r3, #2
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e008      	b.n	80039ce <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	781a      	ldrb	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	b292      	uxth	r2, r2
 80039c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	3301      	adds	r3, #1
 80039cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2252      	movs	r2, #82	; 0x52
 80039d2:	5a9b      	ldrh	r3, [r3, r2]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b299      	uxth	r1, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2252      	movs	r2, #82	; 0x52
 80039de:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2252      	movs	r2, #82	; 0x52
 80039e4:	5a9b      	ldrh	r3, [r3, r2]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1cb      	bne.n	8003984 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	0013      	movs	r3, r2
 80039f6:	2200      	movs	r2, #0
 80039f8:	2140      	movs	r1, #64	; 0x40
 80039fa:	f000 fd87 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 80039fe:	1e03      	subs	r3, r0, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e005      	b.n	8003a12 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e000      	b.n	8003a12 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
  }
}
 8003a12:	0018      	movs	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b008      	add	sp, #32
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b088      	sub	sp, #32
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	1dbb      	adds	r3, r7, #6
 8003a26:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d150      	bne.n	8003ad2 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_UART_Receive_IT+0x24>
 8003a36:	1dbb      	adds	r3, r7, #6
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e048      	b.n	8003ad4 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	015b      	lsls	r3, r3, #5
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d109      	bne.n	8003a62 <HAL_UART_Receive_IT+0x48>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d105      	bne.n	8003a62 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	d001      	beq.n	8003a62 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e038      	b.n	8003ad4 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2274      	movs	r2, #116	; 0x74
 8003a66:	5c9b      	ldrb	r3, [r3, r2]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_UART_Receive_IT+0x56>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e031      	b.n	8003ad4 <HAL_UART_Receive_IT+0xba>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2274      	movs	r2, #116	; 0x74
 8003a74:	2101      	movs	r1, #1
 8003a76:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d019      	beq.n	8003ac0 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a90:	613b      	str	r3, [r7, #16]
  return(result);
 8003a92:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	2301      	movs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f383 8810 	msr	PRIMASK, r3
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2180      	movs	r1, #128	; 0x80
 8003aae:	04c9      	lsls	r1, r1, #19
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	f383 8810 	msr	PRIMASK, r3
}
 8003abe:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ac0:	1dbb      	adds	r3, r7, #6
 8003ac2:	881a      	ldrh	r2, [r3, #0]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 fde3 	bl	8004694 <UART_Start_Receive_IT>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	e000      	b.n	8003ad4 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b008      	add	sp, #32
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b0ab      	sub	sp, #172	; 0xac
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	22a4      	movs	r2, #164	; 0xa4
 8003aec:	18b9      	adds	r1, r7, r2
 8003aee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	20a0      	movs	r0, #160	; 0xa0
 8003af8:	1839      	adds	r1, r7, r0
 8003afa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	219c      	movs	r1, #156	; 0x9c
 8003b04:	1879      	adds	r1, r7, r1
 8003b06:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b08:	0011      	movs	r1, r2
 8003b0a:	18bb      	adds	r3, r7, r2
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a99      	ldr	r2, [pc, #612]	; (8003d74 <HAL_UART_IRQHandler+0x298>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	2298      	movs	r2, #152	; 0x98
 8003b14:	18bc      	adds	r4, r7, r2
 8003b16:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003b18:	18bb      	adds	r3, r7, r2
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d114      	bne.n	8003b4a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2220      	movs	r2, #32
 8003b26:	4013      	ands	r3, r2
 8003b28:	d00f      	beq.n	8003b4a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b2a:	183b      	adds	r3, r7, r0
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	4013      	ands	r3, r2
 8003b32:	d00a      	beq.n	8003b4a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d100      	bne.n	8003b3e <HAL_UART_IRQHandler+0x62>
 8003b3c:	e27e      	b.n	800403c <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	0010      	movs	r0, r2
 8003b46:	4798      	blx	r3
      }
      return;
 8003b48:	e278      	b.n	800403c <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b4a:	2398      	movs	r3, #152	; 0x98
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d100      	bne.n	8003b56 <HAL_UART_IRQHandler+0x7a>
 8003b54:	e114      	b.n	8003d80 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b56:	239c      	movs	r3, #156	; 0x9c
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d106      	bne.n	8003b70 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b62:	23a0      	movs	r3, #160	; 0xa0
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a83      	ldr	r2, [pc, #524]	; (8003d78 <HAL_UART_IRQHandler+0x29c>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d100      	bne.n	8003b70 <HAL_UART_IRQHandler+0x94>
 8003b6e:	e107      	b.n	8003d80 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b70:	23a4      	movs	r3, #164	; 0xa4
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2201      	movs	r2, #1
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d012      	beq.n	8003ba2 <HAL_UART_IRQHandler+0xc6>
 8003b7c:	23a0      	movs	r3, #160	; 0xa0
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4013      	ands	r3, r2
 8003b88:	d00b      	beq.n	8003ba2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2280      	movs	r2, #128	; 0x80
 8003b96:	589b      	ldr	r3, [r3, r2]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2180      	movs	r1, #128	; 0x80
 8003ba0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ba2:	23a4      	movs	r3, #164	; 0xa4
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	4013      	ands	r3, r2
 8003bac:	d011      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xf6>
 8003bae:	239c      	movs	r3, #156	; 0x9c
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2280      	movs	r2, #128	; 0x80
 8003bc6:	589b      	ldr	r3, [r3, r2]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2180      	movs	r1, #128	; 0x80
 8003bd0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bd2:	23a4      	movs	r3, #164	; 0xa4
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d011      	beq.n	8003c02 <HAL_UART_IRQHandler+0x126>
 8003bde:	239c      	movs	r3, #156	; 0x9c
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2201      	movs	r2, #1
 8003be6:	4013      	ands	r3, r2
 8003be8:	d00b      	beq.n	8003c02 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2204      	movs	r2, #4
 8003bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2280      	movs	r2, #128	; 0x80
 8003bf6:	589b      	ldr	r3, [r3, r2]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2180      	movs	r1, #128	; 0x80
 8003c00:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c02:	23a4      	movs	r3, #164	; 0xa4
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d017      	beq.n	8003c3e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c0e:	23a0      	movs	r3, #160	; 0xa0
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2220      	movs	r2, #32
 8003c16:	4013      	ands	r3, r2
 8003c18:	d105      	bne.n	8003c26 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c1a:	239c      	movs	r3, #156	; 0x9c
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2201      	movs	r2, #1
 8003c22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c24:	d00b      	beq.n	8003c3e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	589b      	ldr	r3, [r3, r2]
 8003c34:	2208      	movs	r2, #8
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2180      	movs	r1, #128	; 0x80
 8003c3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c3e:	23a4      	movs	r3, #164	; 0xa4
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	2380      	movs	r3, #128	; 0x80
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d013      	beq.n	8003c74 <HAL_UART_IRQHandler+0x198>
 8003c4c:	23a0      	movs	r3, #160	; 0xa0
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	04db      	lsls	r3, r3, #19
 8003c56:	4013      	ands	r3, r2
 8003c58:	d00c      	beq.n	8003c74 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2280      	movs	r2, #128	; 0x80
 8003c60:	0112      	lsls	r2, r2, #4
 8003c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	589b      	ldr	r3, [r3, r2]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2180      	movs	r1, #128	; 0x80
 8003c72:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2280      	movs	r2, #128	; 0x80
 8003c78:	589b      	ldr	r3, [r3, r2]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d100      	bne.n	8003c80 <HAL_UART_IRQHandler+0x1a4>
 8003c7e:	e1df      	b.n	8004040 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c80:	23a4      	movs	r3, #164	; 0xa4
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2220      	movs	r2, #32
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d00e      	beq.n	8003caa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c8c:	23a0      	movs	r3, #160	; 0xa0
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2220      	movs	r2, #32
 8003c94:	4013      	ands	r3, r2
 8003c96:	d008      	beq.n	8003caa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d004      	beq.n	8003caa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	0010      	movs	r0, r2
 8003ca8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2280      	movs	r2, #128	; 0x80
 8003cae:	589b      	ldr	r3, [r3, r2]
 8003cb0:	2194      	movs	r1, #148	; 0x94
 8003cb2:	187a      	adds	r2, r7, r1
 8003cb4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2240      	movs	r2, #64	; 0x40
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d004      	beq.n	8003cce <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cc4:	187b      	adds	r3, r7, r1
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2228      	movs	r2, #40	; 0x28
 8003cca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ccc:	d047      	beq.n	8003d5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f000 fd7b 	bl	80047cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2240      	movs	r2, #64	; 0x40
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d137      	bne.n	8003d54 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cec:	2090      	movs	r0, #144	; 0x90
 8003cee:	183a      	adds	r2, r7, r0
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cf8:	f383 8810 	msr	PRIMASK, r3
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2140      	movs	r1, #64	; 0x40
 8003d0a:	438a      	bics	r2, r1
 8003d0c:	609a      	str	r2, [r3, #8]
 8003d0e:	183b      	adds	r3, r7, r0
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d16:	f383 8810 	msr	PRIMASK, r3
}
 8003d1a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d012      	beq.n	8003d4a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <HAL_UART_IRQHandler+0x2a0>)
 8003d2a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7fe fd8f 	bl	8002854 <HAL_DMA_Abort_IT>
 8003d36:	1e03      	subs	r3, r0, #0
 8003d38:	d01a      	beq.n	8003d70 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	0018      	movs	r0, r3
 8003d46:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	e012      	b.n	8003d70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 f98d 	bl	800406c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d52:	e00d      	b.n	8003d70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 f988 	bl	800406c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	e008      	b.n	8003d70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 f983 	bl	800406c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2280      	movs	r2, #128	; 0x80
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003d6e:	e167      	b.n	8004040 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d70:	46c0      	nop			; (mov r8, r8)
    return;
 8003d72:	e165      	b.n	8004040 <HAL_UART_IRQHandler+0x564>
 8003d74:	0000080f 	.word	0x0000080f
 8003d78:	04000120 	.word	0x04000120
 8003d7c:	08004891 	.word	0x08004891

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d000      	beq.n	8003d8a <HAL_UART_IRQHandler+0x2ae>
 8003d88:	e131      	b.n	8003fee <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d8a:	23a4      	movs	r3, #164	; 0xa4
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2210      	movs	r2, #16
 8003d92:	4013      	ands	r3, r2
 8003d94:	d100      	bne.n	8003d98 <HAL_UART_IRQHandler+0x2bc>
 8003d96:	e12a      	b.n	8003fee <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d98:	23a0      	movs	r3, #160	; 0xa0
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2210      	movs	r2, #16
 8003da0:	4013      	ands	r3, r2
 8003da2:	d100      	bne.n	8003da6 <HAL_UART_IRQHandler+0x2ca>
 8003da4:	e123      	b.n	8003fee <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2210      	movs	r2, #16
 8003dac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2240      	movs	r2, #64	; 0x40
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d000      	beq.n	8003dbe <HAL_UART_IRQHandler+0x2e2>
 8003dbc:	e09b      	b.n	8003ef6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	217e      	movs	r1, #126	; 0x7e
 8003dc8:	187b      	adds	r3, r7, r1
 8003dca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003dcc:	187b      	adds	r3, r7, r1
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d100      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x2fa>
 8003dd4:	e136      	b.n	8004044 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2258      	movs	r2, #88	; 0x58
 8003dda:	5a9b      	ldrh	r3, [r3, r2]
 8003ddc:	187a      	adds	r2, r7, r1
 8003dde:	8812      	ldrh	r2, [r2, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d300      	bcc.n	8003de6 <HAL_UART_IRQHandler+0x30a>
 8003de4:	e12e      	b.n	8004044 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	187a      	adds	r2, r7, r1
 8003dea:	215a      	movs	r1, #90	; 0x5a
 8003dec:	8812      	ldrh	r2, [r2, #0]
 8003dee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d06e      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e02:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e04:	2301      	movs	r3, #1
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	f383 8810 	msr	PRIMASK, r3
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	498e      	ldr	r1, [pc, #568]	; (8004054 <HAL_UART_IRQHandler+0x578>)
 8003e1c:	400a      	ands	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e26:	f383 8810 	msr	PRIMASK, r3
}
 8003e2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e34:	677b      	str	r3, [r7, #116]	; 0x74
 8003e36:	2301      	movs	r3, #1
 8003e38:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e3c:	f383 8810 	msr	PRIMASK, r3
}
 8003e40:	46c0      	nop			; (mov r8, r8)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	438a      	bics	r2, r1
 8003e50:	609a      	str	r2, [r3, #8]
 8003e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e54:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e58:	f383 8810 	msr	PRIMASK, r3
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e62:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e66:	673b      	str	r3, [r7, #112]	; 0x70
 8003e68:	2301      	movs	r3, #1
 8003e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e6e:	f383 8810 	msr	PRIMASK, r3
}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2140      	movs	r1, #64	; 0x40
 8003e80:	438a      	bics	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e86:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e8a:	f383 8810 	msr	PRIMASK, r3
}
 8003e8e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eac:	f383 8810 	msr	PRIMASK, r3
}
 8003eb0:	46c0      	nop			; (mov r8, r8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2110      	movs	r1, #16
 8003ebe:	438a      	bics	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec8:	f383 8810 	msr	PRIMASK, r3
}
 8003ecc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7fe fc86 	bl	80027e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2258      	movs	r2, #88	; 0x58
 8003edc:	5a9a      	ldrh	r2, [r3, r2]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	215a      	movs	r1, #90	; 0x5a
 8003ee2:	5a5b      	ldrh	r3, [r3, r1]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	0011      	movs	r1, r2
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f000 f8c4 	bl	800407c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ef4:	e0a6      	b.n	8004044 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2258      	movs	r2, #88	; 0x58
 8003efa:	5a99      	ldrh	r1, [r3, r2]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	225a      	movs	r2, #90	; 0x5a
 8003f00:	5a9b      	ldrh	r3, [r3, r2]
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	208e      	movs	r0, #142	; 0x8e
 8003f06:	183b      	adds	r3, r7, r0
 8003f08:	1a8a      	subs	r2, r1, r2
 8003f0a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	225a      	movs	r2, #90	; 0x5a
 8003f10:	5a9b      	ldrh	r3, [r3, r2]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d100      	bne.n	8003f1a <HAL_UART_IRQHandler+0x43e>
 8003f18:	e096      	b.n	8004048 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8003f1a:	183b      	adds	r3, r7, r0
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d100      	bne.n	8003f24 <HAL_UART_IRQHandler+0x448>
 8003f22:	e091      	b.n	8004048 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f24:	f3ef 8310 	mrs	r3, PRIMASK
 8003f28:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2c:	2488      	movs	r4, #136	; 0x88
 8003f2e:	193a      	adds	r2, r7, r4
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	2301      	movs	r3, #1
 8003f34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f383 8810 	msr	PRIMASK, r3
}
 8003f3c:	46c0      	nop			; (mov r8, r8)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4943      	ldr	r1, [pc, #268]	; (8004058 <HAL_UART_IRQHandler+0x57c>)
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	193b      	adds	r3, r7, r4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f383 8810 	msr	PRIMASK, r3
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f60:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f62:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f64:	2484      	movs	r4, #132	; 0x84
 8003f66:	193a      	adds	r2, r7, r4
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f383 8810 	msr	PRIMASK, r3
}
 8003f74:	46c0      	nop			; (mov r8, r8)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	438a      	bics	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
 8003f86:	193b      	adds	r3, r7, r4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	f383 8810 	msr	PRIMASK, r3
}
 8003f92:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fae:	2480      	movs	r4, #128	; 0x80
 8003fb0:	193a      	adds	r2, r7, r4
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	f383 8810 	msr	PRIMASK, r3
}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2110      	movs	r1, #16
 8003fcc:	438a      	bics	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	193b      	adds	r3, r7, r4
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd8:	f383 8810 	msr	PRIMASK, r3
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fde:	183b      	adds	r3, r7, r0
 8003fe0:	881a      	ldrh	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	0011      	movs	r1, r2
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 f848 	bl	800407c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fec:	e02c      	b.n	8004048 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fee:	23a4      	movs	r3, #164	; 0xa4
 8003ff0:	18fb      	adds	r3, r7, r3
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d00f      	beq.n	800401a <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ffa:	23a0      	movs	r3, #160	; 0xa0
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	4013      	ands	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01e      	beq.n	800404c <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	0010      	movs	r0, r2
 8004016:	4798      	blx	r3
    }
    return;
 8004018:	e018      	b.n	800404c <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800401a:	23a4      	movs	r3, #164	; 0xa4
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2240      	movs	r2, #64	; 0x40
 8004022:	4013      	ands	r3, r2
 8004024:	d013      	beq.n	800404e <HAL_UART_IRQHandler+0x572>
 8004026:	23a0      	movs	r3, #160	; 0xa0
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2240      	movs	r2, #64	; 0x40
 800402e:	4013      	ands	r3, r2
 8004030:	d00d      	beq.n	800404e <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	0018      	movs	r0, r3
 8004036:	f000 fc42 	bl	80048be <UART_EndTransmit_IT>
    return;
 800403a:	e008      	b.n	800404e <HAL_UART_IRQHandler+0x572>
      return;
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	e006      	b.n	800404e <HAL_UART_IRQHandler+0x572>
    return;
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	e004      	b.n	800404e <HAL_UART_IRQHandler+0x572>
      return;
 8004044:	46c0      	nop			; (mov r8, r8)
 8004046:	e002      	b.n	800404e <HAL_UART_IRQHandler+0x572>
      return;
 8004048:	46c0      	nop			; (mov r8, r8)
 800404a:	e000      	b.n	800404e <HAL_UART_IRQHandler+0x572>
    return;
 800404c:	46c0      	nop			; (mov r8, r8)
  }

}
 800404e:	46bd      	mov	sp, r7
 8004050:	b02b      	add	sp, #172	; 0xac
 8004052:	bd90      	pop	{r4, r7, pc}
 8004054:	fffffeff 	.word	0xfffffeff
 8004058:	fffffedf 	.word	0xfffffedf

0800405c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	b002      	add	sp, #8
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b002      	add	sp, #8
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	000a      	movs	r2, r1
 8004086:	1cbb      	adds	r3, r7, #2
 8004088:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	b002      	add	sp, #8
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800409c:	231e      	movs	r3, #30
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a8d      	ldr	r2, [pc, #564]	; (80042f8 <UART_SetConfig+0x264>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	0019      	movs	r1, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4a88      	ldr	r2, [pc, #544]	; (80042fc <UART_SetConfig+0x268>)
 80040da:	4013      	ands	r3, r2
 80040dc:	0019      	movs	r1, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a7f      	ldr	r2, [pc, #508]	; (8004300 <UART_SetConfig+0x26c>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	430a      	orrs	r2, r1
 800410e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a7b      	ldr	r2, [pc, #492]	; (8004304 <UART_SetConfig+0x270>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d127      	bne.n	800416a <UART_SetConfig+0xd6>
 800411a:	4b7b      	ldr	r3, [pc, #492]	; (8004308 <UART_SetConfig+0x274>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	2203      	movs	r2, #3
 8004120:	4013      	ands	r3, r2
 8004122:	2b03      	cmp	r3, #3
 8004124:	d00d      	beq.n	8004142 <UART_SetConfig+0xae>
 8004126:	d81b      	bhi.n	8004160 <UART_SetConfig+0xcc>
 8004128:	2b02      	cmp	r3, #2
 800412a:	d014      	beq.n	8004156 <UART_SetConfig+0xc2>
 800412c:	d818      	bhi.n	8004160 <UART_SetConfig+0xcc>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <UART_SetConfig+0xa4>
 8004132:	2b01      	cmp	r3, #1
 8004134:	d00a      	beq.n	800414c <UART_SetConfig+0xb8>
 8004136:	e013      	b.n	8004160 <UART_SetConfig+0xcc>
 8004138:	231f      	movs	r3, #31
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
 8004140:	e021      	b.n	8004186 <UART_SetConfig+0xf2>
 8004142:	231f      	movs	r3, #31
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2202      	movs	r2, #2
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e01c      	b.n	8004186 <UART_SetConfig+0xf2>
 800414c:	231f      	movs	r3, #31
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	2204      	movs	r2, #4
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e017      	b.n	8004186 <UART_SetConfig+0xf2>
 8004156:	231f      	movs	r3, #31
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	2208      	movs	r2, #8
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e012      	b.n	8004186 <UART_SetConfig+0xf2>
 8004160:	231f      	movs	r3, #31
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	2210      	movs	r2, #16
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e00d      	b.n	8004186 <UART_SetConfig+0xf2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a67      	ldr	r2, [pc, #412]	; (800430c <UART_SetConfig+0x278>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d104      	bne.n	800417e <UART_SetConfig+0xea>
 8004174:	231f      	movs	r3, #31
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	2200      	movs	r2, #0
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e003      	b.n	8004186 <UART_SetConfig+0xf2>
 800417e:	231f      	movs	r3, #31
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	2210      	movs	r2, #16
 8004184:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	429a      	cmp	r2, r3
 8004190:	d15d      	bne.n	800424e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004192:	231f      	movs	r3, #31
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b08      	cmp	r3, #8
 800419a:	d015      	beq.n	80041c8 <UART_SetConfig+0x134>
 800419c:	dc18      	bgt.n	80041d0 <UART_SetConfig+0x13c>
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d00d      	beq.n	80041be <UART_SetConfig+0x12a>
 80041a2:	dc15      	bgt.n	80041d0 <UART_SetConfig+0x13c>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <UART_SetConfig+0x11a>
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d005      	beq.n	80041b8 <UART_SetConfig+0x124>
 80041ac:	e010      	b.n	80041d0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ae:	f7ff fa53 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 80041b2:	0003      	movs	r3, r0
 80041b4:	61bb      	str	r3, [r7, #24]
        break;
 80041b6:	e012      	b.n	80041de <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b8:	4b55      	ldr	r3, [pc, #340]	; (8004310 <UART_SetConfig+0x27c>)
 80041ba:	61bb      	str	r3, [r7, #24]
        break;
 80041bc:	e00f      	b.n	80041de <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041be:	f7ff f9dd 	bl	800357c <HAL_RCC_GetSysClockFreq>
 80041c2:	0003      	movs	r3, r0
 80041c4:	61bb      	str	r3, [r7, #24]
        break;
 80041c6:	e00a      	b.n	80041de <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	61bb      	str	r3, [r7, #24]
        break;
 80041ce:	e006      	b.n	80041de <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041d4:	231e      	movs	r3, #30
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
        break;
 80041dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d100      	bne.n	80041e6 <UART_SetConfig+0x152>
 80041e4:	e07b      	b.n	80042de <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	005a      	lsls	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	085b      	lsrs	r3, r3, #1
 80041f0:	18d2      	adds	r2, r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	0019      	movs	r1, r3
 80041f8:	0010      	movs	r0, r2
 80041fa:	f7fb ff8d 	bl	8000118 <__udivsi3>
 80041fe:	0003      	movs	r3, r0
 8004200:	b29b      	uxth	r3, r3
 8004202:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	d91c      	bls.n	8004244 <UART_SetConfig+0x1b0>
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	025b      	lsls	r3, r3, #9
 8004210:	429a      	cmp	r2, r3
 8004212:	d217      	bcs.n	8004244 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	b29a      	uxth	r2, r3
 8004218:	200e      	movs	r0, #14
 800421a:	183b      	adds	r3, r7, r0
 800421c:	210f      	movs	r1, #15
 800421e:	438a      	bics	r2, r1
 8004220:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	b29b      	uxth	r3, r3
 8004228:	2207      	movs	r2, #7
 800422a:	4013      	ands	r3, r2
 800422c:	b299      	uxth	r1, r3
 800422e:	183b      	adds	r3, r7, r0
 8004230:	183a      	adds	r2, r7, r0
 8004232:	8812      	ldrh	r2, [r2, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	183a      	adds	r2, r7, r0
 800423e:	8812      	ldrh	r2, [r2, #0]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	e04c      	b.n	80042de <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004244:	231e      	movs	r3, #30
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	e047      	b.n	80042de <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800424e:	231f      	movs	r3, #31
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d015      	beq.n	8004284 <UART_SetConfig+0x1f0>
 8004258:	dc18      	bgt.n	800428c <UART_SetConfig+0x1f8>
 800425a:	2b04      	cmp	r3, #4
 800425c:	d00d      	beq.n	800427a <UART_SetConfig+0x1e6>
 800425e:	dc15      	bgt.n	800428c <UART_SetConfig+0x1f8>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <UART_SetConfig+0x1d6>
 8004264:	2b02      	cmp	r3, #2
 8004266:	d005      	beq.n	8004274 <UART_SetConfig+0x1e0>
 8004268:	e010      	b.n	800428c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800426a:	f7ff f9f5 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 800426e:	0003      	movs	r3, r0
 8004270:	61bb      	str	r3, [r7, #24]
        break;
 8004272:	e012      	b.n	800429a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004274:	4b26      	ldr	r3, [pc, #152]	; (8004310 <UART_SetConfig+0x27c>)
 8004276:	61bb      	str	r3, [r7, #24]
        break;
 8004278:	e00f      	b.n	800429a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800427a:	f7ff f97f 	bl	800357c <HAL_RCC_GetSysClockFreq>
 800427e:	0003      	movs	r3, r0
 8004280:	61bb      	str	r3, [r7, #24]
        break;
 8004282:	e00a      	b.n	800429a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	61bb      	str	r3, [r7, #24]
        break;
 800428a:	e006      	b.n	800429a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004290:	231e      	movs	r3, #30
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
        break;
 8004298:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01e      	beq.n	80042de <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	085a      	lsrs	r2, r3, #1
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	18d2      	adds	r2, r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	0019      	movs	r1, r3
 80042b0:	0010      	movs	r0, r2
 80042b2:	f7fb ff31 	bl	8000118 <__udivsi3>
 80042b6:	0003      	movs	r3, r0
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2b0f      	cmp	r3, #15
 80042c0:	d909      	bls.n	80042d6 <UART_SetConfig+0x242>
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	025b      	lsls	r3, r3, #9
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d204      	bcs.n	80042d6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	e003      	b.n	80042de <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80042d6:	231e      	movs	r3, #30
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042ea:	231e      	movs	r3, #30
 80042ec:	18fb      	adds	r3, r7, r3
 80042ee:	781b      	ldrb	r3, [r3, #0]
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b008      	add	sp, #32
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	ffff69f3 	.word	0xffff69f3
 80042fc:	ffffcfff 	.word	0xffffcfff
 8004300:	fffff4ff 	.word	0xfffff4ff
 8004304:	40013800 	.word	0x40013800
 8004308:	40021000 	.word	0x40021000
 800430c:	40004400 	.word	0x40004400
 8004310:	007a1200 	.word	0x007a1200

08004314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	2201      	movs	r2, #1
 8004322:	4013      	ands	r3, r2
 8004324:	d00b      	beq.n	800433e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	4a4a      	ldr	r2, [pc, #296]	; (8004458 <UART_AdvFeatureConfig+0x144>)
 800432e:	4013      	ands	r3, r2
 8004330:	0019      	movs	r1, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	2202      	movs	r2, #2
 8004344:	4013      	ands	r3, r2
 8004346:	d00b      	beq.n	8004360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4a43      	ldr	r2, [pc, #268]	; (800445c <UART_AdvFeatureConfig+0x148>)
 8004350:	4013      	ands	r3, r2
 8004352:	0019      	movs	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	2204      	movs	r2, #4
 8004366:	4013      	ands	r3, r2
 8004368:	d00b      	beq.n	8004382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4a3b      	ldr	r2, [pc, #236]	; (8004460 <UART_AdvFeatureConfig+0x14c>)
 8004372:	4013      	ands	r3, r2
 8004374:	0019      	movs	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2208      	movs	r2, #8
 8004388:	4013      	ands	r3, r2
 800438a:	d00b      	beq.n	80043a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4a34      	ldr	r2, [pc, #208]	; (8004464 <UART_AdvFeatureConfig+0x150>)
 8004394:	4013      	ands	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2210      	movs	r2, #16
 80043aa:	4013      	ands	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a2c      	ldr	r2, [pc, #176]	; (8004468 <UART_AdvFeatureConfig+0x154>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	0019      	movs	r1, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	2220      	movs	r2, #32
 80043cc:	4013      	ands	r3, r2
 80043ce:	d00b      	beq.n	80043e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	4a25      	ldr	r2, [pc, #148]	; (800446c <UART_AdvFeatureConfig+0x158>)
 80043d8:	4013      	ands	r3, r2
 80043da:	0019      	movs	r1, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	2240      	movs	r2, #64	; 0x40
 80043ee:	4013      	ands	r3, r2
 80043f0:	d01d      	beq.n	800442e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <UART_AdvFeatureConfig+0x15c>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	0019      	movs	r1, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	035b      	lsls	r3, r3, #13
 8004412:	429a      	cmp	r2, r3
 8004414:	d10b      	bne.n	800442e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	4a15      	ldr	r2, [pc, #84]	; (8004474 <UART_AdvFeatureConfig+0x160>)
 800441e:	4013      	ands	r3, r2
 8004420:	0019      	movs	r1, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	2280      	movs	r2, #128	; 0x80
 8004434:	4013      	ands	r3, r2
 8004436:	d00b      	beq.n	8004450 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4a0e      	ldr	r2, [pc, #56]	; (8004478 <UART_AdvFeatureConfig+0x164>)
 8004440:	4013      	ands	r3, r2
 8004442:	0019      	movs	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  }
}
 8004450:	46c0      	nop			; (mov r8, r8)
 8004452:	46bd      	mov	sp, r7
 8004454:	b002      	add	sp, #8
 8004456:	bd80      	pop	{r7, pc}
 8004458:	fffdffff 	.word	0xfffdffff
 800445c:	fffeffff 	.word	0xfffeffff
 8004460:	fffbffff 	.word	0xfffbffff
 8004464:	ffff7fff 	.word	0xffff7fff
 8004468:	ffffefff 	.word	0xffffefff
 800446c:	ffffdfff 	.word	0xffffdfff
 8004470:	ffefffff 	.word	0xffefffff
 8004474:	ff9fffff 	.word	0xff9fffff
 8004478:	fff7ffff 	.word	0xfff7ffff

0800447c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af02      	add	r7, sp, #8
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	2100      	movs	r1, #0
 800448a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800448c:	f7fe f856 	bl	800253c <HAL_GetTick>
 8004490:	0003      	movs	r3, r0
 8004492:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2208      	movs	r2, #8
 800449c:	4013      	ands	r3, r2
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d10c      	bne.n	80044bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2280      	movs	r2, #128	; 0x80
 80044a6:	0391      	lsls	r1, r2, #14
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4a17      	ldr	r2, [pc, #92]	; (8004508 <UART_CheckIdleState+0x8c>)
 80044ac:	9200      	str	r2, [sp, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f000 f82c 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 80044b4:	1e03      	subs	r3, r0, #0
 80044b6:	d001      	beq.n	80044bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e021      	b.n	8004500 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2204      	movs	r2, #4
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d10c      	bne.n	80044e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2280      	movs	r2, #128	; 0x80
 80044ce:	03d1      	lsls	r1, r2, #15
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	4a0d      	ldr	r2, [pc, #52]	; (8004508 <UART_CheckIdleState+0x8c>)
 80044d4:	9200      	str	r2, [sp, #0]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f000 f818 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 80044dc:	1e03      	subs	r3, r0, #0
 80044de:	d001      	beq.n	80044e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e00d      	b.n	8004500 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2274      	movs	r2, #116	; 0x74
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b004      	add	sp, #16
 8004506:	bd80      	pop	{r7, pc}
 8004508:	01ffffff 	.word	0x01ffffff

0800450c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b094      	sub	sp, #80	; 0x50
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	1dfb      	adds	r3, r7, #7
 800451a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451c:	e0a3      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004520:	3301      	adds	r3, #1
 8004522:	d100      	bne.n	8004526 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004524:	e09f      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004526:	f7fe f809 	bl	800253c <HAL_GetTick>
 800452a:	0002      	movs	r2, r0
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004532:	429a      	cmp	r2, r3
 8004534:	d302      	bcc.n	800453c <UART_WaitOnFlagUntilTimeout+0x30>
 8004536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004538:	2b00      	cmp	r3, #0
 800453a:	d13d      	bne.n	80045b8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800453c:	f3ef 8310 	mrs	r3, PRIMASK
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004544:	647b      	str	r3, [r7, #68]	; 0x44
 8004546:	2301      	movs	r3, #1
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454c:	f383 8810 	msr	PRIMASK, r3
}
 8004550:	46c0      	nop			; (mov r8, r8)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	494c      	ldr	r1, [pc, #304]	; (8004690 <UART_WaitOnFlagUntilTimeout+0x184>)
 800455e:	400a      	ands	r2, r1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004564:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	f383 8810 	msr	PRIMASK, r3
}
 800456c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456e:	f3ef 8310 	mrs	r3, PRIMASK
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004576:	643b      	str	r3, [r7, #64]	; 0x40
 8004578:	2301      	movs	r3, #1
 800457a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457e:	f383 8810 	msr	PRIMASK, r3
}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2101      	movs	r1, #1
 8004590:	438a      	bics	r2, r1
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004596:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800459a:	f383 8810 	msr	PRIMASK, r3
}
 800459e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2274      	movs	r2, #116	; 0x74
 80045b0:	2100      	movs	r1, #0
 80045b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e067      	b.n	8004688 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2204      	movs	r2, #4
 80045c0:	4013      	ands	r3, r2
 80045c2:	d050      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69da      	ldr	r2, [r3, #28]
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	401a      	ands	r2, r3
 80045d0:	2380      	movs	r3, #128	; 0x80
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d146      	bne.n	8004666 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2280      	movs	r2, #128	; 0x80
 80045de:	0112      	lsls	r2, r2, #4
 80045e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e2:	f3ef 8310 	mrs	r3, PRIMASK
 80045e6:	613b      	str	r3, [r7, #16]
  return(result);
 80045e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ec:	2301      	movs	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f383 8810 	msr	PRIMASK, r3
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4923      	ldr	r1, [pc, #140]	; (8004690 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004604:	400a      	ands	r2, r1
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f383 8810 	msr	PRIMASK, r3
}
 8004612:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004614:	f3ef 8310 	mrs	r3, PRIMASK
 8004618:	61fb      	str	r3, [r7, #28]
  return(result);
 800461a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461c:	64bb      	str	r3, [r7, #72]	; 0x48
 800461e:	2301      	movs	r3, #1
 8004620:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	f383 8810 	msr	PRIMASK, r3
}
 8004628:	46c0      	nop			; (mov r8, r8)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2101      	movs	r1, #1
 8004636:	438a      	bics	r2, r1
 8004638:	609a      	str	r2, [r3, #8]
 800463a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	f383 8810 	msr	PRIMASK, r3
}
 8004644:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2280      	movs	r2, #128	; 0x80
 8004656:	2120      	movs	r1, #32
 8004658:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2274      	movs	r2, #116	; 0x74
 800465e:	2100      	movs	r1, #0
 8004660:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e010      	b.n	8004688 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	425a      	negs	r2, r3
 8004676:	4153      	adcs	r3, r2
 8004678:	b2db      	uxtb	r3, r3
 800467a:	001a      	movs	r2, r3
 800467c:	1dfb      	adds	r3, r7, #7
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d100      	bne.n	8004686 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004684:	e74b      	b.n	800451e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	0018      	movs	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	b014      	add	sp, #80	; 0x50
 800468e:	bd80      	pop	{r7, pc}
 8004690:	fffffe5f 	.word	0xfffffe5f

08004694 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08c      	sub	sp, #48	; 0x30
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	1dbb      	adds	r3, r7, #6
 80046a0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	1dba      	adds	r2, r7, #6
 80046ac:	2158      	movs	r1, #88	; 0x58
 80046ae:	8812      	ldrh	r2, [r2, #0]
 80046b0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1dba      	adds	r2, r7, #6
 80046b6:	215a      	movs	r1, #90	; 0x5a
 80046b8:	8812      	ldrh	r2, [r2, #0]
 80046ba:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	015b      	lsls	r3, r3, #5
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d10d      	bne.n	80046ea <UART_Start_Receive_IT+0x56>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d104      	bne.n	80046e0 <UART_Start_Receive_IT+0x4c>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	225c      	movs	r2, #92	; 0x5c
 80046da:	4939      	ldr	r1, [pc, #228]	; (80047c0 <UART_Start_Receive_IT+0x12c>)
 80046dc:	5299      	strh	r1, [r3, r2]
 80046de:	e01a      	b.n	8004716 <UART_Start_Receive_IT+0x82>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	225c      	movs	r2, #92	; 0x5c
 80046e4:	21ff      	movs	r1, #255	; 0xff
 80046e6:	5299      	strh	r1, [r3, r2]
 80046e8:	e015      	b.n	8004716 <UART_Start_Receive_IT+0x82>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10d      	bne.n	800470e <UART_Start_Receive_IT+0x7a>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d104      	bne.n	8004704 <UART_Start_Receive_IT+0x70>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	225c      	movs	r2, #92	; 0x5c
 80046fe:	21ff      	movs	r1, #255	; 0xff
 8004700:	5299      	strh	r1, [r3, r2]
 8004702:	e008      	b.n	8004716 <UART_Start_Receive_IT+0x82>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	225c      	movs	r2, #92	; 0x5c
 8004708:	217f      	movs	r1, #127	; 0x7f
 800470a:	5299      	strh	r1, [r3, r2]
 800470c:	e003      	b.n	8004716 <UART_Start_Receive_IT+0x82>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	225c      	movs	r2, #92	; 0x5c
 8004712:	2100      	movs	r1, #0
 8004714:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2280      	movs	r2, #128	; 0x80
 800471a:	2100      	movs	r1, #0
 800471c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2222      	movs	r2, #34	; 0x22
 8004722:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004724:	f3ef 8310 	mrs	r3, PRIMASK
 8004728:	61fb      	str	r3, [r7, #28]
  return(result);
 800472a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800472e:	2301      	movs	r3, #1
 8004730:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2101      	movs	r1, #1
 8004746:	430a      	orrs	r2, r1
 8004748:	609a      	str	r2, [r3, #8]
 800474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	015b      	lsls	r3, r3, #5
 800475e:	429a      	cmp	r2, r3
 8004760:	d107      	bne.n	8004772 <UART_Start_Receive_IT+0xde>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <UART_Start_Receive_IT+0x130>)
 800476e:	665a      	str	r2, [r3, #100]	; 0x64
 8004770:	e002      	b.n	8004778 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <UART_Start_Receive_IT+0x134>)
 8004776:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2274      	movs	r2, #116	; 0x74
 800477c:	2100      	movs	r1, #0
 800477e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004780:	f3ef 8310 	mrs	r3, PRIMASK
 8004784:	613b      	str	r3, [r7, #16]
  return(result);
 8004786:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
 800478a:	2301      	movs	r3, #1
 800478c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f383 8810 	msr	PRIMASK, r3
}
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2190      	movs	r1, #144	; 0x90
 80047a2:	0049      	lsls	r1, r1, #1
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f383 8810 	msr	PRIMASK, r3
}
 80047b2:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b00c      	add	sp, #48	; 0x30
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	000001ff 	.word	0x000001ff
 80047c4:	08004a7d 	.word	0x08004a7d
 80047c8:	08004915 	.word	0x08004915

080047cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08e      	sub	sp, #56	; 0x38
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d4:	f3ef 8310 	mrs	r3, PRIMASK
 80047d8:	617b      	str	r3, [r7, #20]
  return(result);
 80047da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
 80047de:	2301      	movs	r3, #1
 80047e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f383 8810 	msr	PRIMASK, r3
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4925      	ldr	r1, [pc, #148]	; (800488c <UART_EndRxTransfer+0xc0>)
 80047f6:	400a      	ands	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	f383 8810 	msr	PRIMASK, r3
}
 8004804:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004806:	f3ef 8310 	mrs	r3, PRIMASK
 800480a:	623b      	str	r3, [r7, #32]
  return(result);
 800480c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	633b      	str	r3, [r7, #48]	; 0x30
 8004810:	2301      	movs	r3, #1
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	f383 8810 	msr	PRIMASK, r3
}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2101      	movs	r1, #1
 8004828:	438a      	bics	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	f383 8810 	msr	PRIMASK, r3
}
 8004836:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483c:	2b01      	cmp	r3, #1
 800483e:	d118      	bne.n	8004872 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004840:	f3ef 8310 	mrs	r3, PRIMASK
 8004844:	60bb      	str	r3, [r7, #8]
  return(result);
 8004846:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800484a:	2301      	movs	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f383 8810 	msr	PRIMASK, r3
}
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2110      	movs	r1, #16
 8004862:	438a      	bics	r2, r1
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f383 8810 	msr	PRIMASK, r3
}
 8004870:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b00e      	add	sp, #56	; 0x38
 800488a:	bd80      	pop	{r7, pc}
 800488c:	fffffedf 	.word	0xfffffedf

08004890 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	225a      	movs	r2, #90	; 0x5a
 80048a2:	2100      	movs	r1, #0
 80048a4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2252      	movs	r2, #82	; 0x52
 80048aa:	2100      	movs	r1, #0
 80048ac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7ff fbdb 	bl	800406c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b004      	add	sp, #16
 80048bc:	bd80      	pop	{r7, pc}

080048be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b086      	sub	sp, #24
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80048cc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	2301      	movs	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f383 8810 	msr	PRIMASK, r3
}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2140      	movs	r1, #64	; 0x40
 80048e8:	438a      	bics	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f383 8810 	msr	PRIMASK, r3
}
 80048f6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	0018      	movs	r0, r3
 8004908:	f7ff fba8 	bl	800405c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800490c:	46c0      	nop			; (mov r8, r8)
 800490e:	46bd      	mov	sp, r7
 8004910:	b006      	add	sp, #24
 8004912:	bd80      	pop	{r7, pc}

08004914 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b090      	sub	sp, #64	; 0x40
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800491c:	203e      	movs	r0, #62	; 0x3e
 800491e:	183b      	adds	r3, r7, r0
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	215c      	movs	r1, #92	; 0x5c
 8004924:	5a52      	ldrh	r2, [r2, r1]
 8004926:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800492c:	2b22      	cmp	r3, #34	; 0x22
 800492e:	d000      	beq.n	8004932 <UART_RxISR_8BIT+0x1e>
 8004930:	e095      	b.n	8004a5e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	213c      	movs	r1, #60	; 0x3c
 8004938:	187b      	adds	r3, r7, r1
 800493a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800493c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800493e:	187b      	adds	r3, r7, r1
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	183b      	adds	r3, r7, r0
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b2d9      	uxtb	r1, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	400a      	ands	r2, r1
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	225a      	movs	r2, #90	; 0x5a
 8004962:	5a9b      	ldrh	r3, [r3, r2]
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b299      	uxth	r1, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	225a      	movs	r2, #90	; 0x5a
 800496e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	225a      	movs	r2, #90	; 0x5a
 8004974:	5a9b      	ldrh	r3, [r3, r2]
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d178      	bne.n	8004a6e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497c:	f3ef 8310 	mrs	r3, PRIMASK
 8004980:	61bb      	str	r3, [r7, #24]
  return(result);
 8004982:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004984:	63bb      	str	r3, [r7, #56]	; 0x38
 8004986:	2301      	movs	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f383 8810 	msr	PRIMASK, r3
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4936      	ldr	r1, [pc, #216]	; (8004a78 <UART_RxISR_8BIT+0x164>)
 800499e:	400a      	ands	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	f383 8810 	msr	PRIMASK, r3
}
 80049ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ae:	f3ef 8310 	mrs	r3, PRIMASK
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
 80049b8:	2301      	movs	r3, #1
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2101      	movs	r1, #1
 80049d0:	438a      	bics	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	f383 8810 	msr	PRIMASK, r3
}
 80049de:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d12f      	bne.n	8004a54 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fa:	f3ef 8310 	mrs	r3, PRIMASK
 80049fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a00:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a02:	633b      	str	r3, [r7, #48]	; 0x30
 8004a04:	2301      	movs	r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f383 8810 	msr	PRIMASK, r3
}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2110      	movs	r1, #16
 8004a1c:	438a      	bics	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f383 8810 	msr	PRIMASK, r3
}
 8004a2a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	2210      	movs	r2, #16
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b10      	cmp	r3, #16
 8004a38:	d103      	bne.n	8004a42 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2210      	movs	r2, #16
 8004a40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2258      	movs	r2, #88	; 0x58
 8004a46:	5a9a      	ldrh	r2, [r3, r2]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	0011      	movs	r1, r2
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7ff fb15 	bl	800407c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a52:	e00c      	b.n	8004a6e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7fb fbea 	bl	8000230 <HAL_UART_RxCpltCallback>
}
 8004a5c:	e007      	b.n	8004a6e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2108      	movs	r1, #8
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	619a      	str	r2, [r3, #24]
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b010      	add	sp, #64	; 0x40
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	fffffedf 	.word	0xfffffedf

08004a7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b090      	sub	sp, #64	; 0x40
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a84:	203e      	movs	r0, #62	; 0x3e
 8004a86:	183b      	adds	r3, r7, r0
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	215c      	movs	r1, #92	; 0x5c
 8004a8c:	5a52      	ldrh	r2, [r2, r1]
 8004a8e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a94:	2b22      	cmp	r3, #34	; 0x22
 8004a96:	d000      	beq.n	8004a9a <UART_RxISR_16BIT+0x1e>
 8004a98:	e095      	b.n	8004bc6 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	213c      	movs	r1, #60	; 0x3c
 8004aa0:	187b      	adds	r3, r7, r1
 8004aa2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004aa4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004aac:	187b      	adds	r3, r7, r1
 8004aae:	183a      	adds	r2, r7, r0
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	8812      	ldrh	r2, [r2, #0]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	1c9a      	adds	r2, r3, #2
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	225a      	movs	r2, #90	; 0x5a
 8004aca:	5a9b      	ldrh	r3, [r3, r2]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b299      	uxth	r1, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	225a      	movs	r2, #90	; 0x5a
 8004ad6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	225a      	movs	r2, #90	; 0x5a
 8004adc:	5a9b      	ldrh	r3, [r3, r2]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d178      	bne.n	8004bd6 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8004aea:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aec:	637b      	str	r3, [r7, #52]	; 0x34
 8004aee:	2301      	movs	r3, #1
 8004af0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f383 8810 	msr	PRIMASK, r3
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4936      	ldr	r1, [pc, #216]	; (8004be0 <UART_RxISR_16BIT+0x164>)
 8004b06:	400a      	ands	r2, r1
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f383 8810 	msr	PRIMASK, r3
}
 8004b14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b16:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1a:	623b      	str	r3, [r7, #32]
  return(result);
 8004b1c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b20:	2301      	movs	r3, #1
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	f383 8810 	msr	PRIMASK, r3
}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2101      	movs	r1, #1
 8004b38:	438a      	bics	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	f383 8810 	msr	PRIMASK, r3
}
 8004b46:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d12f      	bne.n	8004bbc <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b62:	f3ef 8310 	mrs	r3, PRIMASK
 8004b66:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b68:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f383 8810 	msr	PRIMASK, r3
}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2110      	movs	r1, #16
 8004b84:	438a      	bics	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f383 8810 	msr	PRIMASK, r3
}
 8004b92:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	2b10      	cmp	r3, #16
 8004ba0:	d103      	bne.n	8004baa <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2258      	movs	r2, #88	; 0x58
 8004bae:	5a9a      	ldrh	r2, [r3, r2]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0011      	movs	r1, r2
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7ff fa61 	bl	800407c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bba:	e00c      	b.n	8004bd6 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f7fb fb36 	bl	8000230 <HAL_UART_RxCpltCallback>
}
 8004bc4:	e007      	b.n	8004bd6 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699a      	ldr	r2, [r3, #24]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2108      	movs	r1, #8
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	619a      	str	r2, [r3, #24]
}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b010      	add	sp, #64	; 0x40
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	fffffedf 	.word	0xfffffedf

08004be4 <__libc_init_array>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	2600      	movs	r6, #0
 8004be8:	4d0c      	ldr	r5, [pc, #48]	; (8004c1c <__libc_init_array+0x38>)
 8004bea:	4c0d      	ldr	r4, [pc, #52]	; (8004c20 <__libc_init_array+0x3c>)
 8004bec:	1b64      	subs	r4, r4, r5
 8004bee:	10a4      	asrs	r4, r4, #2
 8004bf0:	42a6      	cmp	r6, r4
 8004bf2:	d109      	bne.n	8004c08 <__libc_init_array+0x24>
 8004bf4:	2600      	movs	r6, #0
 8004bf6:	f000 f821 	bl	8004c3c <_init>
 8004bfa:	4d0a      	ldr	r5, [pc, #40]	; (8004c24 <__libc_init_array+0x40>)
 8004bfc:	4c0a      	ldr	r4, [pc, #40]	; (8004c28 <__libc_init_array+0x44>)
 8004bfe:	1b64      	subs	r4, r4, r5
 8004c00:	10a4      	asrs	r4, r4, #2
 8004c02:	42a6      	cmp	r6, r4
 8004c04:	d105      	bne.n	8004c12 <__libc_init_array+0x2e>
 8004c06:	bd70      	pop	{r4, r5, r6, pc}
 8004c08:	00b3      	lsls	r3, r6, #2
 8004c0a:	58eb      	ldr	r3, [r5, r3]
 8004c0c:	4798      	blx	r3
 8004c0e:	3601      	adds	r6, #1
 8004c10:	e7ee      	b.n	8004bf0 <__libc_init_array+0xc>
 8004c12:	00b3      	lsls	r3, r6, #2
 8004c14:	58eb      	ldr	r3, [r5, r3]
 8004c16:	4798      	blx	r3
 8004c18:	3601      	adds	r6, #1
 8004c1a:	e7f2      	b.n	8004c02 <__libc_init_array+0x1e>
 8004c1c:	08004c8c 	.word	0x08004c8c
 8004c20:	08004c8c 	.word	0x08004c8c
 8004c24:	08004c8c 	.word	0x08004c8c
 8004c28:	08004c90 	.word	0x08004c90

08004c2c <memset>:
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	1882      	adds	r2, r0, r2
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d100      	bne.n	8004c36 <memset+0xa>
 8004c34:	4770      	bx	lr
 8004c36:	7019      	strb	r1, [r3, #0]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	e7f9      	b.n	8004c30 <memset+0x4>

08004c3c <_init>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c42:	bc08      	pop	{r3}
 8004c44:	469e      	mov	lr, r3
 8004c46:	4770      	bx	lr

08004c48 <_fini>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr
