
stm32_gps_gsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004238  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004330  08004330  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004330  08004330  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004330  08004330  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004330  08004330  00014330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000000c  08004344  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08004344  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091a4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c1  00000000  00000000  000291d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  0002a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  0002af08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f88d  00000000  00000000  0002b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e55  00000000  00000000  0003ad75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d1b0  00000000  00000000  00043bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a0d7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000155c  00000000  00000000  000a0dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042e0 	.word	0x080042e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080042e0 	.word	0x080042e0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
unsigned char data_in_uart1[401] = {0};
bool ctrl = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	MX_USART1_UART_Init();
 8000238:	f001 fa3c 	bl	80016b4 <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1, data_in_uart1, 400);
 800023c:	23c8      	movs	r3, #200	; 0xc8
 800023e:	005a      	lsls	r2, r3, #1
 8000240:	4905      	ldr	r1, [pc, #20]	; (8000258 <HAL_UART_RxCpltCallback+0x28>)
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <HAL_UART_RxCpltCallback+0x2c>)
 8000244:	0018      	movs	r0, r3
 8000246:	f002 ff3a 	bl	80030be <HAL_UART_Receive_IT>
	ctrl = true;
 800024a:	4b05      	ldr	r3, [pc, #20]	; (8000260 <HAL_UART_RxCpltCallback+0x30>)
 800024c:	2201      	movs	r2, #1
 800024e:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(LED_PC13_GPIO_Port, LED_PC13_Pin);
}
 8000250:	46c0      	nop			; (mov r8, r8)
 8000252:	46bd      	mov	sp, r7
 8000254:	b002      	add	sp, #8
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000028 	.word	0x20000028
 800025c:	20000200 	.word	0x20000200
 8000260:	200001b9 	.word	0x200001b9

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b5b0      	push	{r4, r5, r7, lr}
 8000266:	4cfe      	ldr	r4, [pc, #1016]	; (8000660 <main+0x3fc>)
 8000268:	44a5      	add	sp, r4
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	unsigned char data_filter[100] = {0};
 800026c:	23b4      	movs	r3, #180	; 0xb4
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	3304      	adds	r3, #4
 8000278:	2260      	movs	r2, #96	; 0x60
 800027a:	2100      	movs	r1, #0
 800027c:	0018      	movs	r0, r3
 800027e:	f004 f827 	bl	80042d0 <memset>

	unsigned char error_msg[5] = {0};
 8000282:	21b2      	movs	r1, #178	; 0xb2
 8000284:	0089      	lsls	r1, r1, #2
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	2200      	movs	r2, #0
 800028e:	711a      	strb	r2, [r3, #4]
	error_msg[0] = 0x4E;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	224e      	movs	r2, #78	; 0x4e
 8000294:	701a      	strb	r2, [r3, #0]
	error_msg[1] = 0x53; //mensagem de erro: "NS" no signal
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2253      	movs	r2, #83	; 0x53
 800029a:	705a      	strb	r2, [r3, #1]

	unsigned char send_msg[2] = {0};
 800029c:	21b1      	movs	r1, #177	; 0xb1
 800029e:	0089      	lsls	r1, r1, #2
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2200      	movs	r2, #0
 80002a4:	801a      	strh	r2, [r3, #0]
	send_msg[0] = 0x1A;  //send msg = ctrl+z
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	221a      	movs	r2, #26
 80002aa:	701a      	strb	r2, [r3, #0]

	//unsigned char send_uart2[300] = {0};


	// DEFININDO COMANDOS AT
	unsigned char at_command[11][50] = {{0},{0}};
 80002ac:	4bed      	ldr	r3, [pc, #948]	; (8000664 <main+0x400>)
 80002ae:	22ce      	movs	r2, #206	; 0xce
 80002b0:	0092      	lsls	r2, r2, #2
 80002b2:	4694      	mov	ip, r2
 80002b4:	44bc      	add	ip, r7
 80002b6:	4463      	add	r3, ip
 80002b8:	0018      	movs	r0, r3
 80002ba:	4beb      	ldr	r3, [pc, #940]	; (8000668 <main+0x404>)
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f004 f806 	bl	80042d0 <memset>

	at_command[AT][0] = 0x41; //A
 80002c4:	4be7      	ldr	r3, [pc, #924]	; (8000664 <main+0x400>)
 80002c6:	22ce      	movs	r2, #206	; 0xce
 80002c8:	0092      	lsls	r2, r2, #2
 80002ca:	4694      	mov	ip, r2
 80002cc:	44bc      	add	ip, r7
 80002ce:	4463      	add	r3, ip
 80002d0:	2241      	movs	r2, #65	; 0x41
 80002d2:	701a      	strb	r2, [r3, #0]
	at_command[AT][1] = 0x54; //T
 80002d4:	4be3      	ldr	r3, [pc, #908]	; (8000664 <main+0x400>)
 80002d6:	22ce      	movs	r2, #206	; 0xce
 80002d8:	0092      	lsls	r2, r2, #2
 80002da:	4694      	mov	ip, r2
 80002dc:	44bc      	add	ip, r7
 80002de:	4463      	add	r3, ip
 80002e0:	2254      	movs	r2, #84	; 0x54
 80002e2:	705a      	strb	r2, [r3, #1]
	at_command[AT][2] = 0x0A; //enter
 80002e4:	4bdf      	ldr	r3, [pc, #892]	; (8000664 <main+0x400>)
 80002e6:	22ce      	movs	r2, #206	; 0xce
 80002e8:	0092      	lsls	r2, r2, #2
 80002ea:	4694      	mov	ip, r2
 80002ec:	44bc      	add	ip, r7
 80002ee:	4463      	add	r3, ip
 80002f0:	220a      	movs	r2, #10
 80002f2:	709a      	strb	r2, [r3, #2]

	at_command[AT_CFUN][0] = 0x41; //A
 80002f4:	4bdb      	ldr	r3, [pc, #876]	; (8000664 <main+0x400>)
 80002f6:	22ce      	movs	r2, #206	; 0xce
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	4694      	mov	ip, r2
 80002fc:	44bc      	add	ip, r7
 80002fe:	4463      	add	r3, ip
 8000300:	2232      	movs	r2, #50	; 0x32
 8000302:	2141      	movs	r1, #65	; 0x41
 8000304:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][1] = 0x54; //T
 8000306:	4bd7      	ldr	r3, [pc, #860]	; (8000664 <main+0x400>)
 8000308:	22ce      	movs	r2, #206	; 0xce
 800030a:	0092      	lsls	r2, r2, #2
 800030c:	4694      	mov	ip, r2
 800030e:	44bc      	add	ip, r7
 8000310:	4463      	add	r3, ip
 8000312:	2233      	movs	r2, #51	; 0x33
 8000314:	2154      	movs	r1, #84	; 0x54
 8000316:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][2] = 0x2B; //+
 8000318:	4bd2      	ldr	r3, [pc, #840]	; (8000664 <main+0x400>)
 800031a:	22ce      	movs	r2, #206	; 0xce
 800031c:	0092      	lsls	r2, r2, #2
 800031e:	4694      	mov	ip, r2
 8000320:	44bc      	add	ip, r7
 8000322:	4463      	add	r3, ip
 8000324:	2234      	movs	r2, #52	; 0x34
 8000326:	212b      	movs	r1, #43	; 0x2b
 8000328:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][3] = 0x43; //C
 800032a:	4bce      	ldr	r3, [pc, #824]	; (8000664 <main+0x400>)
 800032c:	22ce      	movs	r2, #206	; 0xce
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	4694      	mov	ip, r2
 8000332:	44bc      	add	ip, r7
 8000334:	4463      	add	r3, ip
 8000336:	2235      	movs	r2, #53	; 0x35
 8000338:	2143      	movs	r1, #67	; 0x43
 800033a:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][4] = 0x46; //F
 800033c:	4bc9      	ldr	r3, [pc, #804]	; (8000664 <main+0x400>)
 800033e:	22ce      	movs	r2, #206	; 0xce
 8000340:	0092      	lsls	r2, r2, #2
 8000342:	4694      	mov	ip, r2
 8000344:	44bc      	add	ip, r7
 8000346:	4463      	add	r3, ip
 8000348:	2236      	movs	r2, #54	; 0x36
 800034a:	2146      	movs	r1, #70	; 0x46
 800034c:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][5] = 0x55; //U
 800034e:	4bc5      	ldr	r3, [pc, #788]	; (8000664 <main+0x400>)
 8000350:	22ce      	movs	r2, #206	; 0xce
 8000352:	0092      	lsls	r2, r2, #2
 8000354:	4694      	mov	ip, r2
 8000356:	44bc      	add	ip, r7
 8000358:	4463      	add	r3, ip
 800035a:	2237      	movs	r2, #55	; 0x37
 800035c:	2155      	movs	r1, #85	; 0x55
 800035e:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][6] = 0x4E; //N
 8000360:	4bc0      	ldr	r3, [pc, #768]	; (8000664 <main+0x400>)
 8000362:	22ce      	movs	r2, #206	; 0xce
 8000364:	0092      	lsls	r2, r2, #2
 8000366:	4694      	mov	ip, r2
 8000368:	44bc      	add	ip, r7
 800036a:	4463      	add	r3, ip
 800036c:	2238      	movs	r2, #56	; 0x38
 800036e:	214e      	movs	r1, #78	; 0x4e
 8000370:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][7] = 0x3D; //=
 8000372:	4bbc      	ldr	r3, [pc, #752]	; (8000664 <main+0x400>)
 8000374:	22ce      	movs	r2, #206	; 0xce
 8000376:	0092      	lsls	r2, r2, #2
 8000378:	4694      	mov	ip, r2
 800037a:	44bc      	add	ip, r7
 800037c:	4463      	add	r3, ip
 800037e:	2239      	movs	r2, #57	; 0x39
 8000380:	213d      	movs	r1, #61	; 0x3d
 8000382:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][8] = 0x31; //1
 8000384:	4bb7      	ldr	r3, [pc, #732]	; (8000664 <main+0x400>)
 8000386:	22ce      	movs	r2, #206	; 0xce
 8000388:	0092      	lsls	r2, r2, #2
 800038a:	4694      	mov	ip, r2
 800038c:	44bc      	add	ip, r7
 800038e:	4463      	add	r3, ip
 8000390:	223a      	movs	r2, #58	; 0x3a
 8000392:	2131      	movs	r1, #49	; 0x31
 8000394:	5499      	strb	r1, [r3, r2]
	at_command[AT_CFUN][9] = 0x0A; //enter
 8000396:	4bb3      	ldr	r3, [pc, #716]	; (8000664 <main+0x400>)
 8000398:	22ce      	movs	r2, #206	; 0xce
 800039a:	0092      	lsls	r2, r2, #2
 800039c:	4694      	mov	ip, r2
 800039e:	44bc      	add	ip, r7
 80003a0:	4463      	add	r3, ip
 80003a2:	223b      	movs	r2, #59	; 0x3b
 80003a4:	210a      	movs	r1, #10
 80003a6:	5499      	strb	r1, [r3, r2]

	at_command[AT_CPIN][0] = 0x41; //A
 80003a8:	4bae      	ldr	r3, [pc, #696]	; (8000664 <main+0x400>)
 80003aa:	22ce      	movs	r2, #206	; 0xce
 80003ac:	0092      	lsls	r2, r2, #2
 80003ae:	4694      	mov	ip, r2
 80003b0:	44bc      	add	ip, r7
 80003b2:	4463      	add	r3, ip
 80003b4:	2264      	movs	r2, #100	; 0x64
 80003b6:	2141      	movs	r1, #65	; 0x41
 80003b8:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][1] = 0x54; //T
 80003ba:	4baa      	ldr	r3, [pc, #680]	; (8000664 <main+0x400>)
 80003bc:	22ce      	movs	r2, #206	; 0xce
 80003be:	0092      	lsls	r2, r2, #2
 80003c0:	4694      	mov	ip, r2
 80003c2:	44bc      	add	ip, r7
 80003c4:	4463      	add	r3, ip
 80003c6:	2265      	movs	r2, #101	; 0x65
 80003c8:	2154      	movs	r1, #84	; 0x54
 80003ca:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][2] = 0x2B; //+
 80003cc:	4ba5      	ldr	r3, [pc, #660]	; (8000664 <main+0x400>)
 80003ce:	22ce      	movs	r2, #206	; 0xce
 80003d0:	0092      	lsls	r2, r2, #2
 80003d2:	4694      	mov	ip, r2
 80003d4:	44bc      	add	ip, r7
 80003d6:	4463      	add	r3, ip
 80003d8:	2266      	movs	r2, #102	; 0x66
 80003da:	212b      	movs	r1, #43	; 0x2b
 80003dc:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][3] = 0x43; //C
 80003de:	4ba1      	ldr	r3, [pc, #644]	; (8000664 <main+0x400>)
 80003e0:	22ce      	movs	r2, #206	; 0xce
 80003e2:	0092      	lsls	r2, r2, #2
 80003e4:	4694      	mov	ip, r2
 80003e6:	44bc      	add	ip, r7
 80003e8:	4463      	add	r3, ip
 80003ea:	2267      	movs	r2, #103	; 0x67
 80003ec:	2143      	movs	r1, #67	; 0x43
 80003ee:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][4] = 0x50; //P
 80003f0:	4b9c      	ldr	r3, [pc, #624]	; (8000664 <main+0x400>)
 80003f2:	22ce      	movs	r2, #206	; 0xce
 80003f4:	0092      	lsls	r2, r2, #2
 80003f6:	4694      	mov	ip, r2
 80003f8:	44bc      	add	ip, r7
 80003fa:	4463      	add	r3, ip
 80003fc:	2268      	movs	r2, #104	; 0x68
 80003fe:	2150      	movs	r1, #80	; 0x50
 8000400:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][5] = 0x49; //I
 8000402:	4b98      	ldr	r3, [pc, #608]	; (8000664 <main+0x400>)
 8000404:	22ce      	movs	r2, #206	; 0xce
 8000406:	0092      	lsls	r2, r2, #2
 8000408:	4694      	mov	ip, r2
 800040a:	44bc      	add	ip, r7
 800040c:	4463      	add	r3, ip
 800040e:	2269      	movs	r2, #105	; 0x69
 8000410:	2149      	movs	r1, #73	; 0x49
 8000412:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][6] = 0x4E; //N
 8000414:	4b93      	ldr	r3, [pc, #588]	; (8000664 <main+0x400>)
 8000416:	22ce      	movs	r2, #206	; 0xce
 8000418:	0092      	lsls	r2, r2, #2
 800041a:	4694      	mov	ip, r2
 800041c:	44bc      	add	ip, r7
 800041e:	4463      	add	r3, ip
 8000420:	226a      	movs	r2, #106	; 0x6a
 8000422:	214e      	movs	r1, #78	; 0x4e
 8000424:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][7] = 0x3F; //?
 8000426:	4b8f      	ldr	r3, [pc, #572]	; (8000664 <main+0x400>)
 8000428:	22ce      	movs	r2, #206	; 0xce
 800042a:	0092      	lsls	r2, r2, #2
 800042c:	4694      	mov	ip, r2
 800042e:	44bc      	add	ip, r7
 8000430:	4463      	add	r3, ip
 8000432:	226b      	movs	r2, #107	; 0x6b
 8000434:	213f      	movs	r1, #63	; 0x3f
 8000436:	5499      	strb	r1, [r3, r2]
	at_command[AT_CPIN][8] = 0x0A; //enter
 8000438:	4b8a      	ldr	r3, [pc, #552]	; (8000664 <main+0x400>)
 800043a:	22ce      	movs	r2, #206	; 0xce
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	4694      	mov	ip, r2
 8000440:	44bc      	add	ip, r7
 8000442:	4463      	add	r3, ip
 8000444:	226c      	movs	r2, #108	; 0x6c
 8000446:	210a      	movs	r1, #10
 8000448:	5499      	strb	r1, [r3, r2]

	at_command[AT_CREG][0] = 0x41; //A
 800044a:	4b86      	ldr	r3, [pc, #536]	; (8000664 <main+0x400>)
 800044c:	22ce      	movs	r2, #206	; 0xce
 800044e:	0092      	lsls	r2, r2, #2
 8000450:	4694      	mov	ip, r2
 8000452:	44bc      	add	ip, r7
 8000454:	4463      	add	r3, ip
 8000456:	2296      	movs	r2, #150	; 0x96
 8000458:	2141      	movs	r1, #65	; 0x41
 800045a:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][1] = 0x54; //T
 800045c:	4b81      	ldr	r3, [pc, #516]	; (8000664 <main+0x400>)
 800045e:	22ce      	movs	r2, #206	; 0xce
 8000460:	0092      	lsls	r2, r2, #2
 8000462:	4694      	mov	ip, r2
 8000464:	44bc      	add	ip, r7
 8000466:	4463      	add	r3, ip
 8000468:	2297      	movs	r2, #151	; 0x97
 800046a:	2154      	movs	r1, #84	; 0x54
 800046c:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][2] = 0x2B; //+
 800046e:	4b7d      	ldr	r3, [pc, #500]	; (8000664 <main+0x400>)
 8000470:	22ce      	movs	r2, #206	; 0xce
 8000472:	0092      	lsls	r2, r2, #2
 8000474:	4694      	mov	ip, r2
 8000476:	44bc      	add	ip, r7
 8000478:	4463      	add	r3, ip
 800047a:	2298      	movs	r2, #152	; 0x98
 800047c:	212b      	movs	r1, #43	; 0x2b
 800047e:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][3] = 0x43; //C
 8000480:	4b78      	ldr	r3, [pc, #480]	; (8000664 <main+0x400>)
 8000482:	22ce      	movs	r2, #206	; 0xce
 8000484:	0092      	lsls	r2, r2, #2
 8000486:	4694      	mov	ip, r2
 8000488:	44bc      	add	ip, r7
 800048a:	4463      	add	r3, ip
 800048c:	2299      	movs	r2, #153	; 0x99
 800048e:	2143      	movs	r1, #67	; 0x43
 8000490:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][4] = 0x52; //R
 8000492:	4b74      	ldr	r3, [pc, #464]	; (8000664 <main+0x400>)
 8000494:	22ce      	movs	r2, #206	; 0xce
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	4694      	mov	ip, r2
 800049a:	44bc      	add	ip, r7
 800049c:	4463      	add	r3, ip
 800049e:	229a      	movs	r2, #154	; 0x9a
 80004a0:	2152      	movs	r1, #82	; 0x52
 80004a2:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][5] = 0x45; //E
 80004a4:	4b6f      	ldr	r3, [pc, #444]	; (8000664 <main+0x400>)
 80004a6:	22ce      	movs	r2, #206	; 0xce
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	4694      	mov	ip, r2
 80004ac:	44bc      	add	ip, r7
 80004ae:	4463      	add	r3, ip
 80004b0:	229b      	movs	r2, #155	; 0x9b
 80004b2:	2145      	movs	r1, #69	; 0x45
 80004b4:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][6] = 0x47; //G
 80004b6:	4b6b      	ldr	r3, [pc, #428]	; (8000664 <main+0x400>)
 80004b8:	22ce      	movs	r2, #206	; 0xce
 80004ba:	0092      	lsls	r2, r2, #2
 80004bc:	4694      	mov	ip, r2
 80004be:	44bc      	add	ip, r7
 80004c0:	4463      	add	r3, ip
 80004c2:	229c      	movs	r2, #156	; 0x9c
 80004c4:	2147      	movs	r1, #71	; 0x47
 80004c6:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][7] = 0x3F; //?
 80004c8:	4b66      	ldr	r3, [pc, #408]	; (8000664 <main+0x400>)
 80004ca:	22ce      	movs	r2, #206	; 0xce
 80004cc:	0092      	lsls	r2, r2, #2
 80004ce:	4694      	mov	ip, r2
 80004d0:	44bc      	add	ip, r7
 80004d2:	4463      	add	r3, ip
 80004d4:	229d      	movs	r2, #157	; 0x9d
 80004d6:	213f      	movs	r1, #63	; 0x3f
 80004d8:	5499      	strb	r1, [r3, r2]
	at_command[AT_CREG][8] = 0x0A; //enter
 80004da:	4b62      	ldr	r3, [pc, #392]	; (8000664 <main+0x400>)
 80004dc:	22ce      	movs	r2, #206	; 0xce
 80004de:	0092      	lsls	r2, r2, #2
 80004e0:	4694      	mov	ip, r2
 80004e2:	44bc      	add	ip, r7
 80004e4:	4463      	add	r3, ip
 80004e6:	229e      	movs	r2, #158	; 0x9e
 80004e8:	210a      	movs	r1, #10
 80004ea:	5499      	strb	r1, [r3, r2]

	at_command[AT_CSQ][0] = 0x41; //A
 80004ec:	4b5d      	ldr	r3, [pc, #372]	; (8000664 <main+0x400>)
 80004ee:	22ce      	movs	r2, #206	; 0xce
 80004f0:	0092      	lsls	r2, r2, #2
 80004f2:	4694      	mov	ip, r2
 80004f4:	44bc      	add	ip, r7
 80004f6:	4463      	add	r3, ip
 80004f8:	22c8      	movs	r2, #200	; 0xc8
 80004fa:	2141      	movs	r1, #65	; 0x41
 80004fc:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSQ][1] = 0x54; //T
 80004fe:	4b59      	ldr	r3, [pc, #356]	; (8000664 <main+0x400>)
 8000500:	22ce      	movs	r2, #206	; 0xce
 8000502:	0092      	lsls	r2, r2, #2
 8000504:	4694      	mov	ip, r2
 8000506:	44bc      	add	ip, r7
 8000508:	4463      	add	r3, ip
 800050a:	22c9      	movs	r2, #201	; 0xc9
 800050c:	2154      	movs	r1, #84	; 0x54
 800050e:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSQ][2] = 0x2B; //+
 8000510:	4b54      	ldr	r3, [pc, #336]	; (8000664 <main+0x400>)
 8000512:	22ce      	movs	r2, #206	; 0xce
 8000514:	0092      	lsls	r2, r2, #2
 8000516:	4694      	mov	ip, r2
 8000518:	44bc      	add	ip, r7
 800051a:	4463      	add	r3, ip
 800051c:	22ca      	movs	r2, #202	; 0xca
 800051e:	212b      	movs	r1, #43	; 0x2b
 8000520:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSQ][3] = 0x43; //C
 8000522:	4b50      	ldr	r3, [pc, #320]	; (8000664 <main+0x400>)
 8000524:	22ce      	movs	r2, #206	; 0xce
 8000526:	0092      	lsls	r2, r2, #2
 8000528:	4694      	mov	ip, r2
 800052a:	44bc      	add	ip, r7
 800052c:	4463      	add	r3, ip
 800052e:	22cb      	movs	r2, #203	; 0xcb
 8000530:	2143      	movs	r1, #67	; 0x43
 8000532:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSQ][4] = 0x53; //S
 8000534:	4b4b      	ldr	r3, [pc, #300]	; (8000664 <main+0x400>)
 8000536:	22ce      	movs	r2, #206	; 0xce
 8000538:	0092      	lsls	r2, r2, #2
 800053a:	4694      	mov	ip, r2
 800053c:	44bc      	add	ip, r7
 800053e:	4463      	add	r3, ip
 8000540:	22cc      	movs	r2, #204	; 0xcc
 8000542:	2153      	movs	r1, #83	; 0x53
 8000544:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSQ][5] = 0x51; //Q
 8000546:	4b47      	ldr	r3, [pc, #284]	; (8000664 <main+0x400>)
 8000548:	22ce      	movs	r2, #206	; 0xce
 800054a:	0092      	lsls	r2, r2, #2
 800054c:	4694      	mov	ip, r2
 800054e:	44bc      	add	ip, r7
 8000550:	4463      	add	r3, ip
 8000552:	22cd      	movs	r2, #205	; 0xcd
 8000554:	2151      	movs	r1, #81	; 0x51
 8000556:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSQ][6] = 0x0A; //?
 8000558:	4b42      	ldr	r3, [pc, #264]	; (8000664 <main+0x400>)
 800055a:	22ce      	movs	r2, #206	; 0xce
 800055c:	0092      	lsls	r2, r2, #2
 800055e:	4694      	mov	ip, r2
 8000560:	44bc      	add	ip, r7
 8000562:	4463      	add	r3, ip
 8000564:	22ce      	movs	r2, #206	; 0xce
 8000566:	210a      	movs	r1, #10
 8000568:	5499      	strb	r1, [r3, r2]

	at_command[AT_CSTT][0]  = 0x41; //A
 800056a:	4b3e      	ldr	r3, [pc, #248]	; (8000664 <main+0x400>)
 800056c:	22ce      	movs	r2, #206	; 0xce
 800056e:	0092      	lsls	r2, r2, #2
 8000570:	4694      	mov	ip, r2
 8000572:	44bc      	add	ip, r7
 8000574:	4463      	add	r3, ip
 8000576:	22fa      	movs	r2, #250	; 0xfa
 8000578:	2141      	movs	r1, #65	; 0x41
 800057a:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSTT][1]  = 0x54; //T
 800057c:	4b39      	ldr	r3, [pc, #228]	; (8000664 <main+0x400>)
 800057e:	22ce      	movs	r2, #206	; 0xce
 8000580:	0092      	lsls	r2, r2, #2
 8000582:	4694      	mov	ip, r2
 8000584:	44bc      	add	ip, r7
 8000586:	4463      	add	r3, ip
 8000588:	22fb      	movs	r2, #251	; 0xfb
 800058a:	2154      	movs	r1, #84	; 0x54
 800058c:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSTT][2]  = 0x2B; //+
 800058e:	4b35      	ldr	r3, [pc, #212]	; (8000664 <main+0x400>)
 8000590:	22ce      	movs	r2, #206	; 0xce
 8000592:	0092      	lsls	r2, r2, #2
 8000594:	4694      	mov	ip, r2
 8000596:	44bc      	add	ip, r7
 8000598:	4463      	add	r3, ip
 800059a:	22fc      	movs	r2, #252	; 0xfc
 800059c:	212b      	movs	r1, #43	; 0x2b
 800059e:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSTT][3]  = 0x43; //C
 80005a0:	4b30      	ldr	r3, [pc, #192]	; (8000664 <main+0x400>)
 80005a2:	22ce      	movs	r2, #206	; 0xce
 80005a4:	0092      	lsls	r2, r2, #2
 80005a6:	4694      	mov	ip, r2
 80005a8:	44bc      	add	ip, r7
 80005aa:	4463      	add	r3, ip
 80005ac:	22fd      	movs	r2, #253	; 0xfd
 80005ae:	2143      	movs	r1, #67	; 0x43
 80005b0:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSTT][4]  = 0x53; //S
 80005b2:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <main+0x400>)
 80005b4:	22ce      	movs	r2, #206	; 0xce
 80005b6:	0092      	lsls	r2, r2, #2
 80005b8:	4694      	mov	ip, r2
 80005ba:	44bc      	add	ip, r7
 80005bc:	4463      	add	r3, ip
 80005be:	22fe      	movs	r2, #254	; 0xfe
 80005c0:	2153      	movs	r1, #83	; 0x53
 80005c2:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSTT][5]  = 0x54; //T
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <main+0x400>)
 80005c6:	22ce      	movs	r2, #206	; 0xce
 80005c8:	0092      	lsls	r2, r2, #2
 80005ca:	4694      	mov	ip, r2
 80005cc:	44bc      	add	ip, r7
 80005ce:	4463      	add	r3, ip
 80005d0:	22ff      	movs	r2, #255	; 0xff
 80005d2:	2154      	movs	r1, #84	; 0x54
 80005d4:	5499      	strb	r1, [r3, r2]
	at_command[AT_CSTT][6]  = 0x54; //T
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <main+0x400>)
 80005d8:	20ce      	movs	r0, #206	; 0xce
 80005da:	0080      	lsls	r0, r0, #2
 80005dc:	183a      	adds	r2, r7, r0
 80005de:	18d2      	adds	r2, r2, r3
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	2154      	movs	r1, #84	; 0x54
 80005e6:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][7]  = 0x3D; //=
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <main+0x400>)
 80005ea:	183a      	adds	r2, r7, r0
 80005ec:	18d2      	adds	r2, r2, r3
 80005ee:	2302      	movs	r3, #2
 80005f0:	33ff      	adds	r3, #255	; 0xff
 80005f2:	213d      	movs	r1, #61	; 0x3d
 80005f4:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][8]  = 0x22; //"
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <main+0x400>)
 80005f8:	183a      	adds	r2, r7, r0
 80005fa:	18d2      	adds	r2, r2, r3
 80005fc:	2381      	movs	r3, #129	; 0x81
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	2122      	movs	r1, #34	; 0x22
 8000602:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][9]  = 0x74; //t
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <main+0x400>)
 8000606:	183a      	adds	r2, r7, r0
 8000608:	18d2      	adds	r2, r2, r3
 800060a:	2304      	movs	r3, #4
 800060c:	33ff      	adds	r3, #255	; 0xff
 800060e:	2174      	movs	r1, #116	; 0x74
 8000610:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][10] = 0x69; //i
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <main+0x400>)
 8000614:	183a      	adds	r2, r7, r0
 8000616:	18d2      	adds	r2, r2, r3
 8000618:	2382      	movs	r3, #130	; 0x82
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	2169      	movs	r1, #105	; 0x69
 800061e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][11] = 0x6D; //m
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <main+0x400>)
 8000622:	183a      	adds	r2, r7, r0
 8000624:	18d2      	adds	r2, r2, r3
 8000626:	2306      	movs	r3, #6
 8000628:	33ff      	adds	r3, #255	; 0xff
 800062a:	216d      	movs	r1, #109	; 0x6d
 800062c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][12] = 0x62; //b
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <main+0x400>)
 8000630:	183a      	adds	r2, r7, r0
 8000632:	18d2      	adds	r2, r2, r3
 8000634:	2383      	movs	r3, #131	; 0x83
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	2162      	movs	r1, #98	; 0x62
 800063a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][13] = 0x72; //r
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <main+0x400>)
 800063e:	183a      	adds	r2, r7, r0
 8000640:	18d2      	adds	r2, r2, r3
 8000642:	2308      	movs	r3, #8
 8000644:	33ff      	adds	r3, #255	; 0xff
 8000646:	2172      	movs	r1, #114	; 0x72
 8000648:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][14] = 0x61; //a
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <main+0x400>)
 800064c:	183a      	adds	r2, r7, r0
 800064e:	18d2      	adds	r2, r2, r3
 8000650:	2384      	movs	r3, #132	; 0x84
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	2161      	movs	r1, #97	; 0x61
 8000656:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][15] = 0x73; //s
 8000658:	4b02      	ldr	r3, [pc, #8]	; (8000664 <main+0x400>)
 800065a:	183a      	adds	r2, r7, r0
 800065c:	18d2      	adds	r2, r2, r3
 800065e:	e005      	b.n	800066c <main+0x408>
 8000660:	fffffcc8 	.word	0xfffffcc8
 8000664:	fffffd64 	.word	0xfffffd64
 8000668:	00000226 	.word	0x00000226
 800066c:	230a      	movs	r3, #10
 800066e:	33ff      	adds	r3, #255	; 0xff
 8000670:	2173      	movs	r1, #115	; 0x73
 8000672:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][16] = 0x69; //i
 8000674:	4bfe      	ldr	r3, [pc, #1016]	; (8000a70 <main+0x80c>)
 8000676:	183a      	adds	r2, r7, r0
 8000678:	18d2      	adds	r2, r2, r3
 800067a:	2385      	movs	r3, #133	; 0x85
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	2169      	movs	r1, #105	; 0x69
 8000680:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][17] = 0x6C; //l
 8000682:	4bfb      	ldr	r3, [pc, #1004]	; (8000a70 <main+0x80c>)
 8000684:	183a      	adds	r2, r7, r0
 8000686:	18d2      	adds	r2, r2, r3
 8000688:	230c      	movs	r3, #12
 800068a:	33ff      	adds	r3, #255	; 0xff
 800068c:	216c      	movs	r1, #108	; 0x6c
 800068e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][18] = 0x2E; //.
 8000690:	4bf7      	ldr	r3, [pc, #988]	; (8000a70 <main+0x80c>)
 8000692:	183a      	adds	r2, r7, r0
 8000694:	18d2      	adds	r2, r2, r3
 8000696:	2386      	movs	r3, #134	; 0x86
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	212e      	movs	r1, #46	; 0x2e
 800069c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][19] = 0x62; //b
 800069e:	4bf4      	ldr	r3, [pc, #976]	; (8000a70 <main+0x80c>)
 80006a0:	183a      	adds	r2, r7, r0
 80006a2:	18d2      	adds	r2, r2, r3
 80006a4:	230e      	movs	r3, #14
 80006a6:	33ff      	adds	r3, #255	; 0xff
 80006a8:	2162      	movs	r1, #98	; 0x62
 80006aa:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][20] = 0x72; //r
 80006ac:	4bf0      	ldr	r3, [pc, #960]	; (8000a70 <main+0x80c>)
 80006ae:	183a      	adds	r2, r7, r0
 80006b0:	18d2      	adds	r2, r2, r3
 80006b2:	2387      	movs	r3, #135	; 0x87
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	2172      	movs	r1, #114	; 0x72
 80006b8:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][21] = 0x22; //"
 80006ba:	4bed      	ldr	r3, [pc, #948]	; (8000a70 <main+0x80c>)
 80006bc:	183a      	adds	r2, r7, r0
 80006be:	18d2      	adds	r2, r2, r3
 80006c0:	2310      	movs	r3, #16
 80006c2:	33ff      	adds	r3, #255	; 0xff
 80006c4:	2122      	movs	r1, #34	; 0x22
 80006c6:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][22] = 0x2C; //,
 80006c8:	4be9      	ldr	r3, [pc, #932]	; (8000a70 <main+0x80c>)
 80006ca:	183a      	adds	r2, r7, r0
 80006cc:	18d2      	adds	r2, r2, r3
 80006ce:	2388      	movs	r3, #136	; 0x88
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	212c      	movs	r1, #44	; 0x2c
 80006d4:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][23] = 0x22; //"
 80006d6:	4be6      	ldr	r3, [pc, #920]	; (8000a70 <main+0x80c>)
 80006d8:	183a      	adds	r2, r7, r0
 80006da:	18d2      	adds	r2, r2, r3
 80006dc:	2312      	movs	r3, #18
 80006de:	33ff      	adds	r3, #255	; 0xff
 80006e0:	2122      	movs	r1, #34	; 0x22
 80006e2:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][24] = 0x22; //"
 80006e4:	4be2      	ldr	r3, [pc, #904]	; (8000a70 <main+0x80c>)
 80006e6:	183a      	adds	r2, r7, r0
 80006e8:	18d2      	adds	r2, r2, r3
 80006ea:	2389      	movs	r3, #137	; 0x89
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	2122      	movs	r1, #34	; 0x22
 80006f0:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][25] = 0x2C; //,
 80006f2:	4bdf      	ldr	r3, [pc, #892]	; (8000a70 <main+0x80c>)
 80006f4:	183a      	adds	r2, r7, r0
 80006f6:	18d2      	adds	r2, r2, r3
 80006f8:	2314      	movs	r3, #20
 80006fa:	33ff      	adds	r3, #255	; 0xff
 80006fc:	212c      	movs	r1, #44	; 0x2c
 80006fe:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][26] = 0x22; //"
 8000700:	4bdb      	ldr	r3, [pc, #876]	; (8000a70 <main+0x80c>)
 8000702:	183a      	adds	r2, r7, r0
 8000704:	18d2      	adds	r2, r2, r3
 8000706:	238a      	movs	r3, #138	; 0x8a
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	2122      	movs	r1, #34	; 0x22
 800070c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][27] = 0x22; //"
 800070e:	4bd8      	ldr	r3, [pc, #864]	; (8000a70 <main+0x80c>)
 8000710:	183a      	adds	r2, r7, r0
 8000712:	18d2      	adds	r2, r2, r3
 8000714:	2316      	movs	r3, #22
 8000716:	33ff      	adds	r3, #255	; 0xff
 8000718:	2122      	movs	r1, #34	; 0x22
 800071a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CSTT][28] = 0x0A; //enter
 800071c:	4bd4      	ldr	r3, [pc, #848]	; (8000a70 <main+0x80c>)
 800071e:	183a      	adds	r2, r7, r0
 8000720:	18d2      	adds	r2, r2, r3
 8000722:	238b      	movs	r3, #139	; 0x8b
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	210a      	movs	r1, #10
 8000728:	54d1      	strb	r1, [r2, r3]

	at_command[AT_CIICR][0] = 0x41; //A
 800072a:	4bd1      	ldr	r3, [pc, #836]	; (8000a70 <main+0x80c>)
 800072c:	183a      	adds	r2, r7, r0
 800072e:	18d2      	adds	r2, r2, r3
 8000730:	2396      	movs	r3, #150	; 0x96
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	2141      	movs	r1, #65	; 0x41
 8000736:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][1] = 0x54; //T
 8000738:	4bcd      	ldr	r3, [pc, #820]	; (8000a70 <main+0x80c>)
 800073a:	183a      	adds	r2, r7, r0
 800073c:	18d2      	adds	r2, r2, r3
 800073e:	232e      	movs	r3, #46	; 0x2e
 8000740:	33ff      	adds	r3, #255	; 0xff
 8000742:	2154      	movs	r1, #84	; 0x54
 8000744:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][2] = 0x2B; //+
 8000746:	4bca      	ldr	r3, [pc, #808]	; (8000a70 <main+0x80c>)
 8000748:	183a      	adds	r2, r7, r0
 800074a:	18d2      	adds	r2, r2, r3
 800074c:	2397      	movs	r3, #151	; 0x97
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	212b      	movs	r1, #43	; 0x2b
 8000752:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][3] = 0x43; //C
 8000754:	4bc6      	ldr	r3, [pc, #792]	; (8000a70 <main+0x80c>)
 8000756:	183a      	adds	r2, r7, r0
 8000758:	18d2      	adds	r2, r2, r3
 800075a:	2330      	movs	r3, #48	; 0x30
 800075c:	33ff      	adds	r3, #255	; 0xff
 800075e:	2143      	movs	r1, #67	; 0x43
 8000760:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][4] = 0x49; //I
 8000762:	4bc3      	ldr	r3, [pc, #780]	; (8000a70 <main+0x80c>)
 8000764:	183a      	adds	r2, r7, r0
 8000766:	18d2      	adds	r2, r2, r3
 8000768:	2398      	movs	r3, #152	; 0x98
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	2149      	movs	r1, #73	; 0x49
 800076e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][5] = 0x49; //I
 8000770:	4bbf      	ldr	r3, [pc, #764]	; (8000a70 <main+0x80c>)
 8000772:	183a      	adds	r2, r7, r0
 8000774:	18d2      	adds	r2, r2, r3
 8000776:	2332      	movs	r3, #50	; 0x32
 8000778:	33ff      	adds	r3, #255	; 0xff
 800077a:	2149      	movs	r1, #73	; 0x49
 800077c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][6] = 0x43; //C
 800077e:	4bbc      	ldr	r3, [pc, #752]	; (8000a70 <main+0x80c>)
 8000780:	183a      	adds	r2, r7, r0
 8000782:	18d2      	adds	r2, r2, r3
 8000784:	2399      	movs	r3, #153	; 0x99
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	2143      	movs	r1, #67	; 0x43
 800078a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][7] = 0x52; //R
 800078c:	4bb8      	ldr	r3, [pc, #736]	; (8000a70 <main+0x80c>)
 800078e:	183a      	adds	r2, r7, r0
 8000790:	18d2      	adds	r2, r2, r3
 8000792:	2334      	movs	r3, #52	; 0x34
 8000794:	33ff      	adds	r3, #255	; 0xff
 8000796:	2152      	movs	r1, #82	; 0x52
 8000798:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIICR][8] = 0x0A; //enter
 800079a:	4bb5      	ldr	r3, [pc, #724]	; (8000a70 <main+0x80c>)
 800079c:	183a      	adds	r2, r7, r0
 800079e:	18d2      	adds	r2, r2, r3
 80007a0:	239a      	movs	r3, #154	; 0x9a
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	210a      	movs	r1, #10
 80007a6:	54d1      	strb	r1, [r2, r3]

	at_command[AT_CIFSR][0] = 0x41; //A
 80007a8:	4bb1      	ldr	r3, [pc, #708]	; (8000a70 <main+0x80c>)
 80007aa:	183a      	adds	r2, r7, r0
 80007ac:	18d2      	adds	r2, r2, r3
 80007ae:	23af      	movs	r3, #175	; 0xaf
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	2141      	movs	r1, #65	; 0x41
 80007b4:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][1] = 0x54; //T
 80007b6:	4bae      	ldr	r3, [pc, #696]	; (8000a70 <main+0x80c>)
 80007b8:	183a      	adds	r2, r7, r0
 80007ba:	18d2      	adds	r2, r2, r3
 80007bc:	2360      	movs	r3, #96	; 0x60
 80007be:	33ff      	adds	r3, #255	; 0xff
 80007c0:	2154      	movs	r1, #84	; 0x54
 80007c2:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][2] = 0x2B; //+
 80007c4:	4baa      	ldr	r3, [pc, #680]	; (8000a70 <main+0x80c>)
 80007c6:	183a      	adds	r2, r7, r0
 80007c8:	18d2      	adds	r2, r2, r3
 80007ca:	23b0      	movs	r3, #176	; 0xb0
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	212b      	movs	r1, #43	; 0x2b
 80007d0:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][3] = 0x43; //C
 80007d2:	4ba7      	ldr	r3, [pc, #668]	; (8000a70 <main+0x80c>)
 80007d4:	183a      	adds	r2, r7, r0
 80007d6:	18d2      	adds	r2, r2, r3
 80007d8:	2362      	movs	r3, #98	; 0x62
 80007da:	33ff      	adds	r3, #255	; 0xff
 80007dc:	2143      	movs	r1, #67	; 0x43
 80007de:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][4] = 0x49; //I
 80007e0:	4ba3      	ldr	r3, [pc, #652]	; (8000a70 <main+0x80c>)
 80007e2:	183a      	adds	r2, r7, r0
 80007e4:	18d2      	adds	r2, r2, r3
 80007e6:	23b1      	movs	r3, #177	; 0xb1
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	2149      	movs	r1, #73	; 0x49
 80007ec:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][5] = 0x46; //F
 80007ee:	4ba0      	ldr	r3, [pc, #640]	; (8000a70 <main+0x80c>)
 80007f0:	183a      	adds	r2, r7, r0
 80007f2:	18d2      	adds	r2, r2, r3
 80007f4:	2364      	movs	r3, #100	; 0x64
 80007f6:	33ff      	adds	r3, #255	; 0xff
 80007f8:	2146      	movs	r1, #70	; 0x46
 80007fa:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][6] = 0x53; //S
 80007fc:	4b9c      	ldr	r3, [pc, #624]	; (8000a70 <main+0x80c>)
 80007fe:	183a      	adds	r2, r7, r0
 8000800:	18d2      	adds	r2, r2, r3
 8000802:	23b2      	movs	r3, #178	; 0xb2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	2153      	movs	r1, #83	; 0x53
 8000808:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][7] = 0x52; //R
 800080a:	4b99      	ldr	r3, [pc, #612]	; (8000a70 <main+0x80c>)
 800080c:	183a      	adds	r2, r7, r0
 800080e:	18d2      	adds	r2, r2, r3
 8000810:	2366      	movs	r3, #102	; 0x66
 8000812:	33ff      	adds	r3, #255	; 0xff
 8000814:	2152      	movs	r1, #82	; 0x52
 8000816:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIFSR][8] = 0x0A; //enter
 8000818:	4b95      	ldr	r3, [pc, #596]	; (8000a70 <main+0x80c>)
 800081a:	183a      	adds	r2, r7, r0
 800081c:	18d2      	adds	r2, r2, r3
 800081e:	23b3      	movs	r3, #179	; 0xb3
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	210a      	movs	r1, #10
 8000824:	54d1      	strb	r1, [r2, r3]

	at_command[AT_CIPSTART][0]  = 0x41; //A
 8000826:	4b92      	ldr	r3, [pc, #584]	; (8000a70 <main+0x80c>)
 8000828:	183a      	adds	r2, r7, r0
 800082a:	18d2      	adds	r2, r2, r3
 800082c:	23c8      	movs	r3, #200	; 0xc8
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	2141      	movs	r1, #65	; 0x41
 8000832:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][1]  = 0x54; //T
 8000834:	4b8e      	ldr	r3, [pc, #568]	; (8000a70 <main+0x80c>)
 8000836:	183a      	adds	r2, r7, r0
 8000838:	18d2      	adds	r2, r2, r3
 800083a:	2392      	movs	r3, #146	; 0x92
 800083c:	33ff      	adds	r3, #255	; 0xff
 800083e:	2154      	movs	r1, #84	; 0x54
 8000840:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][2]  = 0x2B; //+
 8000842:	4b8b      	ldr	r3, [pc, #556]	; (8000a70 <main+0x80c>)
 8000844:	183a      	adds	r2, r7, r0
 8000846:	18d2      	adds	r2, r2, r3
 8000848:	23c9      	movs	r3, #201	; 0xc9
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	212b      	movs	r1, #43	; 0x2b
 800084e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][3]  = 0x43; //C
 8000850:	4b87      	ldr	r3, [pc, #540]	; (8000a70 <main+0x80c>)
 8000852:	183a      	adds	r2, r7, r0
 8000854:	18d2      	adds	r2, r2, r3
 8000856:	2394      	movs	r3, #148	; 0x94
 8000858:	33ff      	adds	r3, #255	; 0xff
 800085a:	2143      	movs	r1, #67	; 0x43
 800085c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][4]  = 0x49; //I
 800085e:	4b84      	ldr	r3, [pc, #528]	; (8000a70 <main+0x80c>)
 8000860:	183a      	adds	r2, r7, r0
 8000862:	18d2      	adds	r2, r2, r3
 8000864:	23ca      	movs	r3, #202	; 0xca
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2149      	movs	r1, #73	; 0x49
 800086a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][5]  = 0x50; //P
 800086c:	4b80      	ldr	r3, [pc, #512]	; (8000a70 <main+0x80c>)
 800086e:	183a      	adds	r2, r7, r0
 8000870:	18d2      	adds	r2, r2, r3
 8000872:	2396      	movs	r3, #150	; 0x96
 8000874:	33ff      	adds	r3, #255	; 0xff
 8000876:	2150      	movs	r1, #80	; 0x50
 8000878:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][6]  = 0x53; //S
 800087a:	4b7d      	ldr	r3, [pc, #500]	; (8000a70 <main+0x80c>)
 800087c:	183a      	adds	r2, r7, r0
 800087e:	18d2      	adds	r2, r2, r3
 8000880:	23cb      	movs	r3, #203	; 0xcb
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	2153      	movs	r1, #83	; 0x53
 8000886:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][7]  = 0x54; //T
 8000888:	4b79      	ldr	r3, [pc, #484]	; (8000a70 <main+0x80c>)
 800088a:	183a      	adds	r2, r7, r0
 800088c:	18d2      	adds	r2, r2, r3
 800088e:	2398      	movs	r3, #152	; 0x98
 8000890:	33ff      	adds	r3, #255	; 0xff
 8000892:	2154      	movs	r1, #84	; 0x54
 8000894:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][8]  = 0x41; //A
 8000896:	4b76      	ldr	r3, [pc, #472]	; (8000a70 <main+0x80c>)
 8000898:	183a      	adds	r2, r7, r0
 800089a:	18d2      	adds	r2, r2, r3
 800089c:	23cc      	movs	r3, #204	; 0xcc
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	2141      	movs	r1, #65	; 0x41
 80008a2:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][9]  = 0x52; //R
 80008a4:	4b72      	ldr	r3, [pc, #456]	; (8000a70 <main+0x80c>)
 80008a6:	183a      	adds	r2, r7, r0
 80008a8:	18d2      	adds	r2, r2, r3
 80008aa:	239a      	movs	r3, #154	; 0x9a
 80008ac:	33ff      	adds	r3, #255	; 0xff
 80008ae:	2152      	movs	r1, #82	; 0x52
 80008b0:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][10] = 0x54; //T
 80008b2:	4b6f      	ldr	r3, [pc, #444]	; (8000a70 <main+0x80c>)
 80008b4:	183a      	adds	r2, r7, r0
 80008b6:	18d2      	adds	r2, r2, r3
 80008b8:	23cd      	movs	r3, #205	; 0xcd
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	2154      	movs	r1, #84	; 0x54
 80008be:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][11] = 0x3D; //=
 80008c0:	4b6b      	ldr	r3, [pc, #428]	; (8000a70 <main+0x80c>)
 80008c2:	183a      	adds	r2, r7, r0
 80008c4:	18d2      	adds	r2, r2, r3
 80008c6:	239c      	movs	r3, #156	; 0x9c
 80008c8:	33ff      	adds	r3, #255	; 0xff
 80008ca:	213d      	movs	r1, #61	; 0x3d
 80008cc:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][12] = 0x22; //"
 80008ce:	4b68      	ldr	r3, [pc, #416]	; (8000a70 <main+0x80c>)
 80008d0:	183a      	adds	r2, r7, r0
 80008d2:	18d2      	adds	r2, r2, r3
 80008d4:	23ce      	movs	r3, #206	; 0xce
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	2122      	movs	r1, #34	; 0x22
 80008da:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][13] = 0x54; //T
 80008dc:	4b64      	ldr	r3, [pc, #400]	; (8000a70 <main+0x80c>)
 80008de:	183a      	adds	r2, r7, r0
 80008e0:	18d2      	adds	r2, r2, r3
 80008e2:	239e      	movs	r3, #158	; 0x9e
 80008e4:	33ff      	adds	r3, #255	; 0xff
 80008e6:	2154      	movs	r1, #84	; 0x54
 80008e8:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][14] = 0x43; //C
 80008ea:	4b61      	ldr	r3, [pc, #388]	; (8000a70 <main+0x80c>)
 80008ec:	183a      	adds	r2, r7, r0
 80008ee:	18d2      	adds	r2, r2, r3
 80008f0:	23cf      	movs	r3, #207	; 0xcf
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	2143      	movs	r1, #67	; 0x43
 80008f6:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][15] = 0x50; //P
 80008f8:	4b5d      	ldr	r3, [pc, #372]	; (8000a70 <main+0x80c>)
 80008fa:	183a      	adds	r2, r7, r0
 80008fc:	18d2      	adds	r2, r2, r3
 80008fe:	23a0      	movs	r3, #160	; 0xa0
 8000900:	33ff      	adds	r3, #255	; 0xff
 8000902:	2150      	movs	r1, #80	; 0x50
 8000904:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][16] = 0x22; //"
 8000906:	4b5a      	ldr	r3, [pc, #360]	; (8000a70 <main+0x80c>)
 8000908:	183a      	adds	r2, r7, r0
 800090a:	18d2      	adds	r2, r2, r3
 800090c:	23d0      	movs	r3, #208	; 0xd0
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2122      	movs	r1, #34	; 0x22
 8000912:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][17] = 0x2C; //,
 8000914:	4b56      	ldr	r3, [pc, #344]	; (8000a70 <main+0x80c>)
 8000916:	183a      	adds	r2, r7, r0
 8000918:	18d2      	adds	r2, r2, r3
 800091a:	23a2      	movs	r3, #162	; 0xa2
 800091c:	33ff      	adds	r3, #255	; 0xff
 800091e:	212c      	movs	r1, #44	; 0x2c
 8000920:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][18] = 0x22; //"
 8000922:	4b53      	ldr	r3, [pc, #332]	; (8000a70 <main+0x80c>)
 8000924:	183a      	adds	r2, r7, r0
 8000926:	18d2      	adds	r2, r2, r3
 8000928:	23d1      	movs	r3, #209	; 0xd1
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	2122      	movs	r1, #34	; 0x22
 800092e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][19] = 0x6D; //m
 8000930:	4b4f      	ldr	r3, [pc, #316]	; (8000a70 <main+0x80c>)
 8000932:	183a      	adds	r2, r7, r0
 8000934:	18d2      	adds	r2, r2, r3
 8000936:	23a4      	movs	r3, #164	; 0xa4
 8000938:	33ff      	adds	r3, #255	; 0xff
 800093a:	216d      	movs	r1, #109	; 0x6d
 800093c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][20] = 0x71; //q
 800093e:	4b4c      	ldr	r3, [pc, #304]	; (8000a70 <main+0x80c>)
 8000940:	183a      	adds	r2, r7, r0
 8000942:	18d2      	adds	r2, r2, r3
 8000944:	23d2      	movs	r3, #210	; 0xd2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2171      	movs	r1, #113	; 0x71
 800094a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][21] = 0x74; //t
 800094c:	4b48      	ldr	r3, [pc, #288]	; (8000a70 <main+0x80c>)
 800094e:	183a      	adds	r2, r7, r0
 8000950:	18d2      	adds	r2, r2, r3
 8000952:	23a6      	movs	r3, #166	; 0xa6
 8000954:	33ff      	adds	r3, #255	; 0xff
 8000956:	2174      	movs	r1, #116	; 0x74
 8000958:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][22] = 0x74; //t
 800095a:	4b45      	ldr	r3, [pc, #276]	; (8000a70 <main+0x80c>)
 800095c:	183a      	adds	r2, r7, r0
 800095e:	18d2      	adds	r2, r2, r3
 8000960:	23d3      	movs	r3, #211	; 0xd3
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	2174      	movs	r1, #116	; 0x74
 8000966:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][23] = 0x2E; //.
 8000968:	4b41      	ldr	r3, [pc, #260]	; (8000a70 <main+0x80c>)
 800096a:	183a      	adds	r2, r7, r0
 800096c:	18d2      	adds	r2, r2, r3
 800096e:	23a8      	movs	r3, #168	; 0xa8
 8000970:	33ff      	adds	r3, #255	; 0xff
 8000972:	212e      	movs	r1, #46	; 0x2e
 8000974:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][24] = 0x65; //e
 8000976:	4b3e      	ldr	r3, [pc, #248]	; (8000a70 <main+0x80c>)
 8000978:	183a      	adds	r2, r7, r0
 800097a:	18d2      	adds	r2, r2, r3
 800097c:	23d4      	movs	r3, #212	; 0xd4
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	2165      	movs	r1, #101	; 0x65
 8000982:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][25] = 0x63; //c
 8000984:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <main+0x80c>)
 8000986:	183a      	adds	r2, r7, r0
 8000988:	18d2      	adds	r2, r2, r3
 800098a:	23aa      	movs	r3, #170	; 0xaa
 800098c:	33ff      	adds	r3, #255	; 0xff
 800098e:	2163      	movs	r1, #99	; 0x63
 8000990:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][26] = 0x6C; //l
 8000992:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <main+0x80c>)
 8000994:	183a      	adds	r2, r7, r0
 8000996:	18d2      	adds	r2, r2, r3
 8000998:	23d5      	movs	r3, #213	; 0xd5
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	216c      	movs	r1, #108	; 0x6c
 800099e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][27] = 0x69; //i
 80009a0:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <main+0x80c>)
 80009a2:	183a      	adds	r2, r7, r0
 80009a4:	18d2      	adds	r2, r2, r3
 80009a6:	23ac      	movs	r3, #172	; 0xac
 80009a8:	33ff      	adds	r3, #255	; 0xff
 80009aa:	2169      	movs	r1, #105	; 0x69
 80009ac:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][28] = 0x70; //p
 80009ae:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <main+0x80c>)
 80009b0:	183a      	adds	r2, r7, r0
 80009b2:	18d2      	adds	r2, r2, r3
 80009b4:	23d6      	movs	r3, #214	; 0xd6
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2170      	movs	r1, #112	; 0x70
 80009ba:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][29] = 0x73; //s
 80009bc:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <main+0x80c>)
 80009be:	183a      	adds	r2, r7, r0
 80009c0:	18d2      	adds	r2, r2, r3
 80009c2:	23ae      	movs	r3, #174	; 0xae
 80009c4:	33ff      	adds	r3, #255	; 0xff
 80009c6:	2173      	movs	r1, #115	; 0x73
 80009c8:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][30] = 0x65; //e
 80009ca:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <main+0x80c>)
 80009cc:	183a      	adds	r2, r7, r0
 80009ce:	18d2      	adds	r2, r2, r3
 80009d0:	23d7      	movs	r3, #215	; 0xd7
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	2165      	movs	r1, #101	; 0x65
 80009d6:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][31] = 0x70; //p
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <main+0x80c>)
 80009da:	183a      	adds	r2, r7, r0
 80009dc:	18d2      	adds	r2, r2, r3
 80009de:	23b0      	movs	r3, #176	; 0xb0
 80009e0:	33ff      	adds	r3, #255	; 0xff
 80009e2:	2170      	movs	r1, #112	; 0x70
 80009e4:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][32] = 0x72; //r
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <main+0x80c>)
 80009e8:	183a      	adds	r2, r7, r0
 80009ea:	18d2      	adds	r2, r2, r3
 80009ec:	23d8      	movs	r3, #216	; 0xd8
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2172      	movs	r1, #114	; 0x72
 80009f2:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][33] = 0x6F; //o
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <main+0x80c>)
 80009f6:	183a      	adds	r2, r7, r0
 80009f8:	18d2      	adds	r2, r2, r3
 80009fa:	23b2      	movs	r3, #178	; 0xb2
 80009fc:	33ff      	adds	r3, #255	; 0xff
 80009fe:	216f      	movs	r1, #111	; 0x6f
 8000a00:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][34] = 0x6A; //j
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <main+0x80c>)
 8000a04:	183a      	adds	r2, r7, r0
 8000a06:	18d2      	adds	r2, r2, r3
 8000a08:	23d9      	movs	r3, #217	; 0xd9
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	216a      	movs	r1, #106	; 0x6a
 8000a0e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][35] = 0x65; //e
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <main+0x80c>)
 8000a12:	183a      	adds	r2, r7, r0
 8000a14:	18d2      	adds	r2, r2, r3
 8000a16:	23b4      	movs	r3, #180	; 0xb4
 8000a18:	33ff      	adds	r3, #255	; 0xff
 8000a1a:	2165      	movs	r1, #101	; 0x65
 8000a1c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][36] = 0x63; //c
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <main+0x80c>)
 8000a20:	183a      	adds	r2, r7, r0
 8000a22:	18d2      	adds	r2, r2, r3
 8000a24:	23da      	movs	r3, #218	; 0xda
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2163      	movs	r1, #99	; 0x63
 8000a2a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][37] = 0x74; //t
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <main+0x80c>)
 8000a2e:	183a      	adds	r2, r7, r0
 8000a30:	18d2      	adds	r2, r2, r3
 8000a32:	23b6      	movs	r3, #182	; 0xb6
 8000a34:	33ff      	adds	r3, #255	; 0xff
 8000a36:	2174      	movs	r1, #116	; 0x74
 8000a38:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][38] = 0x73; //s
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <main+0x80c>)
 8000a3c:	183a      	adds	r2, r7, r0
 8000a3e:	18d2      	adds	r2, r2, r3
 8000a40:	23db      	movs	r3, #219	; 0xdb
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2173      	movs	r1, #115	; 0x73
 8000a46:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][39] = 0x2E; //.
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <main+0x80c>)
 8000a4a:	183a      	adds	r2, r7, r0
 8000a4c:	18d2      	adds	r2, r2, r3
 8000a4e:	23b8      	movs	r3, #184	; 0xb8
 8000a50:	33ff      	adds	r3, #255	; 0xff
 8000a52:	212e      	movs	r1, #46	; 0x2e
 8000a54:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][40] = 0x69; //i
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <main+0x80c>)
 8000a58:	183a      	adds	r2, r7, r0
 8000a5a:	18d2      	adds	r2, r2, r3
 8000a5c:	23dc      	movs	r3, #220	; 0xdc
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	2169      	movs	r1, #105	; 0x69
 8000a62:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][41] = 0x6F; //o
 8000a64:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <main+0x80c>)
 8000a66:	183a      	adds	r2, r7, r0
 8000a68:	18d2      	adds	r2, r2, r3
 8000a6a:	23ba      	movs	r3, #186	; 0xba
 8000a6c:	e002      	b.n	8000a74 <main+0x810>
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	fffffd64 	.word	0xfffffd64
 8000a74:	33ff      	adds	r3, #255	; 0xff
 8000a76:	216f      	movs	r1, #111	; 0x6f
 8000a78:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][42] = 0x22; //"
 8000a7a:	4bfe      	ldr	r3, [pc, #1016]	; (8000e74 <main+0xc10>)
 8000a7c:	183a      	adds	r2, r7, r0
 8000a7e:	18d2      	adds	r2, r2, r3
 8000a80:	23dd      	movs	r3, #221	; 0xdd
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	2122      	movs	r1, #34	; 0x22
 8000a86:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][43] = 0x2C; //,
 8000a88:	4bfa      	ldr	r3, [pc, #1000]	; (8000e74 <main+0xc10>)
 8000a8a:	183a      	adds	r2, r7, r0
 8000a8c:	18d2      	adds	r2, r2, r3
 8000a8e:	23bc      	movs	r3, #188	; 0xbc
 8000a90:	33ff      	adds	r3, #255	; 0xff
 8000a92:	212c      	movs	r1, #44	; 0x2c
 8000a94:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][44] = 0x31; //1
 8000a96:	4bf7      	ldr	r3, [pc, #988]	; (8000e74 <main+0xc10>)
 8000a98:	183a      	adds	r2, r7, r0
 8000a9a:	18d2      	adds	r2, r2, r3
 8000a9c:	23de      	movs	r3, #222	; 0xde
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2131      	movs	r1, #49	; 0x31
 8000aa2:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][45] = 0x38; //8
 8000aa4:	4bf3      	ldr	r3, [pc, #972]	; (8000e74 <main+0xc10>)
 8000aa6:	183a      	adds	r2, r7, r0
 8000aa8:	18d2      	adds	r2, r2, r3
 8000aaa:	23be      	movs	r3, #190	; 0xbe
 8000aac:	33ff      	adds	r3, #255	; 0xff
 8000aae:	2138      	movs	r1, #56	; 0x38
 8000ab0:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][46] = 0x38; //8
 8000ab2:	4bf0      	ldr	r3, [pc, #960]	; (8000e74 <main+0xc10>)
 8000ab4:	183a      	adds	r2, r7, r0
 8000ab6:	18d2      	adds	r2, r2, r3
 8000ab8:	23df      	movs	r3, #223	; 0xdf
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2138      	movs	r1, #56	; 0x38
 8000abe:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][47] = 0x33; //3
 8000ac0:	4bec      	ldr	r3, [pc, #944]	; (8000e74 <main+0xc10>)
 8000ac2:	183a      	adds	r2, r7, r0
 8000ac4:	18d2      	adds	r2, r2, r3
 8000ac6:	23c0      	movs	r3, #192	; 0xc0
 8000ac8:	33ff      	adds	r3, #255	; 0xff
 8000aca:	2133      	movs	r1, #51	; 0x33
 8000acc:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSTART][48] = 0x0A; //enter
 8000ace:	4be9      	ldr	r3, [pc, #932]	; (8000e74 <main+0xc10>)
 8000ad0:	183a      	adds	r2, r7, r0
 8000ad2:	18d2      	adds	r2, r2, r3
 8000ad4:	23e0      	movs	r3, #224	; 0xe0
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	210a      	movs	r1, #10
 8000ada:	54d1      	strb	r1, [r2, r3]

	at_command[AT_CIPSEND][0]  = 0x41; //A
 8000adc:	4be5      	ldr	r3, [pc, #916]	; (8000e74 <main+0xc10>)
 8000ade:	183a      	adds	r2, r7, r0
 8000ae0:	18d2      	adds	r2, r2, r3
 8000ae2:	23e1      	movs	r3, #225	; 0xe1
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2141      	movs	r1, #65	; 0x41
 8000ae8:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][1]  = 0x54; //T
 8000aea:	4be2      	ldr	r3, [pc, #904]	; (8000e74 <main+0xc10>)
 8000aec:	183a      	adds	r2, r7, r0
 8000aee:	18d2      	adds	r2, r2, r3
 8000af0:	23c4      	movs	r3, #196	; 0xc4
 8000af2:	33ff      	adds	r3, #255	; 0xff
 8000af4:	2154      	movs	r1, #84	; 0x54
 8000af6:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][2]  = 0x2B; //+
 8000af8:	4bde      	ldr	r3, [pc, #888]	; (8000e74 <main+0xc10>)
 8000afa:	183a      	adds	r2, r7, r0
 8000afc:	18d2      	adds	r2, r2, r3
 8000afe:	23e2      	movs	r3, #226	; 0xe2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	212b      	movs	r1, #43	; 0x2b
 8000b04:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][3]  = 0x43; //C
 8000b06:	4bdb      	ldr	r3, [pc, #876]	; (8000e74 <main+0xc10>)
 8000b08:	183a      	adds	r2, r7, r0
 8000b0a:	18d2      	adds	r2, r2, r3
 8000b0c:	23c6      	movs	r3, #198	; 0xc6
 8000b0e:	33ff      	adds	r3, #255	; 0xff
 8000b10:	2143      	movs	r1, #67	; 0x43
 8000b12:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][4]  = 0x49; //I
 8000b14:	4bd7      	ldr	r3, [pc, #860]	; (8000e74 <main+0xc10>)
 8000b16:	183a      	adds	r2, r7, r0
 8000b18:	18d2      	adds	r2, r2, r3
 8000b1a:	23e3      	movs	r3, #227	; 0xe3
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	2149      	movs	r1, #73	; 0x49
 8000b20:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][5]  = 0x50; //P
 8000b22:	4bd4      	ldr	r3, [pc, #848]	; (8000e74 <main+0xc10>)
 8000b24:	183a      	adds	r2, r7, r0
 8000b26:	18d2      	adds	r2, r2, r3
 8000b28:	23c8      	movs	r3, #200	; 0xc8
 8000b2a:	33ff      	adds	r3, #255	; 0xff
 8000b2c:	2150      	movs	r1, #80	; 0x50
 8000b2e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][6]  = 0x53; //S
 8000b30:	4bd0      	ldr	r3, [pc, #832]	; (8000e74 <main+0xc10>)
 8000b32:	183a      	adds	r2, r7, r0
 8000b34:	18d2      	adds	r2, r2, r3
 8000b36:	23e4      	movs	r3, #228	; 0xe4
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	2153      	movs	r1, #83	; 0x53
 8000b3c:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][7]  = 0x45; //E
 8000b3e:	4bcd      	ldr	r3, [pc, #820]	; (8000e74 <main+0xc10>)
 8000b40:	183a      	adds	r2, r7, r0
 8000b42:	18d2      	adds	r2, r2, r3
 8000b44:	23ca      	movs	r3, #202	; 0xca
 8000b46:	33ff      	adds	r3, #255	; 0xff
 8000b48:	2145      	movs	r1, #69	; 0x45
 8000b4a:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][8]  = 0x4E; //N
 8000b4c:	4bc9      	ldr	r3, [pc, #804]	; (8000e74 <main+0xc10>)
 8000b4e:	183a      	adds	r2, r7, r0
 8000b50:	18d2      	adds	r2, r2, r3
 8000b52:	23e5      	movs	r3, #229	; 0xe5
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	214e      	movs	r1, #78	; 0x4e
 8000b58:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][9]  = 0x44; //D
 8000b5a:	4bc6      	ldr	r3, [pc, #792]	; (8000e74 <main+0xc10>)
 8000b5c:	183a      	adds	r2, r7, r0
 8000b5e:	18d2      	adds	r2, r2, r3
 8000b60:	23cc      	movs	r3, #204	; 0xcc
 8000b62:	33ff      	adds	r3, #255	; 0xff
 8000b64:	2144      	movs	r1, #68	; 0x44
 8000b66:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPSEND][10] = 0x0A; //enter
 8000b68:	4bc2      	ldr	r3, [pc, #776]	; (8000e74 <main+0xc10>)
 8000b6a:	183a      	adds	r2, r7, r0
 8000b6c:	18d2      	adds	r2, r2, r3
 8000b6e:	23e6      	movs	r3, #230	; 0xe6
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	210a      	movs	r1, #10
 8000b74:	54d1      	strb	r1, [r2, r3]

	at_command[AT_CIPCLOSE][0]   = 0x41; //A
 8000b76:	4bbf      	ldr	r3, [pc, #764]	; (8000e74 <main+0xc10>)
 8000b78:	183a      	adds	r2, r7, r0
 8000b7a:	18d2      	adds	r2, r2, r3
 8000b7c:	23fa      	movs	r3, #250	; 0xfa
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2141      	movs	r1, #65	; 0x41
 8000b82:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][1]   = 0x54; //T
 8000b84:	4bbb      	ldr	r3, [pc, #748]	; (8000e74 <main+0xc10>)
 8000b86:	183a      	adds	r2, r7, r0
 8000b88:	18d2      	adds	r2, r2, r3
 8000b8a:	23f6      	movs	r3, #246	; 0xf6
 8000b8c:	33ff      	adds	r3, #255	; 0xff
 8000b8e:	2154      	movs	r1, #84	; 0x54
 8000b90:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][2]   = 0x2B; //+
 8000b92:	4bb8      	ldr	r3, [pc, #736]	; (8000e74 <main+0xc10>)
 8000b94:	183a      	adds	r2, r7, r0
 8000b96:	18d2      	adds	r2, r2, r3
 8000b98:	23fb      	movs	r3, #251	; 0xfb
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	212b      	movs	r1, #43	; 0x2b
 8000b9e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][3]   = 0x43; //C
 8000ba0:	4bb4      	ldr	r3, [pc, #720]	; (8000e74 <main+0xc10>)
 8000ba2:	183a      	adds	r2, r7, r0
 8000ba4:	18d2      	adds	r2, r2, r3
 8000ba6:	23f8      	movs	r3, #248	; 0xf8
 8000ba8:	33ff      	adds	r3, #255	; 0xff
 8000baa:	2143      	movs	r1, #67	; 0x43
 8000bac:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][4]   = 0x49; //I
 8000bae:	4bb1      	ldr	r3, [pc, #708]	; (8000e74 <main+0xc10>)
 8000bb0:	183a      	adds	r2, r7, r0
 8000bb2:	18d2      	adds	r2, r2, r3
 8000bb4:	23fc      	movs	r3, #252	; 0xfc
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2149      	movs	r1, #73	; 0x49
 8000bba:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][5]   = 0x50; //P
 8000bbc:	4bad      	ldr	r3, [pc, #692]	; (8000e74 <main+0xc10>)
 8000bbe:	183a      	adds	r2, r7, r0
 8000bc0:	18d2      	adds	r2, r2, r3
 8000bc2:	23fa      	movs	r3, #250	; 0xfa
 8000bc4:	33ff      	adds	r3, #255	; 0xff
 8000bc6:	2150      	movs	r1, #80	; 0x50
 8000bc8:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][6]   = 0x43; //C
 8000bca:	4baa      	ldr	r3, [pc, #680]	; (8000e74 <main+0xc10>)
 8000bcc:	183a      	adds	r2, r7, r0
 8000bce:	18d2      	adds	r2, r2, r3
 8000bd0:	23fd      	movs	r3, #253	; 0xfd
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2143      	movs	r1, #67	; 0x43
 8000bd6:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][7]   = 0x4C; //L
 8000bd8:	4ba6      	ldr	r3, [pc, #664]	; (8000e74 <main+0xc10>)
 8000bda:	183a      	adds	r2, r7, r0
 8000bdc:	18d2      	adds	r2, r2, r3
 8000bde:	23fc      	movs	r3, #252	; 0xfc
 8000be0:	33ff      	adds	r3, #255	; 0xff
 8000be2:	214c      	movs	r1, #76	; 0x4c
 8000be4:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][8]   = 0x4F; //O
 8000be6:	4ba3      	ldr	r3, [pc, #652]	; (8000e74 <main+0xc10>)
 8000be8:	183a      	adds	r2, r7, r0
 8000bea:	18d2      	adds	r2, r2, r3
 8000bec:	23fe      	movs	r3, #254	; 0xfe
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	214f      	movs	r1, #79	; 0x4f
 8000bf2:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][9]   = 0x53; //S
 8000bf4:	4b9f      	ldr	r3, [pc, #636]	; (8000e74 <main+0xc10>)
 8000bf6:	183a      	adds	r2, r7, r0
 8000bf8:	18d2      	adds	r2, r2, r3
 8000bfa:	23fe      	movs	r3, #254	; 0xfe
 8000bfc:	33ff      	adds	r3, #255	; 0xff
 8000bfe:	2153      	movs	r1, #83	; 0x53
 8000c00:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][10]  = 0x45; //E
 8000c02:	4b9c      	ldr	r3, [pc, #624]	; (8000e74 <main+0xc10>)
 8000c04:	183a      	adds	r2, r7, r0
 8000c06:	18d2      	adds	r2, r2, r3
 8000c08:	23ff      	movs	r3, #255	; 0xff
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2145      	movs	r1, #69	; 0x45
 8000c0e:	54d1      	strb	r1, [r2, r3]
	at_command[AT_CIPCLOSE][11]  = 0x0A; //enter
 8000c10:	4b98      	ldr	r3, [pc, #608]	; (8000e74 <main+0xc10>)
 8000c12:	22ce      	movs	r2, #206	; 0xce
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	4694      	mov	ip, r2
 8000c18:	44bc      	add	ip, r7
 8000c1a:	4463      	add	r3, ip
 8000c1c:	4a96      	ldr	r2, [pc, #600]	; (8000e78 <main+0xc14>)
 8000c1e:	210a      	movs	r1, #10
 8000c20:	5499      	strb	r1, [r3, r2]

	unsigned char mqtt_packt_msg[100] = {0};
 8000c22:	4b96      	ldr	r3, [pc, #600]	; (8000e7c <main+0xc18>)
 8000c24:	22ce      	movs	r2, #206	; 0xce
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	4694      	mov	ip, r2
 8000c2a:	44bc      	add	ip, r7
 8000c2c:	4463      	add	r3, ip
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	3304      	adds	r3, #4
 8000c34:	2260      	movs	r2, #96	; 0x60
 8000c36:	2100      	movs	r1, #0
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f003 fb49 	bl	80042d0 <memset>

	mqtt_packt_msg[0]  = 0x10; // mqtt connect packet
 8000c3e:	4b8f      	ldr	r3, [pc, #572]	; (8000e7c <main+0xc18>)
 8000c40:	22ce      	movs	r2, #206	; 0xce
 8000c42:	0092      	lsls	r2, r2, #2
 8000c44:	4694      	mov	ip, r2
 8000c46:	44bc      	add	ip, r7
 8000c48:	4463      	add	r3, ip
 8000c4a:	2210      	movs	r2, #16
 8000c4c:	701a      	strb	r2, [r3, #0]
	mqtt_packt_msg[1]  = 0x13; // remaining length
 8000c4e:	4b8b      	ldr	r3, [pc, #556]	; (8000e7c <main+0xc18>)
 8000c50:	22ce      	movs	r2, #206	; 0xce
 8000c52:	0092      	lsls	r2, r2, #2
 8000c54:	4694      	mov	ip, r2
 8000c56:	44bc      	add	ip, r7
 8000c58:	4463      	add	r3, ip
 8000c5a:	2213      	movs	r2, #19
 8000c5c:	705a      	strb	r2, [r3, #1]
	mqtt_packt_msg[2]  = 0x00; // protocol length
 8000c5e:	4b87      	ldr	r3, [pc, #540]	; (8000e7c <main+0xc18>)
 8000c60:	22ce      	movs	r2, #206	; 0xce
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	4694      	mov	ip, r2
 8000c66:	44bc      	add	ip, r7
 8000c68:	4463      	add	r3, ip
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	709a      	strb	r2, [r3, #2]
	mqtt_packt_msg[3]  = 0x04; // protocol length
 8000c6e:	4b83      	ldr	r3, [pc, #524]	; (8000e7c <main+0xc18>)
 8000c70:	22ce      	movs	r2, #206	; 0xce
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	4694      	mov	ip, r2
 8000c76:	44bc      	add	ip, r7
 8000c78:	4463      	add	r3, ip
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	70da      	strb	r2, [r3, #3]
	mqtt_packt_msg[4]  = 0x4D; // protocol M
 8000c7e:	4b7f      	ldr	r3, [pc, #508]	; (8000e7c <main+0xc18>)
 8000c80:	22ce      	movs	r2, #206	; 0xce
 8000c82:	0092      	lsls	r2, r2, #2
 8000c84:	4694      	mov	ip, r2
 8000c86:	44bc      	add	ip, r7
 8000c88:	4463      	add	r3, ip
 8000c8a:	224d      	movs	r2, #77	; 0x4d
 8000c8c:	711a      	strb	r2, [r3, #4]
	mqtt_packt_msg[5]  = 0x51; // protocol Q
 8000c8e:	4b7b      	ldr	r3, [pc, #492]	; (8000e7c <main+0xc18>)
 8000c90:	22ce      	movs	r2, #206	; 0xce
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	4694      	mov	ip, r2
 8000c96:	44bc      	add	ip, r7
 8000c98:	4463      	add	r3, ip
 8000c9a:	2251      	movs	r2, #81	; 0x51
 8000c9c:	715a      	strb	r2, [r3, #5]
	mqtt_packt_msg[6]  = 0x54; // protocol T
 8000c9e:	4b77      	ldr	r3, [pc, #476]	; (8000e7c <main+0xc18>)
 8000ca0:	22ce      	movs	r2, #206	; 0xce
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	44bc      	add	ip, r7
 8000ca8:	4463      	add	r3, ip
 8000caa:	2254      	movs	r2, #84	; 0x54
 8000cac:	719a      	strb	r2, [r3, #6]
	mqtt_packt_msg[7]  = 0x54; // protocol T
 8000cae:	4b73      	ldr	r3, [pc, #460]	; (8000e7c <main+0xc18>)
 8000cb0:	22ce      	movs	r2, #206	; 0xce
 8000cb2:	0092      	lsls	r2, r2, #2
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	44bc      	add	ip, r7
 8000cb8:	4463      	add	r3, ip
 8000cba:	2254      	movs	r2, #84	; 0x54
 8000cbc:	71da      	strb	r2, [r3, #7]
	mqtt_packt_msg[8]  = 0x04; // level
 8000cbe:	4b6f      	ldr	r3, [pc, #444]	; (8000e7c <main+0xc18>)
 8000cc0:	22ce      	movs	r2, #206	; 0xce
 8000cc2:	0092      	lsls	r2, r2, #2
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	44bc      	add	ip, r7
 8000cc8:	4463      	add	r3, ip
 8000cca:	2204      	movs	r2, #4
 8000ccc:	721a      	strb	r2, [r3, #8]
	mqtt_packt_msg[9]  = 0x02; // flag
 8000cce:	4b6b      	ldr	r3, [pc, #428]	; (8000e7c <main+0xc18>)
 8000cd0:	22ce      	movs	r2, #206	; 0xce
 8000cd2:	0092      	lsls	r2, r2, #2
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	44bc      	add	ip, r7
 8000cd8:	4463      	add	r3, ip
 8000cda:	2202      	movs	r2, #2
 8000cdc:	725a      	strb	r2, [r3, #9]
	mqtt_packt_msg[10] = 0x00; // KA
 8000cde:	4b67      	ldr	r3, [pc, #412]	; (8000e7c <main+0xc18>)
 8000ce0:	22ce      	movs	r2, #206	; 0xce
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	44bc      	add	ip, r7
 8000ce8:	4463      	add	r3, ip
 8000cea:	2200      	movs	r2, #0
 8000cec:	729a      	strb	r2, [r3, #10]
	mqtt_packt_msg[11] = 0x3C; // KA
 8000cee:	4b63      	ldr	r3, [pc, #396]	; (8000e7c <main+0xc18>)
 8000cf0:	22ce      	movs	r2, #206	; 0xce
 8000cf2:	0092      	lsls	r2, r2, #2
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	44bc      	add	ip, r7
 8000cf8:	4463      	add	r3, ip
 8000cfa:	223c      	movs	r2, #60	; 0x3c
 8000cfc:	72da      	strb	r2, [r3, #11]
	mqtt_packt_msg[12] = 0x00; // CID length
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <main+0xc18>)
 8000d00:	22ce      	movs	r2, #206	; 0xce
 8000d02:	0092      	lsls	r2, r2, #2
 8000d04:	4694      	mov	ip, r2
 8000d06:	44bc      	add	ip, r7
 8000d08:	4463      	add	r3, ip
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	731a      	strb	r2, [r3, #12]
	mqtt_packt_msg[13] = 0x07; // CID length
 8000d0e:	4b5b      	ldr	r3, [pc, #364]	; (8000e7c <main+0xc18>)
 8000d10:	22ce      	movs	r2, #206	; 0xce
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	4694      	mov	ip, r2
 8000d16:	44bc      	add	ip, r7
 8000d18:	4463      	add	r3, ip
 8000d1a:	2207      	movs	r2, #7
 8000d1c:	735a      	strb	r2, [r3, #13]
	mqtt_packt_msg[14] = 0x63; // CID c
 8000d1e:	4b57      	ldr	r3, [pc, #348]	; (8000e7c <main+0xc18>)
 8000d20:	22ce      	movs	r2, #206	; 0xce
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	4694      	mov	ip, r2
 8000d26:	44bc      	add	ip, r7
 8000d28:	4463      	add	r3, ip
 8000d2a:	2263      	movs	r2, #99	; 0x63
 8000d2c:	739a      	strb	r2, [r3, #14]
	mqtt_packt_msg[15] = 0x67; // CID g
 8000d2e:	4b53      	ldr	r3, [pc, #332]	; (8000e7c <main+0xc18>)
 8000d30:	22ce      	movs	r2, #206	; 0xce
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	4694      	mov	ip, r2
 8000d36:	44bc      	add	ip, r7
 8000d38:	4463      	add	r3, ip
 8000d3a:	2267      	movs	r2, #103	; 0x67
 8000d3c:	73da      	strb	r2, [r3, #15]
	mqtt_packt_msg[16] = 0x70; // CID p
 8000d3e:	4b4f      	ldr	r3, [pc, #316]	; (8000e7c <main+0xc18>)
 8000d40:	22ce      	movs	r2, #206	; 0xce
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	4694      	mov	ip, r2
 8000d46:	44bc      	add	ip, r7
 8000d48:	4463      	add	r3, ip
 8000d4a:	2270      	movs	r2, #112	; 0x70
 8000d4c:	741a      	strb	r2, [r3, #16]
	mqtt_packt_msg[17] = 0x73; // CID s
 8000d4e:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <main+0xc18>)
 8000d50:	22ce      	movs	r2, #206	; 0xce
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4694      	mov	ip, r2
 8000d56:	44bc      	add	ip, r7
 8000d58:	4463      	add	r3, ip
 8000d5a:	2273      	movs	r2, #115	; 0x73
 8000d5c:	745a      	strb	r2, [r3, #17]
	mqtt_packt_msg[18] = 0x30; // CID 0
 8000d5e:	4b47      	ldr	r3, [pc, #284]	; (8000e7c <main+0xc18>)
 8000d60:	22ce      	movs	r2, #206	; 0xce
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	4694      	mov	ip, r2
 8000d66:	44bc      	add	ip, r7
 8000d68:	4463      	add	r3, ip
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	749a      	strb	r2, [r3, #18]
	mqtt_packt_msg[19] = 0x30; // CID 0
 8000d6e:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <main+0xc18>)
 8000d70:	22ce      	movs	r2, #206	; 0xce
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	4694      	mov	ip, r2
 8000d76:	44bc      	add	ip, r7
 8000d78:	4463      	add	r3, ip
 8000d7a:	2230      	movs	r2, #48	; 0x30
 8000d7c:	74da      	strb	r2, [r3, #19]
	mqtt_packt_msg[20] = 0x31; // CID 1
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <main+0xc18>)
 8000d80:	22ce      	movs	r2, #206	; 0xce
 8000d82:	0092      	lsls	r2, r2, #2
 8000d84:	4694      	mov	ip, r2
 8000d86:	44bc      	add	ip, r7
 8000d88:	4463      	add	r3, ip
 8000d8a:	2231      	movs	r2, #49	; 0x31
 8000d8c:	751a      	strb	r2, [r3, #20]
	mqtt_packt_msg[21] = 0x30; // mqtt publish packet
 8000d8e:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <main+0xc18>)
 8000d90:	22ce      	movs	r2, #206	; 0xce
 8000d92:	0092      	lsls	r2, r2, #2
 8000d94:	4694      	mov	ip, r2
 8000d96:	44bc      	add	ip, r7
 8000d98:	4463      	add	r3, ip
 8000d9a:	2230      	movs	r2, #48	; 0x30
 8000d9c:	755a      	strb	r2, [r3, #21]
	mqtt_packt_msg[22] = 0x38; // remaining length
 8000d9e:	4b37      	ldr	r3, [pc, #220]	; (8000e7c <main+0xc18>)
 8000da0:	22ce      	movs	r2, #206	; 0xce
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	4694      	mov	ip, r2
 8000da6:	44bc      	add	ip, r7
 8000da8:	4463      	add	r3, ip
 8000daa:	2238      	movs	r2, #56	; 0x38
 8000dac:	759a      	strb	r2, [r3, #22]
	mqtt_packt_msg[23] = 0x00; // topic length
 8000dae:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <main+0xc18>)
 8000db0:	22ce      	movs	r2, #206	; 0xce
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	4694      	mov	ip, r2
 8000db6:	44bc      	add	ip, r7
 8000db8:	4463      	add	r3, ip
 8000dba:	2200      	movs	r2, #0
 8000dbc:	75da      	strb	r2, [r3, #23]
	mqtt_packt_msg[24] = 0x0B; // topic length
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <main+0xc18>)
 8000dc0:	22ce      	movs	r2, #206	; 0xce
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	4694      	mov	ip, r2
 8000dc6:	44bc      	add	ip, r7
 8000dc8:	4463      	add	r3, ip
 8000dca:	220b      	movs	r2, #11
 8000dcc:	761a      	strb	r2, [r3, #24]
	mqtt_packt_msg[25] = 0x63; // topic c
 8000dce:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <main+0xc18>)
 8000dd0:	22ce      	movs	r2, #206	; 0xce
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	44bc      	add	ip, r7
 8000dd8:	4463      	add	r3, ip
 8000dda:	2263      	movs	r2, #99	; 0x63
 8000ddc:	765a      	strb	r2, [r3, #25]
	mqtt_packt_msg[26] = 0x6F; // topic o
 8000dde:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <main+0xc18>)
 8000de0:	22ce      	movs	r2, #206	; 0xce
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	4694      	mov	ip, r2
 8000de6:	44bc      	add	ip, r7
 8000de8:	4463      	add	r3, ip
 8000dea:	226f      	movs	r2, #111	; 0x6f
 8000dec:	769a      	strb	r2, [r3, #26]
	mqtt_packt_msg[27] = 0x6C; // topic l
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <main+0xc18>)
 8000df0:	22ce      	movs	r2, #206	; 0xce
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	4694      	mov	ip, r2
 8000df6:	44bc      	add	ip, r7
 8000df8:	4463      	add	r3, ip
 8000dfa:	226c      	movs	r2, #108	; 0x6c
 8000dfc:	76da      	strb	r2, [r3, #27]
	mqtt_packt_msg[28] = 0x65; // topic e
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <main+0xc18>)
 8000e00:	22ce      	movs	r2, #206	; 0xce
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	4694      	mov	ip, r2
 8000e06:	44bc      	add	ip, r7
 8000e08:	4463      	add	r3, ip
 8000e0a:	2265      	movs	r2, #101	; 0x65
 8000e0c:	771a      	strb	r2, [r3, #28]
	mqtt_packt_msg[29] = 0x69; // topic i
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <main+0xc18>)
 8000e10:	22ce      	movs	r2, #206	; 0xce
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	4694      	mov	ip, r2
 8000e16:	44bc      	add	ip, r7
 8000e18:	4463      	add	r3, ip
 8000e1a:	2269      	movs	r2, #105	; 0x69
 8000e1c:	775a      	strb	r2, [r3, #29]
	mqtt_packt_msg[30] = 0x72; // topic r
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <main+0xc18>)
 8000e20:	22ce      	movs	r2, #206	; 0xce
 8000e22:	0092      	lsls	r2, r2, #2
 8000e24:	4694      	mov	ip, r2
 8000e26:	44bc      	add	ip, r7
 8000e28:	4463      	add	r3, ip
 8000e2a:	2272      	movs	r2, #114	; 0x72
 8000e2c:	779a      	strb	r2, [r3, #30]
	mqtt_packt_msg[31] = 0x61; // topic a
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <main+0xc18>)
 8000e30:	22ce      	movs	r2, #206	; 0xce
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	4694      	mov	ip, r2
 8000e36:	44bc      	add	ip, r7
 8000e38:	4463      	add	r3, ip
 8000e3a:	2261      	movs	r2, #97	; 0x61
 8000e3c:	77da      	strb	r2, [r3, #31]
	mqtt_packt_msg[32] = 0x5F; // topic _
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <main+0xc18>)
 8000e40:	22ce      	movs	r2, #206	; 0xce
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4694      	mov	ip, r2
 8000e46:	44bc      	add	ip, r7
 8000e48:	4463      	add	r3, ip
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	215f      	movs	r1, #95	; 0x5f
 8000e4e:	5499      	strb	r1, [r3, r2]
	mqtt_packt_msg[33] = 0x67; // topic g
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <main+0xc18>)
 8000e52:	22ce      	movs	r2, #206	; 0xce
 8000e54:	0092      	lsls	r2, r2, #2
 8000e56:	4694      	mov	ip, r2
 8000e58:	44bc      	add	ip, r7
 8000e5a:	4463      	add	r3, ip
 8000e5c:	2221      	movs	r2, #33	; 0x21
 8000e5e:	2167      	movs	r1, #103	; 0x67
 8000e60:	5499      	strb	r1, [r3, r2]
	mqtt_packt_msg[34] = 0x70; // topic p
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <main+0xc18>)
 8000e64:	22ce      	movs	r2, #206	; 0xce
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	4694      	mov	ip, r2
 8000e6a:	44bc      	add	ip, r7
 8000e6c:	4463      	add	r3, ip
 8000e6e:	2222      	movs	r2, #34	; 0x22
 8000e70:	2170      	movs	r1, #112	; 0x70
 8000e72:	e005      	b.n	8000e80 <main+0xc1c>
 8000e74:	fffffd64 	.word	0xfffffd64
 8000e78:	000001ff 	.word	0x000001ff
 8000e7c:	fffffd00 	.word	0xfffffd00
 8000e80:	5499      	strb	r1, [r3, r2]
	mqtt_packt_msg[35] = 0x73; // topic s
 8000e82:	4bfb      	ldr	r3, [pc, #1004]	; (8001270 <main+0x100c>)
 8000e84:	22ce      	movs	r2, #206	; 0xce
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	4694      	mov	ip, r2
 8000e8a:	44bc      	add	ip, r7
 8000e8c:	4463      	add	r3, ip
 8000e8e:	2223      	movs	r2, #35	; 0x23
 8000e90:	2173      	movs	r1, #115	; 0x73
 8000e92:	5499      	strb	r1, [r3, r2]

	unsigned char mqtt_packt_error[50] = {0};
 8000e94:	4bf7      	ldr	r3, [pc, #988]	; (8001274 <main+0x1010>)
 8000e96:	22ce      	movs	r2, #206	; 0xce
 8000e98:	0092      	lsls	r2, r2, #2
 8000e9a:	4694      	mov	ip, r2
 8000e9c:	44bc      	add	ip, r7
 8000e9e:	4463      	add	r3, ip
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	222e      	movs	r2, #46	; 0x2e
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f003 fa10 	bl	80042d0 <memset>

	mqtt_packt_error[0]  = 0x10; // mqtt connect packet
 8000eb0:	4bf0      	ldr	r3, [pc, #960]	; (8001274 <main+0x1010>)
 8000eb2:	22ce      	movs	r2, #206	; 0xce
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	4694      	mov	ip, r2
 8000eb8:	44bc      	add	ip, r7
 8000eba:	4463      	add	r3, ip
 8000ebc:	2210      	movs	r2, #16
 8000ebe:	701a      	strb	r2, [r3, #0]
	mqtt_packt_error[1]  = 0x13; // remaining length
 8000ec0:	4bec      	ldr	r3, [pc, #944]	; (8001274 <main+0x1010>)
 8000ec2:	22ce      	movs	r2, #206	; 0xce
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	4694      	mov	ip, r2
 8000ec8:	44bc      	add	ip, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	2213      	movs	r2, #19
 8000ece:	705a      	strb	r2, [r3, #1]
	mqtt_packt_error[2]  = 0x00; // protocol length
 8000ed0:	4be8      	ldr	r3, [pc, #928]	; (8001274 <main+0x1010>)
 8000ed2:	22ce      	movs	r2, #206	; 0xce
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4694      	mov	ip, r2
 8000ed8:	44bc      	add	ip, r7
 8000eda:	4463      	add	r3, ip
 8000edc:	2200      	movs	r2, #0
 8000ede:	709a      	strb	r2, [r3, #2]
	mqtt_packt_error[3]  = 0x04; // protocol length
 8000ee0:	4be4      	ldr	r3, [pc, #912]	; (8001274 <main+0x1010>)
 8000ee2:	22ce      	movs	r2, #206	; 0xce
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	4694      	mov	ip, r2
 8000ee8:	44bc      	add	ip, r7
 8000eea:	4463      	add	r3, ip
 8000eec:	2204      	movs	r2, #4
 8000eee:	70da      	strb	r2, [r3, #3]
	mqtt_packt_error[4]  = 0x4D; // protocol M
 8000ef0:	4be0      	ldr	r3, [pc, #896]	; (8001274 <main+0x1010>)
 8000ef2:	22ce      	movs	r2, #206	; 0xce
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	4694      	mov	ip, r2
 8000ef8:	44bc      	add	ip, r7
 8000efa:	4463      	add	r3, ip
 8000efc:	224d      	movs	r2, #77	; 0x4d
 8000efe:	711a      	strb	r2, [r3, #4]
	mqtt_packt_error[5]  = 0x51; // protocol Q
 8000f00:	4bdc      	ldr	r3, [pc, #880]	; (8001274 <main+0x1010>)
 8000f02:	22ce      	movs	r2, #206	; 0xce
 8000f04:	0092      	lsls	r2, r2, #2
 8000f06:	4694      	mov	ip, r2
 8000f08:	44bc      	add	ip, r7
 8000f0a:	4463      	add	r3, ip
 8000f0c:	2251      	movs	r2, #81	; 0x51
 8000f0e:	715a      	strb	r2, [r3, #5]
	mqtt_packt_error[6]  = 0x54; // protocol T
 8000f10:	4bd8      	ldr	r3, [pc, #864]	; (8001274 <main+0x1010>)
 8000f12:	22ce      	movs	r2, #206	; 0xce
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4694      	mov	ip, r2
 8000f18:	44bc      	add	ip, r7
 8000f1a:	4463      	add	r3, ip
 8000f1c:	2254      	movs	r2, #84	; 0x54
 8000f1e:	719a      	strb	r2, [r3, #6]
	mqtt_packt_error[7]  = 0x54; // protocol T
 8000f20:	4bd4      	ldr	r3, [pc, #848]	; (8001274 <main+0x1010>)
 8000f22:	22ce      	movs	r2, #206	; 0xce
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	4694      	mov	ip, r2
 8000f28:	44bc      	add	ip, r7
 8000f2a:	4463      	add	r3, ip
 8000f2c:	2254      	movs	r2, #84	; 0x54
 8000f2e:	71da      	strb	r2, [r3, #7]
	mqtt_packt_error[8]  = 0x04; // level
 8000f30:	4bd0      	ldr	r3, [pc, #832]	; (8001274 <main+0x1010>)
 8000f32:	22ce      	movs	r2, #206	; 0xce
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	4694      	mov	ip, r2
 8000f38:	44bc      	add	ip, r7
 8000f3a:	4463      	add	r3, ip
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	721a      	strb	r2, [r3, #8]
	mqtt_packt_error[9]  = 0x02; // flag
 8000f40:	4bcc      	ldr	r3, [pc, #816]	; (8001274 <main+0x1010>)
 8000f42:	22ce      	movs	r2, #206	; 0xce
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	4694      	mov	ip, r2
 8000f48:	44bc      	add	ip, r7
 8000f4a:	4463      	add	r3, ip
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	725a      	strb	r2, [r3, #9]
	mqtt_packt_error[10] = 0x00; // KA
 8000f50:	4bc8      	ldr	r3, [pc, #800]	; (8001274 <main+0x1010>)
 8000f52:	22ce      	movs	r2, #206	; 0xce
 8000f54:	0092      	lsls	r2, r2, #2
 8000f56:	4694      	mov	ip, r2
 8000f58:	44bc      	add	ip, r7
 8000f5a:	4463      	add	r3, ip
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	729a      	strb	r2, [r3, #10]
	mqtt_packt_error[11] = 0x3C; // KA
 8000f60:	4bc4      	ldr	r3, [pc, #784]	; (8001274 <main+0x1010>)
 8000f62:	22ce      	movs	r2, #206	; 0xce
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	4694      	mov	ip, r2
 8000f68:	44bc      	add	ip, r7
 8000f6a:	4463      	add	r3, ip
 8000f6c:	223c      	movs	r2, #60	; 0x3c
 8000f6e:	72da      	strb	r2, [r3, #11]
	mqtt_packt_error[12] = 0x00; // CID length
 8000f70:	4bc0      	ldr	r3, [pc, #768]	; (8001274 <main+0x1010>)
 8000f72:	22ce      	movs	r2, #206	; 0xce
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	4694      	mov	ip, r2
 8000f78:	44bc      	add	ip, r7
 8000f7a:	4463      	add	r3, ip
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	731a      	strb	r2, [r3, #12]
	mqtt_packt_error[13] = 0x07; // CID length
 8000f80:	4bbc      	ldr	r3, [pc, #752]	; (8001274 <main+0x1010>)
 8000f82:	22ce      	movs	r2, #206	; 0xce
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	4694      	mov	ip, r2
 8000f88:	44bc      	add	ip, r7
 8000f8a:	4463      	add	r3, ip
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	735a      	strb	r2, [r3, #13]
	mqtt_packt_error[14] = 0x63; // CID c
 8000f90:	4bb8      	ldr	r3, [pc, #736]	; (8001274 <main+0x1010>)
 8000f92:	22ce      	movs	r2, #206	; 0xce
 8000f94:	0092      	lsls	r2, r2, #2
 8000f96:	4694      	mov	ip, r2
 8000f98:	44bc      	add	ip, r7
 8000f9a:	4463      	add	r3, ip
 8000f9c:	2263      	movs	r2, #99	; 0x63
 8000f9e:	739a      	strb	r2, [r3, #14]
	mqtt_packt_error[15] = 0x67; // CID g
 8000fa0:	4bb4      	ldr	r3, [pc, #720]	; (8001274 <main+0x1010>)
 8000fa2:	22ce      	movs	r2, #206	; 0xce
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	4694      	mov	ip, r2
 8000fa8:	44bc      	add	ip, r7
 8000faa:	4463      	add	r3, ip
 8000fac:	2267      	movs	r2, #103	; 0x67
 8000fae:	73da      	strb	r2, [r3, #15]
	mqtt_packt_error[16] = 0x70; // CID p
 8000fb0:	4bb0      	ldr	r3, [pc, #704]	; (8001274 <main+0x1010>)
 8000fb2:	22ce      	movs	r2, #206	; 0xce
 8000fb4:	0092      	lsls	r2, r2, #2
 8000fb6:	4694      	mov	ip, r2
 8000fb8:	44bc      	add	ip, r7
 8000fba:	4463      	add	r3, ip
 8000fbc:	2270      	movs	r2, #112	; 0x70
 8000fbe:	741a      	strb	r2, [r3, #16]
	mqtt_packt_error[17] = 0x73; // CID s
 8000fc0:	4bac      	ldr	r3, [pc, #688]	; (8001274 <main+0x1010>)
 8000fc2:	22ce      	movs	r2, #206	; 0xce
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	4694      	mov	ip, r2
 8000fc8:	44bc      	add	ip, r7
 8000fca:	4463      	add	r3, ip
 8000fcc:	2273      	movs	r2, #115	; 0x73
 8000fce:	745a      	strb	r2, [r3, #17]
	mqtt_packt_error[18] = 0x30; // CID 0
 8000fd0:	4ba8      	ldr	r3, [pc, #672]	; (8001274 <main+0x1010>)
 8000fd2:	22ce      	movs	r2, #206	; 0xce
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	4694      	mov	ip, r2
 8000fd8:	44bc      	add	ip, r7
 8000fda:	4463      	add	r3, ip
 8000fdc:	2230      	movs	r2, #48	; 0x30
 8000fde:	749a      	strb	r2, [r3, #18]
	mqtt_packt_error[19] = 0x30; // CID 0
 8000fe0:	4ba4      	ldr	r3, [pc, #656]	; (8001274 <main+0x1010>)
 8000fe2:	22ce      	movs	r2, #206	; 0xce
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	4694      	mov	ip, r2
 8000fe8:	44bc      	add	ip, r7
 8000fea:	4463      	add	r3, ip
 8000fec:	2230      	movs	r2, #48	; 0x30
 8000fee:	74da      	strb	r2, [r3, #19]
	mqtt_packt_error[20] = 0x31; // CID 1
 8000ff0:	4ba0      	ldr	r3, [pc, #640]	; (8001274 <main+0x1010>)
 8000ff2:	22ce      	movs	r2, #206	; 0xce
 8000ff4:	0092      	lsls	r2, r2, #2
 8000ff6:	4694      	mov	ip, r2
 8000ff8:	44bc      	add	ip, r7
 8000ffa:	4463      	add	r3, ip
 8000ffc:	2231      	movs	r2, #49	; 0x31
 8000ffe:	751a      	strb	r2, [r3, #20]
	mqtt_packt_error[21] = 0x30; // mqtt publish packet
 8001000:	4b9c      	ldr	r3, [pc, #624]	; (8001274 <main+0x1010>)
 8001002:	22ce      	movs	r2, #206	; 0xce
 8001004:	0092      	lsls	r2, r2, #2
 8001006:	4694      	mov	ip, r2
 8001008:	44bc      	add	ip, r7
 800100a:	4463      	add	r3, ip
 800100c:	2230      	movs	r2, #48	; 0x30
 800100e:	755a      	strb	r2, [r3, #21]
	mqtt_packt_error[22] = 0x0F; // remaining length
 8001010:	4b98      	ldr	r3, [pc, #608]	; (8001274 <main+0x1010>)
 8001012:	22ce      	movs	r2, #206	; 0xce
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4694      	mov	ip, r2
 8001018:	44bc      	add	ip, r7
 800101a:	4463      	add	r3, ip
 800101c:	220f      	movs	r2, #15
 800101e:	759a      	strb	r2, [r3, #22]
	mqtt_packt_error[23] = 0x00; // topic length
 8001020:	4b94      	ldr	r3, [pc, #592]	; (8001274 <main+0x1010>)
 8001022:	22ce      	movs	r2, #206	; 0xce
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	4694      	mov	ip, r2
 8001028:	44bc      	add	ip, r7
 800102a:	4463      	add	r3, ip
 800102c:	2200      	movs	r2, #0
 800102e:	75da      	strb	r2, [r3, #23]
	mqtt_packt_error[24] = 0x0B; // topic length
 8001030:	4b90      	ldr	r3, [pc, #576]	; (8001274 <main+0x1010>)
 8001032:	22ce      	movs	r2, #206	; 0xce
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	4694      	mov	ip, r2
 8001038:	44bc      	add	ip, r7
 800103a:	4463      	add	r3, ip
 800103c:	220b      	movs	r2, #11
 800103e:	761a      	strb	r2, [r3, #24]
	mqtt_packt_error[25] = 0x63; // topic c
 8001040:	4b8c      	ldr	r3, [pc, #560]	; (8001274 <main+0x1010>)
 8001042:	22ce      	movs	r2, #206	; 0xce
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	4694      	mov	ip, r2
 8001048:	44bc      	add	ip, r7
 800104a:	4463      	add	r3, ip
 800104c:	2263      	movs	r2, #99	; 0x63
 800104e:	765a      	strb	r2, [r3, #25]
	mqtt_packt_error[26] = 0x6F; // topic o
 8001050:	4b88      	ldr	r3, [pc, #544]	; (8001274 <main+0x1010>)
 8001052:	22ce      	movs	r2, #206	; 0xce
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	4694      	mov	ip, r2
 8001058:	44bc      	add	ip, r7
 800105a:	4463      	add	r3, ip
 800105c:	226f      	movs	r2, #111	; 0x6f
 800105e:	769a      	strb	r2, [r3, #26]
	mqtt_packt_error[27] = 0x6C; // topic l
 8001060:	4b84      	ldr	r3, [pc, #528]	; (8001274 <main+0x1010>)
 8001062:	22ce      	movs	r2, #206	; 0xce
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	4694      	mov	ip, r2
 8001068:	44bc      	add	ip, r7
 800106a:	4463      	add	r3, ip
 800106c:	226c      	movs	r2, #108	; 0x6c
 800106e:	76da      	strb	r2, [r3, #27]
	mqtt_packt_error[28] = 0x65; // topic e
 8001070:	4b80      	ldr	r3, [pc, #512]	; (8001274 <main+0x1010>)
 8001072:	22ce      	movs	r2, #206	; 0xce
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	4694      	mov	ip, r2
 8001078:	44bc      	add	ip, r7
 800107a:	4463      	add	r3, ip
 800107c:	2265      	movs	r2, #101	; 0x65
 800107e:	771a      	strb	r2, [r3, #28]
	mqtt_packt_error[29] = 0x69; // topic i
 8001080:	4b7c      	ldr	r3, [pc, #496]	; (8001274 <main+0x1010>)
 8001082:	22ce      	movs	r2, #206	; 0xce
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4694      	mov	ip, r2
 8001088:	44bc      	add	ip, r7
 800108a:	4463      	add	r3, ip
 800108c:	2269      	movs	r2, #105	; 0x69
 800108e:	775a      	strb	r2, [r3, #29]
	mqtt_packt_error[30] = 0x72; // topic r
 8001090:	4b78      	ldr	r3, [pc, #480]	; (8001274 <main+0x1010>)
 8001092:	22ce      	movs	r2, #206	; 0xce
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	4694      	mov	ip, r2
 8001098:	44bc      	add	ip, r7
 800109a:	4463      	add	r3, ip
 800109c:	2272      	movs	r2, #114	; 0x72
 800109e:	779a      	strb	r2, [r3, #30]
	mqtt_packt_error[31] = 0x61; // topic a
 80010a0:	4b74      	ldr	r3, [pc, #464]	; (8001274 <main+0x1010>)
 80010a2:	22ce      	movs	r2, #206	; 0xce
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	4694      	mov	ip, r2
 80010a8:	44bc      	add	ip, r7
 80010aa:	4463      	add	r3, ip
 80010ac:	2261      	movs	r2, #97	; 0x61
 80010ae:	77da      	strb	r2, [r3, #31]
	mqtt_packt_error[32] = 0x5F; // topic _
 80010b0:	4b70      	ldr	r3, [pc, #448]	; (8001274 <main+0x1010>)
 80010b2:	22ce      	movs	r2, #206	; 0xce
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4694      	mov	ip, r2
 80010b8:	44bc      	add	ip, r7
 80010ba:	4463      	add	r3, ip
 80010bc:	2220      	movs	r2, #32
 80010be:	215f      	movs	r1, #95	; 0x5f
 80010c0:	5499      	strb	r1, [r3, r2]
	mqtt_packt_error[33] = 0x67; // topic g
 80010c2:	4b6c      	ldr	r3, [pc, #432]	; (8001274 <main+0x1010>)
 80010c4:	22ce      	movs	r2, #206	; 0xce
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4694      	mov	ip, r2
 80010ca:	44bc      	add	ip, r7
 80010cc:	4463      	add	r3, ip
 80010ce:	2221      	movs	r2, #33	; 0x21
 80010d0:	2167      	movs	r1, #103	; 0x67
 80010d2:	5499      	strb	r1, [r3, r2]
	mqtt_packt_error[34] = 0x70; // topic p
 80010d4:	4b67      	ldr	r3, [pc, #412]	; (8001274 <main+0x1010>)
 80010d6:	22ce      	movs	r2, #206	; 0xce
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	4694      	mov	ip, r2
 80010dc:	44bc      	add	ip, r7
 80010de:	4463      	add	r3, ip
 80010e0:	2222      	movs	r2, #34	; 0x22
 80010e2:	2170      	movs	r1, #112	; 0x70
 80010e4:	5499      	strb	r1, [r3, r2]
	mqtt_packt_error[35] = 0x73; // topic s
 80010e6:	4b63      	ldr	r3, [pc, #396]	; (8001274 <main+0x1010>)
 80010e8:	22ce      	movs	r2, #206	; 0xce
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	4694      	mov	ip, r2
 80010ee:	44bc      	add	ip, r7
 80010f0:	4463      	add	r3, ip
 80010f2:	2223      	movs	r2, #35	; 0x23
 80010f4:	2173      	movs	r1, #115	; 0x73
 80010f6:	5499      	strb	r1, [r3, r2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f8:	f000 fd18 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fc:	f000 fa82 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001100:	f000 fb56 	bl	80017b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001104:	f000 fad6 	bl	80016b4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001108:	f000 fb34 	bl	8001774 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800110c:	f000 fb02 	bl	8001714 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, data_in_uart1, 400);
 8001110:	23c8      	movs	r3, #200	; 0xc8
 8001112:	005a      	lsls	r2, r3, #1
 8001114:	4958      	ldr	r1, [pc, #352]	; (8001278 <main+0x1014>)
 8001116:	4b59      	ldr	r3, [pc, #356]	; (800127c <main+0x1018>)
 8001118:	0018      	movs	r0, r3
 800111a:	f001 ffd0 	bl	80030be <HAL_UART_Receive_IT>

  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT], strlen((const char *)at_command[AT]), 100);
 800111e:	249c      	movs	r4, #156	; 0x9c
 8001120:	193b      	adds	r3, r7, r4
 8001122:	0018      	movs	r0, r3
 8001124:	f7fe fff0 	bl	8000108 <strlen>
 8001128:	0003      	movs	r3, r0
 800112a:	b29a      	uxth	r2, r3
 800112c:	1939      	adds	r1, r7, r4
 800112e:	4854      	ldr	r0, [pc, #336]	; (8001280 <main+0x101c>)
 8001130:	2364      	movs	r3, #100	; 0x64
 8001132:	f001 ff1b 	bl	8002f6c <HAL_UART_Transmit>
  HAL_Delay(500);
 8001136:	23fa      	movs	r3, #250	; 0xfa
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	0018      	movs	r0, r3
 800113c:	f000 fd5a 	bl	8001bf4 <HAL_Delay>

  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CFUN], strlen((const char *)at_command[AT_CFUN]), 100);
 8001140:	193b      	adds	r3, r7, r4
 8001142:	3332      	adds	r3, #50	; 0x32
 8001144:	0018      	movs	r0, r3
 8001146:	f7fe ffdf 	bl	8000108 <strlen>
 800114a:	0003      	movs	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	193b      	adds	r3, r7, r4
 8001150:	3332      	adds	r3, #50	; 0x32
 8001152:	0019      	movs	r1, r3
 8001154:	484a      	ldr	r0, [pc, #296]	; (8001280 <main+0x101c>)
 8001156:	2364      	movs	r3, #100	; 0x64
 8001158:	f001 ff08 	bl	8002f6c <HAL_UART_Transmit>
  HAL_Delay(500);
 800115c:	23fa      	movs	r3, #250	; 0xfa
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	0018      	movs	r0, r3
 8001162:	f000 fd47 	bl	8001bf4 <HAL_Delay>

  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CPIN], strlen((const char *)at_command[AT_CPIN]), 100);
 8001166:	193b      	adds	r3, r7, r4
 8001168:	3364      	adds	r3, #100	; 0x64
 800116a:	0018      	movs	r0, r3
 800116c:	f7fe ffcc 	bl	8000108 <strlen>
 8001170:	0003      	movs	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	193b      	adds	r3, r7, r4
 8001176:	3364      	adds	r3, #100	; 0x64
 8001178:	0019      	movs	r1, r3
 800117a:	4841      	ldr	r0, [pc, #260]	; (8001280 <main+0x101c>)
 800117c:	2364      	movs	r3, #100	; 0x64
 800117e:	f001 fef5 	bl	8002f6c <HAL_UART_Transmit>
  HAL_Delay(500);
 8001182:	23fa      	movs	r3, #250	; 0xfa
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	0018      	movs	r0, r3
 8001188:	f000 fd34 	bl	8001bf4 <HAL_Delay>

  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CREG], strlen((const char *)at_command[AT_CREG]), 100);
 800118c:	193b      	adds	r3, r7, r4
 800118e:	3396      	adds	r3, #150	; 0x96
 8001190:	0018      	movs	r0, r3
 8001192:	f7fe ffb9 	bl	8000108 <strlen>
 8001196:	0003      	movs	r3, r0
 8001198:	b29a      	uxth	r2, r3
 800119a:	193b      	adds	r3, r7, r4
 800119c:	3396      	adds	r3, #150	; 0x96
 800119e:	0019      	movs	r1, r3
 80011a0:	4837      	ldr	r0, [pc, #220]	; (8001280 <main+0x101c>)
 80011a2:	2364      	movs	r3, #100	; 0x64
 80011a4:	f001 fee2 	bl	8002f6c <HAL_UART_Transmit>
  HAL_Delay(500);
 80011a8:	23fa      	movs	r3, #250	; 0xfa
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	0018      	movs	r0, r3
 80011ae:	f000 fd21 	bl	8001bf4 <HAL_Delay>

  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CSQ], strlen((const char *)at_command[AT_CSQ]), 100);
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	33c8      	adds	r3, #200	; 0xc8
 80011b6:	0018      	movs	r0, r3
 80011b8:	f7fe ffa6 	bl	8000108 <strlen>
 80011bc:	0003      	movs	r3, r0
 80011be:	b29a      	uxth	r2, r3
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	33c8      	adds	r3, #200	; 0xc8
 80011c4:	0019      	movs	r1, r3
 80011c6:	482e      	ldr	r0, [pc, #184]	; (8001280 <main+0x101c>)
 80011c8:	2364      	movs	r3, #100	; 0x64
 80011ca:	f001 fecf 	bl	8002f6c <HAL_UART_Transmit>
  HAL_Delay(500);
 80011ce:	23fa      	movs	r3, #250	; 0xfa
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	0018      	movs	r0, r3
 80011d4:	f000 fd0e 	bl	8001bf4 <HAL_Delay>

  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CSTT], strlen((const char *)at_command[AT_CSTT]), 100);
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	33fa      	adds	r3, #250	; 0xfa
 80011dc:	0018      	movs	r0, r3
 80011de:	f7fe ff93 	bl	8000108 <strlen>
 80011e2:	0003      	movs	r3, r0
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	33fa      	adds	r3, #250	; 0xfa
 80011ea:	0019      	movs	r1, r3
 80011ec:	4824      	ldr	r0, [pc, #144]	; (8001280 <main+0x101c>)
 80011ee:	2364      	movs	r3, #100	; 0x64
 80011f0:	f001 febc 	bl	8002f6c <HAL_UART_Transmit>
  HAL_Delay(500);
 80011f4:	23fa      	movs	r3, #250	; 0xfa
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	0018      	movs	r0, r3
 80011fa:	f000 fcfb 	bl	8001bf4 <HAL_Delay>

  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIICR], strlen((const char *)at_command[AT_CIICR]), 100);
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	332d      	adds	r3, #45	; 0x2d
 8001202:	33ff      	adds	r3, #255	; 0xff
 8001204:	0018      	movs	r0, r3
 8001206:	f7fe ff7f 	bl	8000108 <strlen>
 800120a:	0003      	movs	r3, r0
 800120c:	b29a      	uxth	r2, r3
 800120e:	193b      	adds	r3, r7, r4
 8001210:	332d      	adds	r3, #45	; 0x2d
 8001212:	33ff      	adds	r3, #255	; 0xff
 8001214:	0019      	movs	r1, r3
 8001216:	481a      	ldr	r0, [pc, #104]	; (8001280 <main+0x101c>)
 8001218:	2364      	movs	r3, #100	; 0x64
 800121a:	f001 fea7 	bl	8002f6c <HAL_UART_Transmit>
  HAL_Delay(5000);
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <main+0x1020>)
 8001220:	0018      	movs	r0, r3
 8001222:	f000 fce7 	bl	8001bf4 <HAL_Delay>

  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIFSR], strlen((const char *)at_command[AT_CIFSR]), 100);
 8001226:	193b      	adds	r3, r7, r4
 8001228:	335f      	adds	r3, #95	; 0x5f
 800122a:	33ff      	adds	r3, #255	; 0xff
 800122c:	0018      	movs	r0, r3
 800122e:	f7fe ff6b 	bl	8000108 <strlen>
 8001232:	0003      	movs	r3, r0
 8001234:	b29a      	uxth	r2, r3
 8001236:	193b      	adds	r3, r7, r4
 8001238:	335f      	adds	r3, #95	; 0x5f
 800123a:	33ff      	adds	r3, #255	; 0xff
 800123c:	0019      	movs	r1, r3
 800123e:	4810      	ldr	r0, [pc, #64]	; (8001280 <main+0x101c>)
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	f001 fe93 	bl	8002f6c <HAL_UART_Transmit>
  HAL_Delay(5000);
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <main+0x1020>)
 8001248:	0018      	movs	r0, r3
 800124a:	f000 fcd3 	bl	8001bf4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (ctrl == true)
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <main+0x1024>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d1fb      	bne.n	800124e <main+0xfea>
	  {
		  for (uint8_t i = 0; i<=400; i++)
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <main+0x1028>)
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
		  	{
		  		if ((data_in_uart1[i] == 0x24) && (data_in_uart1[i+1] == 0x47) && (data_in_uart1[i+2] == 0x50) && (data_in_uart1[i+3] == 0x47)
 800125e:	490b      	ldr	r1, [pc, #44]	; (800128c <main+0x1028>)
 8001260:	187b      	adds	r3, r7, r1
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <main+0x1014>)
 8001266:	5cd3      	ldrb	r3, [r2, r3]
 8001268:	2b24      	cmp	r3, #36	; 0x24
 800126a:	d000      	beq.n	800126e <main+0x100a>
 800126c:	e070      	b.n	8001350 <main+0x10ec>
 800126e:	e00f      	b.n	8001290 <main+0x102c>
 8001270:	fffffd00 	.word	0xfffffd00
 8001274:	fffffccc 	.word	0xfffffccc
 8001278:	20000028 	.word	0x20000028
 800127c:	20000200 	.word	0x20000200
 8001280:	20000284 	.word	0x20000284
 8001284:	00001388 	.word	0x00001388
 8001288:	200001b9 	.word	0x200001b9
 800128c:	00000337 	.word	0x00000337
 8001290:	187b      	adds	r3, r7, r1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	4ad4      	ldr	r2, [pc, #848]	; (80015e8 <main+0x1384>)
 8001298:	5cd3      	ldrb	r3, [r2, r3]
 800129a:	2b47      	cmp	r3, #71	; 0x47
 800129c:	d158      	bne.n	8001350 <main+0x10ec>
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	3302      	adds	r3, #2
 80012a4:	4ad0      	ldr	r2, [pc, #832]	; (80015e8 <main+0x1384>)
 80012a6:	5cd3      	ldrb	r3, [r2, r3]
 80012a8:	2b50      	cmp	r3, #80	; 0x50
 80012aa:	d151      	bne.n	8001350 <main+0x10ec>
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	3303      	adds	r3, #3
 80012b2:	4acd      	ldr	r2, [pc, #820]	; (80015e8 <main+0x1384>)
 80012b4:	5cd3      	ldrb	r3, [r2, r3]
 80012b6:	2b47      	cmp	r3, #71	; 0x47
 80012b8:	d14a      	bne.n	8001350 <main+0x10ec>
		  				&& (data_in_uart1[i+4] == 0x4C) && (data_in_uart1[i+5] == 0x4C))//filtrar dados GPGLL
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	3304      	adds	r3, #4
 80012c0:	4ac9      	ldr	r2, [pc, #804]	; (80015e8 <main+0x1384>)
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	2b4c      	cmp	r3, #76	; 0x4c
 80012c6:	d143      	bne.n	8001350 <main+0x10ec>
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	3305      	adds	r3, #5
 80012ce:	4ac6      	ldr	r2, [pc, #792]	; (80015e8 <main+0x1384>)
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	2b4c      	cmp	r3, #76	; 0x4c
 80012d4:	d13c      	bne.n	8001350 <main+0x10ec>
		  		{
		  			HAL_GPIO_TogglePin(LED_PC13_GPIO_Port, LED_PC13_Pin);
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	019b      	lsls	r3, r3, #6
 80012da:	4ac4      	ldr	r2, [pc, #784]	; (80015ec <main+0x1388>)
 80012dc:	0019      	movs	r1, r3
 80012de:	0010      	movs	r0, r2
 80012e0:	f001 f89b 	bl	800241a <HAL_GPIO_TogglePin>
		  			for(uint8_t j = 0; j<=43; j++)
 80012e4:	4bc2      	ldr	r3, [pc, #776]	; (80015f0 <main+0x138c>)
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e013      	b.n	8001316 <main+0x10b2>
		  			{
		  				data_filter[j] = data_in_uart1[i+j];
 80012ee:	4bc1      	ldr	r3, [pc, #772]	; (80015f4 <main+0x1390>)
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	48be      	ldr	r0, [pc, #760]	; (80015f0 <main+0x138c>)
 80012f6:	183b      	adds	r3, r7, r0
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	18d2      	adds	r2, r2, r3
 80012fc:	183b      	adds	r3, r7, r0
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	49b9      	ldr	r1, [pc, #740]	; (80015e8 <main+0x1384>)
 8001302:	5c89      	ldrb	r1, [r1, r2]
 8001304:	22b4      	movs	r2, #180	; 0xb4
 8001306:	0092      	lsls	r2, r2, #2
 8001308:	18ba      	adds	r2, r7, r2
 800130a:	54d1      	strb	r1, [r2, r3]
		  			for(uint8_t j = 0; j<=43; j++)
 800130c:	183b      	adds	r3, r7, r0
 800130e:	781a      	ldrb	r2, [r3, #0]
 8001310:	183b      	adds	r3, r7, r0
 8001312:	3201      	adds	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	4bb6      	ldr	r3, [pc, #728]	; (80015f0 <main+0x138c>)
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b2b      	cmp	r3, #43	; 0x2b
 800131e:	d9e6      	bls.n	80012ee <main+0x108a>
		  			}
		  			if ((data_filter[6] == 0x2C) && (data_filter[17] == 0x2C) && ((data_filter[18] == 0x4E) || (data_filter[18] == 0x53))
 8001320:	22b4      	movs	r2, #180	; 0xb4
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	18bb      	adds	r3, r7, r2
 8001326:	799b      	ldrb	r3, [r3, #6]
 8001328:	2b2c      	cmp	r3, #44	; 0x2c
 800132a:	d111      	bne.n	8001350 <main+0x10ec>
 800132c:	18bb      	adds	r3, r7, r2
 800132e:	7c5b      	ldrb	r3, [r3, #17]
 8001330:	2b2c      	cmp	r3, #44	; 0x2c
 8001332:	d10d      	bne.n	8001350 <main+0x10ec>
 8001334:	18bb      	adds	r3, r7, r2
 8001336:	7c9b      	ldrb	r3, [r3, #18]
 8001338:	2b4e      	cmp	r3, #78	; 0x4e
 800133a:	d003      	beq.n	8001344 <main+0x10e0>
 800133c:	18bb      	adds	r3, r7, r2
 800133e:	7c9b      	ldrb	r3, [r3, #18]
 8001340:	2b53      	cmp	r3, #83	; 0x53
 8001342:	d105      	bne.n	8001350 <main+0x10ec>
		  					&& (data_filter[19] == 0x2C))//gambiarra
 8001344:	23b4      	movs	r3, #180	; 0xb4
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	7cdb      	ldrb	r3, [r3, #19]
 800134c:	2b2c      	cmp	r3, #44	; 0x2c
 800134e:	d006      	beq.n	800135e <main+0x10fa>
		  for (uint8_t i = 0; i<=400; i++)
 8001350:	49a8      	ldr	r1, [pc, #672]	; (80015f4 <main+0x1390>)
 8001352:	187b      	adds	r3, r7, r1
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	187b      	adds	r3, r7, r1
 8001358:	3201      	adds	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
		  		if ((data_in_uart1[i] == 0x24) && (data_in_uart1[i+1] == 0x47) && (data_in_uart1[i+2] == 0x50) && (data_in_uart1[i+3] == 0x47)
 800135c:	e77f      	b.n	800125e <main+0xffa>
		  			{
		  				break;
 800135e:	46c0      	nop			; (mov r8, r8)
		  			}
		  		}
		  	}
		  if (data_filter[7] == 0x2C) //0x2C é o caractere ascii ","
 8001360:	23b4      	movs	r3, #180	; 0xb4
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	79db      	ldrb	r3, [r3, #7]
 8001368:	2b2c      	cmp	r3, #44	; 0x2c
 800136a:	d162      	bne.n	8001432 <main+0x11ce>
		  {
			  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPSTART], strlen((const char *)at_command[AT_CIPSTART]), 100);
 800136c:	249c      	movs	r4, #156	; 0x9c
 800136e:	193b      	adds	r3, r7, r4
 8001370:	3391      	adds	r3, #145	; 0x91
 8001372:	33ff      	adds	r3, #255	; 0xff
 8001374:	0018      	movs	r0, r3
 8001376:	f7fe fec7 	bl	8000108 <strlen>
 800137a:	0003      	movs	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	193b      	adds	r3, r7, r4
 8001380:	3391      	adds	r3, #145	; 0x91
 8001382:	33ff      	adds	r3, #255	; 0xff
 8001384:	0019      	movs	r1, r3
 8001386:	489c      	ldr	r0, [pc, #624]	; (80015f8 <main+0x1394>)
 8001388:	2364      	movs	r3, #100	; 0x64
 800138a:	f001 fdef 	bl	8002f6c <HAL_UART_Transmit>
			  HAL_Delay(5000);
 800138e:	4b9b      	ldr	r3, [pc, #620]	; (80015fc <main+0x1398>)
 8001390:	0018      	movs	r0, r3
 8001392:	f000 fc2f 	bl	8001bf4 <HAL_Delay>

			  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPSEND], strlen((const char *)at_command[AT_CIPSEND]), 100);
 8001396:	193b      	adds	r3, r7, r4
 8001398:	33c3      	adds	r3, #195	; 0xc3
 800139a:	33ff      	adds	r3, #255	; 0xff
 800139c:	0018      	movs	r0, r3
 800139e:	f7fe feb3 	bl	8000108 <strlen>
 80013a2:	0003      	movs	r3, r0
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	33c3      	adds	r3, #195	; 0xc3
 80013aa:	33ff      	adds	r3, #255	; 0xff
 80013ac:	0019      	movs	r1, r3
 80013ae:	4892      	ldr	r0, [pc, #584]	; (80015f8 <main+0x1394>)
 80013b0:	2364      	movs	r3, #100	; 0x64
 80013b2:	f001 fddb 	bl	8002f6c <HAL_UART_Transmit>
			  HAL_Delay(2000);
 80013b6:	23fa      	movs	r3, #250	; 0xfa
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 fc1a 	bl	8001bf4 <HAL_Delay>

			  HAL_UART_Transmit(&huart2, (unsigned char *)mqtt_packt_error, 36, 100);
 80013c0:	1d39      	adds	r1, r7, #4
 80013c2:	488d      	ldr	r0, [pc, #564]	; (80015f8 <main+0x1394>)
 80013c4:	2364      	movs	r3, #100	; 0x64
 80013c6:	2224      	movs	r2, #36	; 0x24
 80013c8:	f001 fdd0 	bl	8002f6c <HAL_UART_Transmit>

			  HAL_UART_Transmit(&huart2, (unsigned char *)error_msg, strlen((const char *)error_msg), 100);
 80013cc:	25b2      	movs	r5, #178	; 0xb2
 80013ce:	00ad      	lsls	r5, r5, #2
 80013d0:	197b      	adds	r3, r7, r5
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7fe fe98 	bl	8000108 <strlen>
 80013d8:	0003      	movs	r3, r0
 80013da:	b29a      	uxth	r2, r3
 80013dc:	1979      	adds	r1, r7, r5
 80013de:	4886      	ldr	r0, [pc, #536]	; (80015f8 <main+0x1394>)
 80013e0:	2364      	movs	r3, #100	; 0x64
 80013e2:	f001 fdc3 	bl	8002f6c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (unsigned char *)send_msg, strlen((const char *)send_msg), 100);
 80013e6:	25b1      	movs	r5, #177	; 0xb1
 80013e8:	00ad      	lsls	r5, r5, #2
 80013ea:	197b      	adds	r3, r7, r5
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7fe fe8b 	bl	8000108 <strlen>
 80013f2:	0003      	movs	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	1979      	adds	r1, r7, r5
 80013f8:	487f      	ldr	r0, [pc, #508]	; (80015f8 <main+0x1394>)
 80013fa:	2364      	movs	r3, #100	; 0x64
 80013fc:	f001 fdb6 	bl	8002f6c <HAL_UART_Transmit>
			  HAL_Delay(5000);
 8001400:	4b7e      	ldr	r3, [pc, #504]	; (80015fc <main+0x1398>)
 8001402:	0018      	movs	r0, r3
 8001404:	f000 fbf6 	bl	8001bf4 <HAL_Delay>

			  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPCLOSE], strlen((const char *)at_command[AT_CIPCLOSE]), 100);
 8001408:	193b      	adds	r3, r7, r4
 800140a:	33f5      	adds	r3, #245	; 0xf5
 800140c:	33ff      	adds	r3, #255	; 0xff
 800140e:	0018      	movs	r0, r3
 8001410:	f7fe fe7a 	bl	8000108 <strlen>
 8001414:	0003      	movs	r3, r0
 8001416:	b29a      	uxth	r2, r3
 8001418:	193b      	adds	r3, r7, r4
 800141a:	33f5      	adds	r3, #245	; 0xf5
 800141c:	33ff      	adds	r3, #255	; 0xff
 800141e:	0019      	movs	r1, r3
 8001420:	4875      	ldr	r0, [pc, #468]	; (80015f8 <main+0x1394>)
 8001422:	2364      	movs	r3, #100	; 0x64
 8001424:	f001 fda2 	bl	8002f6c <HAL_UART_Transmit>
			  HAL_Delay(5000);
 8001428:	4b74      	ldr	r3, [pc, #464]	; (80015fc <main+0x1398>)
 800142a:	0018      	movs	r0, r3
 800142c:	f000 fbe2 	bl	8001bf4 <HAL_Delay>
 8001430:	e0d5      	b.n	80015de <main+0x137a>

			  //HAL_GPIO_TogglePin(LED_PC13_GPIO_Port, LED_PC13_Pin);
		  }
		  else
		  {
			  if ((data_filter[31] == 0x2C) && ((data_filter[32] == 0x45) || (data_filter[32] == 0x57)) && ((data_filter[33] == 0x2C)))
 8001432:	21b4      	movs	r1, #180	; 0xb4
 8001434:	0089      	lsls	r1, r1, #2
 8001436:	187b      	adds	r3, r7, r1
 8001438:	7fdb      	ldrb	r3, [r3, #31]
 800143a:	2b2c      	cmp	r3, #44	; 0x2c
 800143c:	d16d      	bne.n	800151a <main+0x12b6>
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2220      	movs	r2, #32
 8001442:	5c9b      	ldrb	r3, [r3, r2]
 8001444:	2b45      	cmp	r3, #69	; 0x45
 8001446:	d004      	beq.n	8001452 <main+0x11ee>
 8001448:	187b      	adds	r3, r7, r1
 800144a:	2220      	movs	r2, #32
 800144c:	5c9b      	ldrb	r3, [r3, r2]
 800144e:	2b57      	cmp	r3, #87	; 0x57
 8001450:	d163      	bne.n	800151a <main+0x12b6>
 8001452:	25b4      	movs	r5, #180	; 0xb4
 8001454:	00ad      	lsls	r5, r5, #2
 8001456:	197b      	adds	r3, r7, r5
 8001458:	2221      	movs	r2, #33	; 0x21
 800145a:	5c9b      	ldrb	r3, [r3, r2]
 800145c:	2b2c      	cmp	r3, #44	; 0x2c
 800145e:	d15c      	bne.n	800151a <main+0x12b6>
				{
				  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPSTART], strlen((const char *)at_command[AT_CIPSTART]), 100);
 8001460:	249c      	movs	r4, #156	; 0x9c
 8001462:	193b      	adds	r3, r7, r4
 8001464:	3391      	adds	r3, #145	; 0x91
 8001466:	33ff      	adds	r3, #255	; 0xff
 8001468:	0018      	movs	r0, r3
 800146a:	f7fe fe4d 	bl	8000108 <strlen>
 800146e:	0003      	movs	r3, r0
 8001470:	b29a      	uxth	r2, r3
 8001472:	193b      	adds	r3, r7, r4
 8001474:	3391      	adds	r3, #145	; 0x91
 8001476:	33ff      	adds	r3, #255	; 0xff
 8001478:	0019      	movs	r1, r3
 800147a:	485f      	ldr	r0, [pc, #380]	; (80015f8 <main+0x1394>)
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	f001 fd75 	bl	8002f6c <HAL_UART_Transmit>
				  HAL_Delay(5000);
 8001482:	4b5e      	ldr	r3, [pc, #376]	; (80015fc <main+0x1398>)
 8001484:	0018      	movs	r0, r3
 8001486:	f000 fbb5 	bl	8001bf4 <HAL_Delay>

				  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPSEND], strlen((const char *)at_command[AT_CIPSEND]), 100);
 800148a:	193b      	adds	r3, r7, r4
 800148c:	33c3      	adds	r3, #195	; 0xc3
 800148e:	33ff      	adds	r3, #255	; 0xff
 8001490:	0018      	movs	r0, r3
 8001492:	f7fe fe39 	bl	8000108 <strlen>
 8001496:	0003      	movs	r3, r0
 8001498:	b29a      	uxth	r2, r3
 800149a:	193b      	adds	r3, r7, r4
 800149c:	33c3      	adds	r3, #195	; 0xc3
 800149e:	33ff      	adds	r3, #255	; 0xff
 80014a0:	0019      	movs	r1, r3
 80014a2:	4855      	ldr	r0, [pc, #340]	; (80015f8 <main+0x1394>)
 80014a4:	2364      	movs	r3, #100	; 0x64
 80014a6:	f001 fd61 	bl	8002f6c <HAL_UART_Transmit>
				  HAL_Delay(2000);
 80014aa:	23fa      	movs	r3, #250	; 0xfa
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 fba0 	bl	8001bf4 <HAL_Delay>

				  HAL_UART_Transmit(&huart2, (unsigned char *)mqtt_packt_msg, 36, 100);
 80014b4:	2338      	movs	r3, #56	; 0x38
 80014b6:	18f9      	adds	r1, r7, r3
 80014b8:	484f      	ldr	r0, [pc, #316]	; (80015f8 <main+0x1394>)
 80014ba:	2364      	movs	r3, #100	; 0x64
 80014bc:	2224      	movs	r2, #36	; 0x24
 80014be:	f001 fd55 	bl	8002f6c <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart2, (unsigned char *)data_filter, 43, 100);
 80014c2:	1979      	adds	r1, r7, r5
 80014c4:	484c      	ldr	r0, [pc, #304]	; (80015f8 <main+0x1394>)
 80014c6:	2364      	movs	r3, #100	; 0x64
 80014c8:	222b      	movs	r2, #43	; 0x2b
 80014ca:	f001 fd4f 	bl	8002f6c <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart2, (unsigned char *)send_msg, strlen((const char *)send_msg), 100);
 80014ce:	25b1      	movs	r5, #177	; 0xb1
 80014d0:	00ad      	lsls	r5, r5, #2
 80014d2:	197b      	adds	r3, r7, r5
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7fe fe17 	bl	8000108 <strlen>
 80014da:	0003      	movs	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	1979      	adds	r1, r7, r5
 80014e0:	4845      	ldr	r0, [pc, #276]	; (80015f8 <main+0x1394>)
 80014e2:	2364      	movs	r3, #100	; 0x64
 80014e4:	f001 fd42 	bl	8002f6c <HAL_UART_Transmit>
				  HAL_Delay(5000);
 80014e8:	4b44      	ldr	r3, [pc, #272]	; (80015fc <main+0x1398>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 fb82 	bl	8001bf4 <HAL_Delay>

				  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPCLOSE], strlen((const char *)at_command[AT_CIPCLOSE]), 100);
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	33f5      	adds	r3, #245	; 0xf5
 80014f4:	33ff      	adds	r3, #255	; 0xff
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7fe fe06 	bl	8000108 <strlen>
 80014fc:	0003      	movs	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	193b      	adds	r3, r7, r4
 8001502:	33f5      	adds	r3, #245	; 0xf5
 8001504:	33ff      	adds	r3, #255	; 0xff
 8001506:	0019      	movs	r1, r3
 8001508:	483b      	ldr	r0, [pc, #236]	; (80015f8 <main+0x1394>)
 800150a:	2364      	movs	r3, #100	; 0x64
 800150c:	f001 fd2e 	bl	8002f6c <HAL_UART_Transmit>
				  HAL_Delay(5000);
 8001510:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <main+0x1398>)
 8001512:	0018      	movs	r0, r3
 8001514:	f000 fb6e 	bl	8001bf4 <HAL_Delay>
 8001518:	e061      	b.n	80015de <main+0x137a>
				}
			  else
			  {
				  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPSTART], strlen((const char *)at_command[AT_CIPSTART]), 100);
 800151a:	249c      	movs	r4, #156	; 0x9c
 800151c:	193b      	adds	r3, r7, r4
 800151e:	3391      	adds	r3, #145	; 0x91
 8001520:	33ff      	adds	r3, #255	; 0xff
 8001522:	0018      	movs	r0, r3
 8001524:	f7fe fdf0 	bl	8000108 <strlen>
 8001528:	0003      	movs	r3, r0
 800152a:	b29a      	uxth	r2, r3
 800152c:	193b      	adds	r3, r7, r4
 800152e:	3391      	adds	r3, #145	; 0x91
 8001530:	33ff      	adds	r3, #255	; 0xff
 8001532:	0019      	movs	r1, r3
 8001534:	4830      	ldr	r0, [pc, #192]	; (80015f8 <main+0x1394>)
 8001536:	2364      	movs	r3, #100	; 0x64
 8001538:	f001 fd18 	bl	8002f6c <HAL_UART_Transmit>
				  HAL_Delay(5000);
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <main+0x1398>)
 800153e:	0018      	movs	r0, r3
 8001540:	f000 fb58 	bl	8001bf4 <HAL_Delay>

				  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPSEND], strlen((const char *)at_command[AT_CIPSEND]), 100);
 8001544:	193b      	adds	r3, r7, r4
 8001546:	33c3      	adds	r3, #195	; 0xc3
 8001548:	33ff      	adds	r3, #255	; 0xff
 800154a:	0018      	movs	r0, r3
 800154c:	f7fe fddc 	bl	8000108 <strlen>
 8001550:	0003      	movs	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	193b      	adds	r3, r7, r4
 8001556:	33c3      	adds	r3, #195	; 0xc3
 8001558:	33ff      	adds	r3, #255	; 0xff
 800155a:	0019      	movs	r1, r3
 800155c:	4826      	ldr	r0, [pc, #152]	; (80015f8 <main+0x1394>)
 800155e:	2364      	movs	r3, #100	; 0x64
 8001560:	f001 fd04 	bl	8002f6c <HAL_UART_Transmit>
				  HAL_Delay(2000);
 8001564:	23fa      	movs	r3, #250	; 0xfa
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	0018      	movs	r0, r3
 800156a:	f000 fb43 	bl	8001bf4 <HAL_Delay>
	  			  HAL_UART_Transmit(&huart2, (unsigned char *)mqtt_packt_error, 36, 100);
 800156e:	1d39      	adds	r1, r7, #4
 8001570:	4821      	ldr	r0, [pc, #132]	; (80015f8 <main+0x1394>)
 8001572:	2364      	movs	r3, #100	; 0x64
 8001574:	2224      	movs	r2, #36	; 0x24
 8001576:	f001 fcf9 	bl	8002f6c <HAL_UART_Transmit>

				  HAL_UART_Transmit(&huart2, (unsigned char *)error_msg, strlen((const char *)error_msg), 100);
 800157a:	25b2      	movs	r5, #178	; 0xb2
 800157c:	00ad      	lsls	r5, r5, #2
 800157e:	197b      	adds	r3, r7, r5
 8001580:	0018      	movs	r0, r3
 8001582:	f7fe fdc1 	bl	8000108 <strlen>
 8001586:	0003      	movs	r3, r0
 8001588:	b29a      	uxth	r2, r3
 800158a:	1979      	adds	r1, r7, r5
 800158c:	481a      	ldr	r0, [pc, #104]	; (80015f8 <main+0x1394>)
 800158e:	2364      	movs	r3, #100	; 0x64
 8001590:	f001 fcec 	bl	8002f6c <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart2, (unsigned char *)send_msg, strlen((const char *)send_msg), 100);
 8001594:	25b1      	movs	r5, #177	; 0xb1
 8001596:	00ad      	lsls	r5, r5, #2
 8001598:	197b      	adds	r3, r7, r5
 800159a:	0018      	movs	r0, r3
 800159c:	f7fe fdb4 	bl	8000108 <strlen>
 80015a0:	0003      	movs	r3, r0
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	1979      	adds	r1, r7, r5
 80015a6:	4814      	ldr	r0, [pc, #80]	; (80015f8 <main+0x1394>)
 80015a8:	2364      	movs	r3, #100	; 0x64
 80015aa:	f001 fcdf 	bl	8002f6c <HAL_UART_Transmit>
				  HAL_Delay(5000);
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <main+0x1398>)
 80015b0:	0018      	movs	r0, r3
 80015b2:	f000 fb1f 	bl	8001bf4 <HAL_Delay>

				  HAL_UART_Transmit(&huart2, (unsigned char *)at_command[AT_CIPCLOSE], strlen((const char *)at_command[AT_CIPCLOSE]), 100);
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	33f5      	adds	r3, #245	; 0xf5
 80015ba:	33ff      	adds	r3, #255	; 0xff
 80015bc:	0018      	movs	r0, r3
 80015be:	f7fe fda3 	bl	8000108 <strlen>
 80015c2:	0003      	movs	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	193b      	adds	r3, r7, r4
 80015c8:	33f5      	adds	r3, #245	; 0xf5
 80015ca:	33ff      	adds	r3, #255	; 0xff
 80015cc:	0019      	movs	r1, r3
 80015ce:	480a      	ldr	r0, [pc, #40]	; (80015f8 <main+0x1394>)
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	f001 fccb 	bl	8002f6c <HAL_UART_Transmit>
				  HAL_Delay(5000);
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <main+0x1398>)
 80015d8:	0018      	movs	r0, r3
 80015da:	f000 fb0b 	bl	8001bf4 <HAL_Delay>


			  //HAL_GPIO_TogglePin(LED_PC13_GPIO_Port, LED_PC13_Pin);
		  }

		  ctrl = false;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <main+0x139c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
	  if (ctrl == true)
 80015e4:	e633      	b.n	800124e <main+0xfea>
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	20000028 	.word	0x20000028
 80015ec:	48000800 	.word	0x48000800
 80015f0:	00000336 	.word	0x00000336
 80015f4:	00000337 	.word	0x00000337
 80015f8:	20000284 	.word	0x20000284
 80015fc:	00001388 	.word	0x00001388
 8001600:	200001b9 	.word	0x200001b9

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b095      	sub	sp, #84	; 0x54
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	2420      	movs	r4, #32
 800160c:	193b      	adds	r3, r7, r4
 800160e:	0018      	movs	r0, r3
 8001610:	2330      	movs	r3, #48	; 0x30
 8001612:	001a      	movs	r2, r3
 8001614:	2100      	movs	r1, #0
 8001616:	f002 fe5b 	bl	80042d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161a:	2310      	movs	r3, #16
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	0018      	movs	r0, r3
 8001620:	2310      	movs	r3, #16
 8001622:	001a      	movs	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	f002 fe53 	bl	80042d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800162a:	003b      	movs	r3, r7
 800162c:	0018      	movs	r0, r3
 800162e:	2310      	movs	r3, #16
 8001630:	001a      	movs	r2, r3
 8001632:	2100      	movs	r1, #0
 8001634:	f002 fe4c 	bl	80042d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001638:	0021      	movs	r1, r4
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2202      	movs	r2, #2
 800163e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2201      	movs	r2, #1
 8001644:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	2210      	movs	r2, #16
 800164a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001652:	187b      	adds	r3, r7, r1
 8001654:	0018      	movs	r0, r3
 8001656:	f000 fefb 	bl	8002450 <HAL_RCC_OscConfig>
 800165a:	1e03      	subs	r3, r0, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800165e:	f000 f90d 	bl	800187c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001662:	2110      	movs	r1, #16
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2207      	movs	r2, #7
 8001668:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001670:	187b      	adds	r3, r7, r1
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001676:	187b      	adds	r3, r7, r1
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800167c:	187b      	adds	r3, r7, r1
 800167e:	2100      	movs	r1, #0
 8001680:	0018      	movs	r0, r3
 8001682:	f001 f9ff 	bl	8002a84 <HAL_RCC_ClockConfig>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800168a:	f000 f8f7 	bl	800187c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800168e:	003b      	movs	r3, r7
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001694:	003b      	movs	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800169a:	003b      	movs	r3, r7
 800169c:	0018      	movs	r0, r3
 800169e:	f001 fb43 	bl	8002d28 <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	1e03      	subs	r3, r0, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80016a6:	f000 f8e9 	bl	800187c <Error_Handler>
  }
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b015      	add	sp, #84	; 0x54
 80016b0:	bd90      	pop	{r4, r7, pc}
	...

080016b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <MX_USART1_UART_Init+0x5c>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016c0:	2296      	movs	r2, #150	; 0x96
 80016c2:	0192      	lsls	r2, r2, #6
 80016c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <MX_USART1_UART_Init+0x58>)
 80016f8:	0018      	movs	r0, r3
 80016fa:	f001 fbe3 	bl	8002ec4 <HAL_UART_Init>
 80016fe:	1e03      	subs	r3, r0, #0
 8001700:	d001      	beq.n	8001706 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001702:	f000 f8bb 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000200 	.word	0x20000200
 8001710:	40013800 	.word	0x40013800

08001714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_USART2_UART_Init+0x58>)
 800171a:	4a15      	ldr	r2, [pc, #84]	; (8001770 <MX_USART2_UART_Init+0x5c>)
 800171c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_USART2_UART_Init+0x58>)
 8001720:	2296      	movs	r2, #150	; 0x96
 8001722:	0192      	lsls	r2, r2, #6
 8001724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_USART2_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_USART2_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_USART2_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_USART2_UART_Init+0x58>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <MX_USART2_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_USART2_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <MX_USART2_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_USART2_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <MX_USART2_UART_Init+0x58>)
 8001758:	0018      	movs	r0, r3
 800175a:	f001 fbb3 	bl	8002ec4 <HAL_UART_Init>
 800175e:	1e03      	subs	r3, r0, #0
 8001760:	d001      	beq.n	8001766 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001762:	f000 f88b 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000284 	.word	0x20000284
 8001770:	40004400 	.word	0x40004400

08001774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_DMA_Init+0x38>)
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_DMA_Init+0x38>)
 8001780:	2101      	movs	r1, #1
 8001782:	430a      	orrs	r2, r1
 8001784:	615a      	str	r2, [r3, #20]
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_DMA_Init+0x38>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2201      	movs	r2, #1
 800178c:	4013      	ands	r3, r2
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	200a      	movs	r0, #10
 8001798:	f000 fafc 	bl	8001d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800179c:	200a      	movs	r0, #10
 800179e:	f000 fb0e 	bl	8001dbe <HAL_NVIC_EnableIRQ>

}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	40021000 	.word	0x40021000

080017b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	240c      	movs	r4, #12
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	0018      	movs	r0, r3
 80017bc:	2314      	movs	r3, #20
 80017be:	001a      	movs	r2, r3
 80017c0:	2100      	movs	r1, #0
 80017c2:	f002 fd85 	bl	80042d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <MX_GPIO_Init+0xc4>)
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <MX_GPIO_Init+0xc4>)
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	0309      	lsls	r1, r1, #12
 80017d0:	430a      	orrs	r2, r1
 80017d2:	615a      	str	r2, [r3, #20]
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <MX_GPIO_Init+0xc4>)
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	031b      	lsls	r3, r3, #12
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <MX_GPIO_Init+0xc4>)
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	4b23      	ldr	r3, [pc, #140]	; (8001874 <MX_GPIO_Init+0xc4>)
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	0289      	lsls	r1, r1, #10
 80017ec:	430a      	orrs	r2, r1
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <MX_GPIO_Init+0xc4>)
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	029b      	lsls	r3, r3, #10
 80017f8:	4013      	ands	r3, r2
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_SET);
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	019b      	lsls	r3, r3, #6
 8001802:	481d      	ldr	r0, [pc, #116]	; (8001878 <MX_GPIO_Init+0xc8>)
 8001804:	2201      	movs	r2, #1
 8001806:	0019      	movs	r1, r3
 8001808:	f000 fdea 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_SIM800l_GPIO_Port, RESET_SIM800l_Pin, GPIO_PIN_RESET);
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	0219      	lsls	r1, r3, #8
 8001810:	2390      	movs	r3, #144	; 0x90
 8001812:	05db      	lsls	r3, r3, #23
 8001814:	2200      	movs	r2, #0
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fde2 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PC13_Pin */
  GPIO_InitStruct.Pin = LED_PC13_Pin;
 800181c:	193b      	adds	r3, r7, r4
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	0192      	lsls	r2, r2, #6
 8001822:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	193b      	adds	r3, r7, r4
 8001826:	2201      	movs	r2, #1
 8001828:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	193b      	adds	r3, r7, r4
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	193b      	adds	r3, r7, r4
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 8001836:	193b      	adds	r3, r7, r4
 8001838:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <MX_GPIO_Init+0xc8>)
 800183a:	0019      	movs	r1, r3
 800183c:	0010      	movs	r0, r2
 800183e:	f000 fc5f 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_SIM800l_Pin */
  GPIO_InitStruct.Pin = RESET_SIM800l_Pin;
 8001842:	0021      	movs	r1, r4
 8001844:	187b      	adds	r3, r7, r1
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	0212      	lsls	r2, r2, #8
 800184a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	187b      	adds	r3, r7, r1
 800184e:	2201      	movs	r2, #1
 8001850:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	187b      	adds	r3, r7, r1
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	187b      	adds	r3, r7, r1
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RESET_SIM800l_GPIO_Port, &GPIO_InitStruct);
 800185e:	187a      	adds	r2, r7, r1
 8001860:	2390      	movs	r3, #144	; 0x90
 8001862:	05db      	lsls	r3, r3, #23
 8001864:	0011      	movs	r1, r2
 8001866:	0018      	movs	r0, r3
 8001868:	f000 fc4a 	bl	8002100 <HAL_GPIO_Init>

}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b009      	add	sp, #36	; 0x24
 8001872:	bd90      	pop	{r4, r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	48000800 	.word	0x48000800

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001884:	e7fe      	b.n	8001884 <Error_Handler+0x8>
	...

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_MspInit+0x44>)
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_MspInit+0x44>)
 8001894:	2101      	movs	r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	619a      	str	r2, [r3, #24]
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_MspInit+0x44>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2201      	movs	r2, #1
 80018a0:	4013      	ands	r3, r2
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_MspInit+0x44>)
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_MspInit+0x44>)
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	0549      	lsls	r1, r1, #21
 80018b0:	430a      	orrs	r2, r1
 80018b2:	61da      	str	r2, [r3, #28]
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_MspInit+0x44>)
 80018b6:	69da      	ldr	r2, [r3, #28]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	055b      	lsls	r3, r3, #21
 80018bc:	4013      	ands	r3, r2
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b002      	add	sp, #8
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b08d      	sub	sp, #52	; 0x34
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	241c      	movs	r4, #28
 80018da:	193b      	adds	r3, r7, r4
 80018dc:	0018      	movs	r0, r3
 80018de:	2314      	movs	r3, #20
 80018e0:	001a      	movs	r2, r3
 80018e2:	2100      	movs	r1, #0
 80018e4:	f002 fcf4 	bl	80042d0 <memset>
  if(huart->Instance==USART1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a54      	ldr	r2, [pc, #336]	; (8001a40 <HAL_UART_MspInit+0x170>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d162      	bne.n	80019b8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f2:	4b54      	ldr	r3, [pc, #336]	; (8001a44 <HAL_UART_MspInit+0x174>)
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_UART_MspInit+0x174>)
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	01c9      	lsls	r1, r1, #7
 80018fc:	430a      	orrs	r2, r1
 80018fe:	619a      	str	r2, [r3, #24]
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_UART_MspInit+0x174>)
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	01db      	lsls	r3, r3, #7
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	4b4d      	ldr	r3, [pc, #308]	; (8001a44 <HAL_UART_MspInit+0x174>)
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <HAL_UART_MspInit+0x174>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0289      	lsls	r1, r1, #10
 8001918:	430a      	orrs	r2, r1
 800191a:	615a      	str	r2, [r3, #20]
 800191c:	4b49      	ldr	r3, [pc, #292]	; (8001a44 <HAL_UART_MspInit+0x174>)
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	029b      	lsls	r3, r3, #10
 8001924:	4013      	ands	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800192a:	193b      	adds	r3, r7, r4
 800192c:	22c0      	movs	r2, #192	; 0xc0
 800192e:	00d2      	lsls	r2, r2, #3
 8001930:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	0021      	movs	r1, r4
 8001934:	187b      	adds	r3, r7, r1
 8001936:	2202      	movs	r2, #2
 8001938:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	187b      	adds	r3, r7, r1
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001940:	187b      	adds	r3, r7, r1
 8001942:	2203      	movs	r2, #3
 8001944:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2201      	movs	r2, #1
 800194a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194c:	187a      	adds	r2, r7, r1
 800194e:	2390      	movs	r3, #144	; 0x90
 8001950:	05db      	lsls	r3, r3, #23
 8001952:	0011      	movs	r1, r2
 8001954:	0018      	movs	r0, r3
 8001956:	f000 fbd3 	bl	8002100 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_UART_MspInit+0x178>)
 800195c:	4a3b      	ldr	r2, [pc, #236]	; (8001a4c <HAL_UART_MspInit+0x17c>)
 800195e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001960:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_UART_MspInit+0x178>)
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_UART_MspInit+0x178>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_UART_MspInit+0x178>)
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_UART_MspInit+0x178>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_UART_MspInit+0x178>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800197e:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <HAL_UART_MspInit+0x178>)
 8001980:	2220      	movs	r2, #32
 8001982:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001984:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_UART_MspInit+0x178>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_UART_MspInit+0x178>)
 800198c:	0018      	movs	r0, r3
 800198e:	f000 fa33 	bl	8001df8 <HAL_DMA_Init>
 8001992:	1e03      	subs	r3, r0, #0
 8001994:	d001      	beq.n	800199a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001996:	f7ff ff71 	bl	800187c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a2a      	ldr	r2, [pc, #168]	; (8001a48 <HAL_UART_MspInit+0x178>)
 800199e:	671a      	str	r2, [r3, #112]	; 0x70
 80019a0:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_UART_MspInit+0x178>)
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	201b      	movs	r0, #27
 80019ac:	f000 f9f2 	bl	8001d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019b0:	201b      	movs	r0, #27
 80019b2:	f000 fa04 	bl	8001dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019b6:	e03f      	b.n	8001a38 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <HAL_UART_MspInit+0x180>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d13a      	bne.n	8001a38 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_UART_MspInit+0x174>)
 80019c4:	69da      	ldr	r2, [r3, #28]
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <HAL_UART_MspInit+0x174>)
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	0289      	lsls	r1, r1, #10
 80019cc:	430a      	orrs	r2, r1
 80019ce:	61da      	str	r2, [r3, #28]
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_UART_MspInit+0x174>)
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	029b      	lsls	r3, r3, #10
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_UART_MspInit+0x174>)
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_UART_MspInit+0x174>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	0289      	lsls	r1, r1, #10
 80019e8:	430a      	orrs	r2, r1
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_UART_MspInit+0x174>)
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	029b      	lsls	r3, r3, #10
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019fa:	211c      	movs	r1, #28
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2202      	movs	r2, #2
 8001a06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2203      	movs	r2, #3
 8001a12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2201      	movs	r2, #1
 8001a18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	187a      	adds	r2, r7, r1
 8001a1c:	2390      	movs	r3, #144	; 0x90
 8001a1e:	05db      	lsls	r3, r3, #23
 8001a20:	0011      	movs	r1, r2
 8001a22:	0018      	movs	r0, r3
 8001a24:	f000 fb6c 	bl	8002100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	201c      	movs	r0, #28
 8001a2e:	f000 f9b1 	bl	8001d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a32:	201c      	movs	r0, #28
 8001a34:	f000 f9c3 	bl	8001dbe <HAL_NVIC_EnableIRQ>
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b00d      	add	sp, #52	; 0x34
 8001a3e:	bd90      	pop	{r4, r7, pc}
 8001a40:	40013800 	.word	0x40013800
 8001a44:	40021000 	.word	0x40021000
 8001a48:	200001bc 	.word	0x200001bc
 8001a4c:	40020030 	.word	0x40020030
 8001a50:	40004400 	.word	0x40004400

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <NMI_Handler+0x4>

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a78:	f000 f8a0 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 fa79 	bl	8001f82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	200001bc 	.word	0x200001bc

08001a9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <USART1_IRQHandler+0x14>)
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f001 fb6c 	bl	8003180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	20000200 	.word	0x20000200

08001ab4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <USART2_IRQHandler+0x14>)
 8001aba:	0018      	movs	r0, r3
 8001abc:	f001 fb60 	bl	8003180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	20000284 	.word	0x20000284

08001acc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ada:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001adc:	480d      	ldr	r0, [pc, #52]	; (8001b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ade:	490e      	ldr	r1, [pc, #56]	; (8001b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ae0:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <LoopForever+0xe>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae4:	e002      	b.n	8001aec <LoopCopyDataInit>

08001ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aea:	3304      	adds	r3, #4

08001aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af0:	d3f9      	bcc.n	8001ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af2:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af4:	4c0b      	ldr	r4, [pc, #44]	; (8001b24 <LoopForever+0x16>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af8:	e001      	b.n	8001afe <LoopFillZerobss>

08001afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001afc:	3204      	adds	r2, #4

08001afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b00:	d3fb      	bcc.n	8001afa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b02:	f7ff ffe3 	bl	8001acc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b06:	f002 fbbf 	bl	8004288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b0a:	f7fe fbab 	bl	8000264 <main>

08001b0e <LoopForever>:

LoopForever:
    b LoopForever
 8001b0e:	e7fe      	b.n	8001b0e <LoopForever>
  ldr   r0, =_estack
 8001b10:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b1c:	08004338 	.word	0x08004338
  ldr r2, =_sbss
 8001b20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b24:	2000030c 	.word	0x2000030c

08001b28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_IRQHandler>
	...

08001b2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_Init+0x24>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_Init+0x24>)
 8001b36:	2110      	movs	r1, #16
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f809 	bl	8001b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b42:	f7ff fea1 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	40022000 	.word	0x40022000

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_InitTick+0x5c>)
 8001b5e:	681c      	ldr	r4, [r3, #0]
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_InitTick+0x60>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	0019      	movs	r1, r3
 8001b66:	23fa      	movs	r3, #250	; 0xfa
 8001b68:	0098      	lsls	r0, r3, #2
 8001b6a:	f7fe fad5 	bl	8000118 <__udivsi3>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	0019      	movs	r1, r3
 8001b72:	0020      	movs	r0, r4
 8001b74:	f7fe fad0 	bl	8000118 <__udivsi3>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 f92f 	bl	8001dde <HAL_SYSTICK_Config>
 8001b80:	1e03      	subs	r3, r0, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e00f      	b.n	8001ba8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d80b      	bhi.n	8001ba6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	2301      	movs	r3, #1
 8001b92:	425b      	negs	r3, r3
 8001b94:	2200      	movs	r2, #0
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 f8fc 	bl	8001d94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_InitTick+0x64>)
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b003      	add	sp, #12
 8001bae:	bd90      	pop	{r4, r7, pc}
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_IncTick+0x1c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	18d2      	adds	r2, r2, r3
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_IncTick+0x20>)
 8001bce:	601a      	str	r2, [r3, #0]
}
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000308 	.word	0x20000308

08001be0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b02      	ldr	r3, [pc, #8]	; (8001bf0 <HAL_GetTick+0x10>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	20000308 	.word	0x20000308

08001bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff fff0 	bl	8001be0 <HAL_GetTick>
 8001c00:	0003      	movs	r3, r0
 8001c02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	d005      	beq.n	8001c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_Delay+0x44>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	001a      	movs	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	189b      	adds	r3, r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	f7ff ffe0 	bl	8001be0 <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f7      	bhi.n	8001c1c <HAL_Delay+0x28>
  {
  }
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b004      	add	sp, #16
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	20000008 	.word	0x20000008

08001c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	0002      	movs	r2, r0
 8001c44:	1dfb      	adds	r3, r7, #7
 8001c46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	1dfb      	adds	r3, r7, #7
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c4e:	d809      	bhi.n	8001c64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c50:	1dfb      	adds	r3, r7, #7
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	001a      	movs	r2, r3
 8001c56:	231f      	movs	r3, #31
 8001c58:	401a      	ands	r2, r3
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_EnableIRQ+0x30>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4091      	lsls	r1, r2
 8001c60:	000a      	movs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]
  }
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	0002      	movs	r2, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	1dfb      	adds	r3, r7, #7
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b7f      	cmp	r3, #127	; 0x7f
 8001c84:	d828      	bhi.n	8001cd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c86:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <__NVIC_SetPriority+0xd4>)
 8001c88:	1dfb      	adds	r3, r7, #7
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	33c0      	adds	r3, #192	; 0xc0
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	589b      	ldr	r3, [r3, r2]
 8001c96:	1dfa      	adds	r2, r7, #7
 8001c98:	7812      	ldrb	r2, [r2, #0]
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	00d2      	lsls	r2, r2, #3
 8001ca2:	21ff      	movs	r1, #255	; 0xff
 8001ca4:	4091      	lsls	r1, r2
 8001ca6:	000a      	movs	r2, r1
 8001ca8:	43d2      	mvns	r2, r2
 8001caa:	401a      	ands	r2, r3
 8001cac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	019b      	lsls	r3, r3, #6
 8001cb2:	22ff      	movs	r2, #255	; 0xff
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	4003      	ands	r3, r0
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cc4:	481f      	ldr	r0, [pc, #124]	; (8001d44 <__NVIC_SetPriority+0xd4>)
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b25b      	sxtb	r3, r3
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	33c0      	adds	r3, #192	; 0xc0
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cd6:	e031      	b.n	8001d3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <__NVIC_SetPriority+0xd8>)
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	0019      	movs	r1, r3
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	3b08      	subs	r3, #8
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3306      	adds	r3, #6
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	18d3      	adds	r3, r2, r3
 8001cee:	3304      	adds	r3, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	1dfa      	adds	r2, r7, #7
 8001cf4:	7812      	ldrb	r2, [r2, #0]
 8001cf6:	0011      	movs	r1, r2
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	00d2      	lsls	r2, r2, #3
 8001cfe:	21ff      	movs	r1, #255	; 0xff
 8001d00:	4091      	lsls	r1, r2
 8001d02:	000a      	movs	r2, r1
 8001d04:	43d2      	mvns	r2, r2
 8001d06:	401a      	ands	r2, r3
 8001d08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	019b      	lsls	r3, r3, #6
 8001d0e:	22ff      	movs	r2, #255	; 0xff
 8001d10:	401a      	ands	r2, r3
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	0018      	movs	r0, r3
 8001d18:	2303      	movs	r3, #3
 8001d1a:	4003      	ands	r3, r0
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d20:	4809      	ldr	r0, [pc, #36]	; (8001d48 <__NVIC_SetPriority+0xd8>)
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	001c      	movs	r4, r3
 8001d28:	230f      	movs	r3, #15
 8001d2a:	4023      	ands	r3, r4
 8001d2c:	3b08      	subs	r3, #8
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	430a      	orrs	r2, r1
 8001d32:	3306      	adds	r3, #6
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	18c3      	adds	r3, r0, r3
 8001d38:	3304      	adds	r3, #4
 8001d3a:	601a      	str	r2, [r3, #0]
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b003      	add	sp, #12
 8001d42:	bd90      	pop	{r4, r7, pc}
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	045b      	lsls	r3, r3, #17
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d301      	bcc.n	8001d64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d60:	2301      	movs	r3, #1
 8001d62:	e010      	b.n	8001d86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <SysTick_Config+0x44>)
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	3a01      	subs	r2, #1
 8001d6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	425b      	negs	r3, r3
 8001d70:	2103      	movs	r1, #3
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7ff ff7c 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <SysTick_Config+0x44>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <SysTick_Config+0x44>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	210f      	movs	r1, #15
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	1c02      	adds	r2, r0, #0
 8001da4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	0011      	movs	r1, r2
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7ff ff5d 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b004      	add	sp, #16
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	1dfb      	adds	r3, r7, #7
 8001dc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b25b      	sxtb	r3, r3
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff ff33 	bl	8001c3c <__NVIC_EnableIRQ>
}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff ffaf 	bl	8001d4c <SysTick_Config>
 8001dee:	0003      	movs	r3, r0
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b002      	add	sp, #8
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e036      	b.n	8001e7c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2221      	movs	r2, #33	; 0x21
 8001e12:	2102      	movs	r1, #2
 8001e14:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_DMA_Init+0x8c>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f000 f932 	bl	80020c8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2221      	movs	r2, #33	; 0x21
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2220      	movs	r2, #32
 8001e76:	2100      	movs	r1, #0
 8001e78:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}  
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b004      	add	sp, #16
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	ffffc00f 	.word	0xffffc00f

08001e88 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2221      	movs	r2, #33	; 0x21
 8001e94:	5c9b      	ldrb	r3, [r3, r2]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d008      	beq.n	8001eae <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e020      	b.n	8001ef0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	210e      	movs	r1, #14
 8001eba:	438a      	bics	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	438a      	bics	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4091      	lsls	r1, r2
 8001eda:	000a      	movs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2221      	movs	r2, #33	; 0x21
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	2100      	movs	r1, #0
 8001eec:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	210f      	movs	r1, #15
 8001f02:	187b      	adds	r3, r7, r1
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2221      	movs	r2, #33	; 0x21
 8001f0c:	5c9b      	ldrb	r3, [r3, r2]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d006      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2204      	movs	r2, #4
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f1a:	187b      	adds	r3, r7, r1
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	e028      	b.n	8001f74 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	210e      	movs	r1, #14
 8001f2e:	438a      	bics	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	438a      	bics	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4091      	lsls	r1, r2
 8001f4e:	000a      	movs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2221      	movs	r2, #33	; 0x21
 8001f56:	2101      	movs	r1, #1
 8001f58:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	2100      	movs	r1, #0
 8001f60:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d004      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	0010      	movs	r0, r2
 8001f72:	4798      	blx	r3
    } 
  }
  return status;
 8001f74:	230f      	movs	r3, #15
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	781b      	ldrb	r3, [r3, #0]
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b004      	add	sp, #16
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	0013      	movs	r3, r2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d024      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x72>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2204      	movs	r2, #4
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d020      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d107      	bne.n	8001fce <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2104      	movs	r1, #4
 8001fca:	438a      	bics	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	4091      	lsls	r1, r2
 8001fda:	000a      	movs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d100      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x66>
 8001fe6:	e06a      	b.n	80020be <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	0010      	movs	r0, r2
 8001ff0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ff2:	e064      	b.n	80020be <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	0013      	movs	r3, r2
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	d02b      	beq.n	800205c <HAL_DMA_IRQHandler+0xda>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2202      	movs	r2, #2
 8002008:	4013      	ands	r3, r2
 800200a:	d027      	beq.n	800205c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2220      	movs	r2, #32
 8002014:	4013      	ands	r3, r2
 8002016:	d10b      	bne.n	8002030 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	210a      	movs	r1, #10
 8002024:	438a      	bics	r2, r1
 8002026:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2221      	movs	r2, #33	; 0x21
 800202c:	2101      	movs	r1, #1
 800202e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002038:	2102      	movs	r1, #2
 800203a:	4091      	lsls	r1, r2
 800203c:	000a      	movs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	2100      	movs	r1, #0
 8002046:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	d036      	beq.n	80020be <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	0010      	movs	r0, r2
 8002058:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800205a:	e030      	b.n	80020be <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	2208      	movs	r2, #8
 8002062:	409a      	lsls	r2, r3
 8002064:	0013      	movs	r3, r2
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4013      	ands	r3, r2
 800206a:	d028      	beq.n	80020be <HAL_DMA_IRQHandler+0x13c>
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2208      	movs	r2, #8
 8002070:	4013      	ands	r3, r2
 8002072:	d024      	beq.n	80020be <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	210e      	movs	r1, #14
 8002080:	438a      	bics	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208c:	2101      	movs	r1, #1
 800208e:	4091      	lsls	r1, r2
 8002090:	000a      	movs	r2, r1
 8002092:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2221      	movs	r2, #33	; 0x21
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	2100      	movs	r1, #0
 80020a8:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	0010      	movs	r0, r2
 80020ba:	4798      	blx	r3
    }
   }
}  
 80020bc:	e7ff      	b.n	80020be <HAL_DMA_IRQHandler+0x13c>
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b004      	add	sp, #16
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <DMA_CalcBaseAndBitshift+0x30>)
 80020d6:	4694      	mov	ip, r2
 80020d8:	4463      	add	r3, ip
 80020da:	2114      	movs	r1, #20
 80020dc:	0018      	movs	r0, r3
 80020de:	f7fe f81b 	bl	8000118 <__udivsi3>
 80020e2:	0003      	movs	r3, r0
 80020e4:	009a      	lsls	r2, r3, #2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a03      	ldr	r2, [pc, #12]	; (80020fc <DMA_CalcBaseAndBitshift+0x34>)
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	bffdfff8 	.word	0xbffdfff8
 80020fc:	40020000 	.word	0x40020000

08002100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210e:	e14f      	b.n	80023b0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4091      	lsls	r1, r2
 800211a:	000a      	movs	r2, r1
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d100      	bne.n	8002128 <HAL_GPIO_Init+0x28>
 8002126:	e140      	b.n	80023aa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2203      	movs	r2, #3
 800212e:	4013      	ands	r3, r2
 8002130:	2b01      	cmp	r3, #1
 8002132:	d005      	beq.n	8002140 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2203      	movs	r2, #3
 800213a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800213c:	2b02      	cmp	r3, #2
 800213e:	d130      	bne.n	80021a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	409a      	lsls	r2, r3
 800214e:	0013      	movs	r3, r2
 8002150:	43da      	mvns	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	409a      	lsls	r2, r3
 8002162:	0013      	movs	r3, r2
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002176:	2201      	movs	r2, #1
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
 800217c:	0013      	movs	r3, r2
 800217e:	43da      	mvns	r2, r3
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	2201      	movs	r2, #1
 800218e:	401a      	ands	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	409a      	lsls	r2, r3
 8002194:	0013      	movs	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2203      	movs	r2, #3
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d017      	beq.n	80021de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	409a      	lsls	r2, r3
 80021bc:	0013      	movs	r3, r2
 80021be:	43da      	mvns	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	409a      	lsls	r2, r3
 80021d0:	0013      	movs	r3, r2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2203      	movs	r2, #3
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d123      	bne.n	8002232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	58d3      	ldr	r3, [r2, r3]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2207      	movs	r2, #7
 80021fc:	4013      	ands	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	409a      	lsls	r2, r3
 8002204:	0013      	movs	r3, r2
 8002206:	43da      	mvns	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2107      	movs	r1, #7
 8002216:	400b      	ands	r3, r1
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	409a      	lsls	r2, r3
 800221c:	0013      	movs	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	6939      	ldr	r1, [r7, #16]
 8002230:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	409a      	lsls	r2, r3
 8002240:	0013      	movs	r3, r2
 8002242:	43da      	mvns	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	401a      	ands	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	409a      	lsls	r2, r3
 8002258:	0013      	movs	r3, r2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	23c0      	movs	r3, #192	; 0xc0
 800226c:	029b      	lsls	r3, r3, #10
 800226e:	4013      	ands	r3, r2
 8002270:	d100      	bne.n	8002274 <HAL_GPIO_Init+0x174>
 8002272:	e09a      	b.n	80023aa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002274:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <HAL_GPIO_Init+0x2c8>)
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_GPIO_Init+0x2c8>)
 800227a:	2101      	movs	r1, #1
 800227c:	430a      	orrs	r2, r1
 800227e:	619a      	str	r2, [r3, #24]
 8002280:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <HAL_GPIO_Init+0x2c8>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2201      	movs	r2, #1
 8002286:	4013      	ands	r3, r2
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800228c:	4a4f      	ldr	r2, [pc, #316]	; (80023cc <HAL_GPIO_Init+0x2cc>)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	589b      	ldr	r3, [r3, r2]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2203      	movs	r2, #3
 800229e:	4013      	ands	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	409a      	lsls	r2, r3
 80022a6:	0013      	movs	r3, r2
 80022a8:	43da      	mvns	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	2390      	movs	r3, #144	; 0x90
 80022b4:	05db      	lsls	r3, r3, #23
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x1e2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a44      	ldr	r2, [pc, #272]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x1de>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a43      	ldr	r2, [pc, #268]	; (80023d4 <HAL_GPIO_Init+0x2d4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x1da>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a42      	ldr	r2, [pc, #264]	; (80023d8 <HAL_GPIO_Init+0x2d8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x1d6>
 80022d2:	2303      	movs	r3, #3
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x1e4>
 80022d6:	2305      	movs	r3, #5
 80022d8:	e004      	b.n	80022e4 <HAL_GPIO_Init+0x1e4>
 80022da:	2302      	movs	r3, #2
 80022dc:	e002      	b.n	80022e4 <HAL_GPIO_Init+0x1e4>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_GPIO_Init+0x1e4>
 80022e2:	2300      	movs	r3, #0
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	2103      	movs	r1, #3
 80022e8:	400a      	ands	r2, r1
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	4093      	lsls	r3, r2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022f4:	4935      	ldr	r1, [pc, #212]	; (80023cc <HAL_GPIO_Init+0x2cc>)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	43da      	mvns	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	025b      	lsls	r3, r3, #9
 800231a:	4013      	ands	r3, r2
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002326:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	43da      	mvns	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	029b      	lsls	r3, r3, #10
 8002344:	4013      	ands	r3, r2
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002350:	4b22      	ldr	r3, [pc, #136]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002356:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	43da      	mvns	r2, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	035b      	lsls	r3, r3, #13
 800236e:	4013      	ands	r3, r2
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43da      	mvns	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	039b      	lsls	r3, r3, #14
 8002398:	4013      	ands	r3, r2
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_GPIO_Init+0x2dc>)
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3301      	adds	r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	40da      	lsrs	r2, r3
 80023b8:	1e13      	subs	r3, r2, #0
 80023ba:	d000      	beq.n	80023be <HAL_GPIO_Init+0x2be>
 80023bc:	e6a8      	b.n	8002110 <HAL_GPIO_Init+0x10>
  } 
}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b006      	add	sp, #24
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010000 	.word	0x40010000
 80023d0:	48000400 	.word	0x48000400
 80023d4:	48000800 	.word	0x48000800
 80023d8:	48000c00 	.word	0x48000c00
 80023dc:	40010400 	.word	0x40010400

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	0008      	movs	r0, r1
 80023ea:	0011      	movs	r1, r2
 80023ec:	1cbb      	adds	r3, r7, #2
 80023ee:	1c02      	adds	r2, r0, #0
 80023f0:	801a      	strh	r2, [r3, #0]
 80023f2:	1c7b      	adds	r3, r7, #1
 80023f4:	1c0a      	adds	r2, r1, #0
 80023f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f8:	1c7b      	adds	r3, r7, #1
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d004      	beq.n	800240a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002400:	1cbb      	adds	r3, r7, #2
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002408:	e003      	b.n	8002412 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800240a:	1cbb      	adds	r3, r7, #2
 800240c:	881a      	ldrh	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b002      	add	sp, #8
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	000a      	movs	r2, r1
 8002424:	1cbb      	adds	r3, r7, #2
 8002426:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800242e:	1cbb      	adds	r3, r7, #2
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4013      	ands	r3, r2
 8002436:	041a      	lsls	r2, r3, #16
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	1cb9      	adds	r1, r7, #2
 800243e:	8809      	ldrh	r1, [r1, #0]
 8002440:	400b      	ands	r3, r1
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b004      	add	sp, #16
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e301      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2201      	movs	r2, #1
 8002468:	4013      	ands	r3, r2
 800246a:	d100      	bne.n	800246e <HAL_RCC_OscConfig+0x1e>
 800246c:	e08d      	b.n	800258a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800246e:	4bc3      	ldr	r3, [pc, #780]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	220c      	movs	r2, #12
 8002474:	4013      	ands	r3, r2
 8002476:	2b04      	cmp	r3, #4
 8002478:	d00e      	beq.n	8002498 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800247a:	4bc0      	ldr	r3, [pc, #768]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	220c      	movs	r2, #12
 8002480:	4013      	ands	r3, r2
 8002482:	2b08      	cmp	r3, #8
 8002484:	d116      	bne.n	80024b4 <HAL_RCC_OscConfig+0x64>
 8002486:	4bbd      	ldr	r3, [pc, #756]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	025b      	lsls	r3, r3, #9
 800248e:	401a      	ands	r2, r3
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	025b      	lsls	r3, r3, #9
 8002494:	429a      	cmp	r2, r3
 8002496:	d10d      	bne.n	80024b4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	4bb8      	ldr	r3, [pc, #736]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	4013      	ands	r3, r2
 80024a2:	d100      	bne.n	80024a6 <HAL_RCC_OscConfig+0x56>
 80024a4:	e070      	b.n	8002588 <HAL_RCC_OscConfig+0x138>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d000      	beq.n	80024b0 <HAL_RCC_OscConfig+0x60>
 80024ae:	e06b      	b.n	8002588 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e2d8      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_OscConfig+0x7c>
 80024bc:	4baf      	ldr	r3, [pc, #700]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4bae      	ldr	r3, [pc, #696]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	0249      	lsls	r1, r1, #9
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e02f      	b.n	800252c <HAL_RCC_OscConfig+0xdc>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10c      	bne.n	80024ee <HAL_RCC_OscConfig+0x9e>
 80024d4:	4ba9      	ldr	r3, [pc, #676]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4ba8      	ldr	r3, [pc, #672]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024da:	49a9      	ldr	r1, [pc, #676]	; (8002780 <HAL_RCC_OscConfig+0x330>)
 80024dc:	400a      	ands	r2, r1
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	4ba6      	ldr	r3, [pc, #664]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4ba5      	ldr	r3, [pc, #660]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024e6:	49a7      	ldr	r1, [pc, #668]	; (8002784 <HAL_RCC_OscConfig+0x334>)
 80024e8:	400a      	ands	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e01e      	b.n	800252c <HAL_RCC_OscConfig+0xdc>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d10e      	bne.n	8002514 <HAL_RCC_OscConfig+0xc4>
 80024f6:	4ba1      	ldr	r3, [pc, #644]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4ba0      	ldr	r3, [pc, #640]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	02c9      	lsls	r1, r1, #11
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	4b9d      	ldr	r3, [pc, #628]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b9c      	ldr	r3, [pc, #624]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	0249      	lsls	r1, r1, #9
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0xdc>
 8002514:	4b99      	ldr	r3, [pc, #612]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b98      	ldr	r3, [pc, #608]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800251a:	4999      	ldr	r1, [pc, #612]	; (8002780 <HAL_RCC_OscConfig+0x330>)
 800251c:	400a      	ands	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	4b96      	ldr	r3, [pc, #600]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b95      	ldr	r3, [pc, #596]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002526:	4997      	ldr	r1, [pc, #604]	; (8002784 <HAL_RCC_OscConfig+0x334>)
 8002528:	400a      	ands	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d014      	beq.n	800255e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff fb54 	bl	8001be0 <HAL_GetTick>
 8002538:	0003      	movs	r3, r0
 800253a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253e:	f7ff fb4f 	bl	8001be0 <HAL_GetTick>
 8002542:	0002      	movs	r2, r0
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b64      	cmp	r3, #100	; 0x64
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e28a      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002550:	4b8a      	ldr	r3, [pc, #552]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	029b      	lsls	r3, r3, #10
 8002558:	4013      	ands	r3, r2
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0xee>
 800255c:	e015      	b.n	800258a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff fb3f 	bl	8001be0 <HAL_GetTick>
 8002562:	0003      	movs	r3, r0
 8002564:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fb3a 	bl	8001be0 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e275      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	4b80      	ldr	r3, [pc, #512]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	029b      	lsls	r3, r3, #10
 8002582:	4013      	ands	r3, r2
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x118>
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2202      	movs	r2, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d100      	bne.n	8002596 <HAL_RCC_OscConfig+0x146>
 8002594:	e069      	b.n	800266a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002596:	4b79      	ldr	r3, [pc, #484]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	220c      	movs	r2, #12
 800259c:	4013      	ands	r3, r2
 800259e:	d00b      	beq.n	80025b8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025a0:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	220c      	movs	r2, #12
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d11c      	bne.n	80025e6 <HAL_RCC_OscConfig+0x196>
 80025ac:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	025b      	lsls	r3, r3, #9
 80025b4:	4013      	ands	r3, r2
 80025b6:	d116      	bne.n	80025e6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b8:	4b70      	ldr	r3, [pc, #448]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d005      	beq.n	80025ce <HAL_RCC_OscConfig+0x17e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d001      	beq.n	80025ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e24b      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	4b6b      	ldr	r3, [pc, #428]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	22f8      	movs	r2, #248	; 0xf8
 80025d4:	4393      	bics	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	00da      	lsls	r2, r3, #3
 80025de:	4b67      	ldr	r3, [pc, #412]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e4:	e041      	b.n	800266a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d024      	beq.n	8002638 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4b62      	ldr	r3, [pc, #392]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80025f4:	2101      	movs	r1, #1
 80025f6:	430a      	orrs	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7ff faf1 	bl	8001be0 <HAL_GetTick>
 80025fe:	0003      	movs	r3, r0
 8002600:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002604:	f7ff faec 	bl	8001be0 <HAL_GetTick>
 8002608:	0002      	movs	r2, r0
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e227      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002616:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2202      	movs	r2, #2
 800261c:	4013      	ands	r3, r2
 800261e:	d0f1      	beq.n	8002604 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b56      	ldr	r3, [pc, #344]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	22f8      	movs	r2, #248	; 0xf8
 8002626:	4393      	bics	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00da      	lsls	r2, r3, #3
 8002630:	4b52      	ldr	r3, [pc, #328]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e018      	b.n	800266a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002638:	4b50      	ldr	r3, [pc, #320]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b4f      	ldr	r3, [pc, #316]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800263e:	2101      	movs	r1, #1
 8002640:	438a      	bics	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff facc 	bl	8001be0 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264e:	f7ff fac7 	bl	8001be0 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e202      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002660:	4b46      	ldr	r3, [pc, #280]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2202      	movs	r2, #2
 8002666:	4013      	ands	r3, r2
 8002668:	d1f1      	bne.n	800264e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2208      	movs	r2, #8
 8002670:	4013      	ands	r3, r2
 8002672:	d036      	beq.n	80026e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d019      	beq.n	80026b0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267c:	4b3f      	ldr	r3, [pc, #252]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 800267e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002680:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002682:	2101      	movs	r1, #1
 8002684:	430a      	orrs	r2, r1
 8002686:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002688:	f7ff faaa 	bl	8001be0 <HAL_GetTick>
 800268c:	0003      	movs	r3, r0
 800268e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002692:	f7ff faa5 	bl	8001be0 <HAL_GetTick>
 8002696:	0002      	movs	r2, r0
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e1e0      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a4:	4b35      	ldr	r3, [pc, #212]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2202      	movs	r2, #2
 80026aa:	4013      	ands	r3, r2
 80026ac:	d0f1      	beq.n	8002692 <HAL_RCC_OscConfig+0x242>
 80026ae:	e018      	b.n	80026e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b0:	4b32      	ldr	r3, [pc, #200]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80026b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80026b6:	2101      	movs	r1, #1
 80026b8:	438a      	bics	r2, r1
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7ff fa90 	bl	8001be0 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c6:	f7ff fa8b 	bl	8001be0 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e1c6      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	2202      	movs	r2, #2
 80026de:	4013      	ands	r3, r2
 80026e0:	d1f1      	bne.n	80026c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2204      	movs	r2, #4
 80026e8:	4013      	ands	r3, r2
 80026ea:	d100      	bne.n	80026ee <HAL_RCC_OscConfig+0x29e>
 80026ec:	e0b4      	b.n	8002858 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ee:	201f      	movs	r0, #31
 80026f0:	183b      	adds	r3, r7, r0
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f6:	4b21      	ldr	r3, [pc, #132]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	055b      	lsls	r3, r3, #21
 80026fe:	4013      	ands	r3, r2
 8002700:	d110      	bne.n	8002724 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002708:	2180      	movs	r1, #128	; 0x80
 800270a:	0549      	lsls	r1, r1, #21
 800270c:	430a      	orrs	r2, r1
 800270e:	61da      	str	r2, [r3, #28]
 8002710:	4b1a      	ldr	r3, [pc, #104]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	055b      	lsls	r3, r3, #21
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800271e:	183b      	adds	r3, r7, r0
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	4b18      	ldr	r3, [pc, #96]	; (8002788 <HAL_RCC_OscConfig+0x338>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4013      	ands	r3, r2
 800272e:	d11a      	bne.n	8002766 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_RCC_OscConfig+0x338>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_RCC_OscConfig+0x338>)
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	0049      	lsls	r1, r1, #1
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273e:	f7ff fa4f 	bl	8001be0 <HAL_GetTick>
 8002742:	0003      	movs	r3, r0
 8002744:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002748:	f7ff fa4a 	bl	8001be0 <HAL_GetTick>
 800274c:	0002      	movs	r2, r0
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e185      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_OscConfig+0x338>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4013      	ands	r3, r2
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d10e      	bne.n	800278c <HAL_RCC_OscConfig+0x33c>
 800276e:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002770:	6a1a      	ldr	r2, [r3, #32]
 8002772:	4b02      	ldr	r3, [pc, #8]	; (800277c <HAL_RCC_OscConfig+0x32c>)
 8002774:	2101      	movs	r1, #1
 8002776:	430a      	orrs	r2, r1
 8002778:	621a      	str	r2, [r3, #32]
 800277a:	e035      	b.n	80027e8 <HAL_RCC_OscConfig+0x398>
 800277c:	40021000 	.word	0x40021000
 8002780:	fffeffff 	.word	0xfffeffff
 8002784:	fffbffff 	.word	0xfffbffff
 8002788:	40007000 	.word	0x40007000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10c      	bne.n	80027ae <HAL_RCC_OscConfig+0x35e>
 8002794:	4bb6      	ldr	r3, [pc, #728]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002796:	6a1a      	ldr	r2, [r3, #32]
 8002798:	4bb5      	ldr	r3, [pc, #724]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 800279a:	2101      	movs	r1, #1
 800279c:	438a      	bics	r2, r1
 800279e:	621a      	str	r2, [r3, #32]
 80027a0:	4bb3      	ldr	r3, [pc, #716]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80027a2:	6a1a      	ldr	r2, [r3, #32]
 80027a4:	4bb2      	ldr	r3, [pc, #712]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80027a6:	2104      	movs	r1, #4
 80027a8:	438a      	bics	r2, r1
 80027aa:	621a      	str	r2, [r3, #32]
 80027ac:	e01c      	b.n	80027e8 <HAL_RCC_OscConfig+0x398>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b05      	cmp	r3, #5
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x380>
 80027b6:	4bae      	ldr	r3, [pc, #696]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80027b8:	6a1a      	ldr	r2, [r3, #32]
 80027ba:	4bad      	ldr	r3, [pc, #692]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80027bc:	2104      	movs	r1, #4
 80027be:	430a      	orrs	r2, r1
 80027c0:	621a      	str	r2, [r3, #32]
 80027c2:	4bab      	ldr	r3, [pc, #684]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80027c4:	6a1a      	ldr	r2, [r3, #32]
 80027c6:	4baa      	ldr	r3, [pc, #680]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80027c8:	2101      	movs	r1, #1
 80027ca:	430a      	orrs	r2, r1
 80027cc:	621a      	str	r2, [r3, #32]
 80027ce:	e00b      	b.n	80027e8 <HAL_RCC_OscConfig+0x398>
 80027d0:	4ba7      	ldr	r3, [pc, #668]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80027d2:	6a1a      	ldr	r2, [r3, #32]
 80027d4:	4ba6      	ldr	r3, [pc, #664]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80027d6:	2101      	movs	r1, #1
 80027d8:	438a      	bics	r2, r1
 80027da:	621a      	str	r2, [r3, #32]
 80027dc:	4ba4      	ldr	r3, [pc, #656]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80027de:	6a1a      	ldr	r2, [r3, #32]
 80027e0:	4ba3      	ldr	r3, [pc, #652]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80027e2:	2104      	movs	r1, #4
 80027e4:	438a      	bics	r2, r1
 80027e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d014      	beq.n	800281a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f0:	f7ff f9f6 	bl	8001be0 <HAL_GetTick>
 80027f4:	0003      	movs	r3, r0
 80027f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	e009      	b.n	800280e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7ff f9f1 	bl	8001be0 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	4a9b      	ldr	r2, [pc, #620]	; (8002a74 <HAL_RCC_OscConfig+0x624>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e12b      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280e:	4b98      	ldr	r3, [pc, #608]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	2202      	movs	r2, #2
 8002814:	4013      	ands	r3, r2
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x3aa>
 8002818:	e013      	b.n	8002842 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7ff f9e1 	bl	8001be0 <HAL_GetTick>
 800281e:	0003      	movs	r3, r0
 8002820:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002822:	e009      	b.n	8002838 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002824:	f7ff f9dc 	bl	8001be0 <HAL_GetTick>
 8002828:	0002      	movs	r2, r0
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	4a91      	ldr	r2, [pc, #580]	; (8002a74 <HAL_RCC_OscConfig+0x624>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e116      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002838:	4b8d      	ldr	r3, [pc, #564]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	2202      	movs	r2, #2
 800283e:	4013      	ands	r3, r2
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002842:	231f      	movs	r3, #31
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d105      	bne.n	8002858 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284c:	4b88      	ldr	r3, [pc, #544]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	4b87      	ldr	r3, [pc, #540]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002852:	4989      	ldr	r1, [pc, #548]	; (8002a78 <HAL_RCC_OscConfig+0x628>)
 8002854:	400a      	ands	r2, r1
 8002856:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2210      	movs	r2, #16
 800285e:	4013      	ands	r3, r2
 8002860:	d063      	beq.n	800292a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d12a      	bne.n	80028c0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800286a:	4b81      	ldr	r3, [pc, #516]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 800286c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286e:	4b80      	ldr	r3, [pc, #512]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002870:	2104      	movs	r1, #4
 8002872:	430a      	orrs	r2, r1
 8002874:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002876:	4b7e      	ldr	r3, [pc, #504]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287a:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 800287c:	2101      	movs	r1, #1
 800287e:	430a      	orrs	r2, r1
 8002880:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7ff f9ad 	bl	8001be0 <HAL_GetTick>
 8002886:	0003      	movs	r3, r0
 8002888:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800288c:	f7ff f9a8 	bl	8001be0 <HAL_GetTick>
 8002890:	0002      	movs	r2, r0
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e0e3      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800289e:	4b74      	ldr	r3, [pc, #464]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80028a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a2:	2202      	movs	r2, #2
 80028a4:	4013      	ands	r3, r2
 80028a6:	d0f1      	beq.n	800288c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028a8:	4b71      	ldr	r3, [pc, #452]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80028aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ac:	22f8      	movs	r2, #248	; 0xf8
 80028ae:	4393      	bics	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	00da      	lsls	r2, r3, #3
 80028b8:	4b6d      	ldr	r3, [pc, #436]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80028ba:	430a      	orrs	r2, r1
 80028bc:	635a      	str	r2, [r3, #52]	; 0x34
 80028be:	e034      	b.n	800292a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	3305      	adds	r3, #5
 80028c6:	d111      	bne.n	80028ec <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80028c8:	4b69      	ldr	r3, [pc, #420]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80028ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028cc:	4b68      	ldr	r3, [pc, #416]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80028ce:	2104      	movs	r1, #4
 80028d0:	438a      	bics	r2, r1
 80028d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028d4:	4b66      	ldr	r3, [pc, #408]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80028d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d8:	22f8      	movs	r2, #248	; 0xf8
 80028da:	4393      	bics	r3, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	00da      	lsls	r2, r3, #3
 80028e4:	4b62      	ldr	r3, [pc, #392]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80028e6:	430a      	orrs	r2, r1
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34
 80028ea:	e01e      	b.n	800292a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028ec:	4b60      	ldr	r3, [pc, #384]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80028ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f0:	4b5f      	ldr	r3, [pc, #380]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80028f2:	2104      	movs	r1, #4
 80028f4:	430a      	orrs	r2, r1
 80028f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80028f8:	4b5d      	ldr	r3, [pc, #372]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80028fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fc:	4b5c      	ldr	r3, [pc, #368]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80028fe:	2101      	movs	r1, #1
 8002900:	438a      	bics	r2, r1
 8002902:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002904:	f7ff f96c 	bl	8001be0 <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800290e:	f7ff f967 	bl	8001be0 <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e0a2      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002924:	2202      	movs	r2, #2
 8002926:	4013      	ands	r3, r2
 8002928:	d1f1      	bne.n	800290e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d100      	bne.n	8002934 <HAL_RCC_OscConfig+0x4e4>
 8002932:	e097      	b.n	8002a64 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002934:	4b4e      	ldr	r3, [pc, #312]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	220c      	movs	r2, #12
 800293a:	4013      	ands	r3, r2
 800293c:	2b08      	cmp	r3, #8
 800293e:	d100      	bne.n	8002942 <HAL_RCC_OscConfig+0x4f2>
 8002940:	e06b      	b.n	8002a1a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d14c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294a:	4b49      	ldr	r3, [pc, #292]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b48      	ldr	r3, [pc, #288]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002950:	494a      	ldr	r1, [pc, #296]	; (8002a7c <HAL_RCC_OscConfig+0x62c>)
 8002952:	400a      	ands	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7ff f943 	bl	8001be0 <HAL_GetTick>
 800295a:	0003      	movs	r3, r0
 800295c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7ff f93e 	bl	8001be0 <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e079      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	4b3f      	ldr	r3, [pc, #252]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	049b      	lsls	r3, r3, #18
 800297a:	4013      	ands	r3, r2
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297e:	4b3c      	ldr	r3, [pc, #240]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	220f      	movs	r2, #15
 8002984:	4393      	bics	r3, r2
 8002986:	0019      	movs	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298c:	4b38      	ldr	r3, [pc, #224]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 800298e:	430a      	orrs	r2, r1
 8002990:	62da      	str	r2, [r3, #44]	; 0x2c
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4a3a      	ldr	r2, [pc, #232]	; (8002a80 <HAL_RCC_OscConfig+0x630>)
 8002998:	4013      	ands	r3, r2
 800299a:	0019      	movs	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	431a      	orrs	r2, r3
 80029a6:	4b32      	ldr	r3, [pc, #200]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ac:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b2f      	ldr	r3, [pc, #188]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80029b2:	2180      	movs	r1, #128	; 0x80
 80029b4:	0449      	lsls	r1, r1, #17
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7ff f911 	bl	8001be0 <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c4:	f7ff f90c 	bl	8001be0 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e047      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d6:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	049b      	lsls	r3, r3, #18
 80029de:	4013      	ands	r3, r2
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x574>
 80029e2:	e03f      	b.n	8002a64 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e4:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 80029ea:	4924      	ldr	r1, [pc, #144]	; (8002a7c <HAL_RCC_OscConfig+0x62c>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7ff f8f6 	bl	8001be0 <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fa:	f7ff f8f1 	bl	8001be0 <HAL_GetTick>
 80029fe:	0002      	movs	r2, r0
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e02c      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0c:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	049b      	lsls	r3, r3, #18
 8002a14:	4013      	ands	r3, r2
 8002a16:	d1f0      	bne.n	80029fa <HAL_RCC_OscConfig+0x5aa>
 8002a18:	e024      	b.n	8002a64 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e01f      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a2c:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <HAL_RCC_OscConfig+0x620>)
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	025b      	lsls	r3, r3, #9
 8002a38:	401a      	ands	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d10e      	bne.n	8002a60 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	220f      	movs	r2, #15
 8002a46:	401a      	ands	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d107      	bne.n	8002a60 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	23f0      	movs	r3, #240	; 0xf0
 8002a54:	039b      	lsls	r3, r3, #14
 8002a56:	401a      	ands	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b008      	add	sp, #32
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	40021000 	.word	0x40021000
 8002a74:	00001388 	.word	0x00001388
 8002a78:	efffffff 	.word	0xefffffff
 8002a7c:	feffffff 	.word	0xfeffffff
 8002a80:	ffc2ffff 	.word	0xffc2ffff

08002a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0b3      	b.n	8002c00 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b5b      	ldr	r3, [pc, #364]	; (8002c08 <HAL_RCC_ClockConfig+0x184>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d911      	bls.n	8002aca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b58      	ldr	r3, [pc, #352]	; (8002c08 <HAL_RCC_ClockConfig+0x184>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4393      	bics	r3, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	4b55      	ldr	r3, [pc, #340]	; (8002c08 <HAL_RCC_ClockConfig+0x184>)
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab8:	4b53      	ldr	r3, [pc, #332]	; (8002c08 <HAL_RCC_ClockConfig+0x184>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2201      	movs	r2, #1
 8002abe:	4013      	ands	r3, r2
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e09a      	b.n	8002c00 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d015      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2204      	movs	r2, #4
 8002ada:	4013      	ands	r3, r2
 8002adc:	d006      	beq.n	8002aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ade:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002ae4:	21e0      	movs	r1, #224	; 0xe0
 8002ae6:	00c9      	lsls	r1, r1, #3
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	22f0      	movs	r2, #240	; 0xf0
 8002af2:	4393      	bics	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	4b44      	ldr	r3, [pc, #272]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2201      	movs	r2, #1
 8002b06:	4013      	ands	r3, r2
 8002b08:	d040      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	029b      	lsls	r3, r3, #10
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d114      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06e      	b.n	8002c00 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2a:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	049b      	lsls	r3, r3, #18
 8002b32:	4013      	ands	r3, r2
 8002b34:	d108      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e062      	b.n	8002c00 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3a:	4b34      	ldr	r3, [pc, #208]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	4013      	ands	r3, r2
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e05b      	b.n	8002c00 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b48:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	4393      	bics	r3, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b5c:	f7ff f840 	bl	8001be0 <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b64:	e009      	b.n	8002b7a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b66:	f7ff f83b 	bl	8001be0 <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <HAL_RCC_ClockConfig+0x18c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e042      	b.n	8002c00 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	220c      	movs	r2, #12
 8002b80:	401a      	ands	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d1ec      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <HAL_RCC_ClockConfig+0x184>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2201      	movs	r2, #1
 8002b92:	4013      	ands	r3, r2
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d211      	bcs.n	8002bbe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_RCC_ClockConfig+0x184>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4393      	bics	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_RCC_ClockConfig+0x184>)
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bac:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <HAL_RCC_ClockConfig+0x184>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e020      	b.n	8002c00 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc8:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <HAL_RCC_ClockConfig+0x190>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bdc:	f000 f820 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002be0:	0001      	movs	r1, r0
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <HAL_RCC_ClockConfig+0x188>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	220f      	movs	r2, #15
 8002bea:	4013      	ands	r3, r2
 8002bec:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x194>)
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	000a      	movs	r2, r1
 8002bf2:	40da      	lsrs	r2, r3
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x198>)
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bf8:	2003      	movs	r0, #3
 8002bfa:	f7fe ffab 	bl	8001b54 <HAL_InitTick>
  
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b004      	add	sp, #16
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40022000 	.word	0x40022000
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	00001388 	.word	0x00001388
 8002c14:	fffff8ff 	.word	0xfffff8ff
 8002c18:	08004318 	.word	0x08004318
 8002c1c:	20000000 	.word	0x20000000

08002c20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b08f      	sub	sp, #60	; 0x3c
 8002c24:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c26:	2314      	movs	r3, #20
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	4a2b      	ldr	r2, [pc, #172]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c2c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c2e:	c313      	stmia	r3!, {r0, r1, r4}
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	4a29      	ldr	r2, [pc, #164]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c38:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c3a:	c313      	stmia	r3!, {r0, r1, r4}
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c44:	2300      	movs	r3, #0
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c48:	2300      	movs	r3, #0
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002c54:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	220c      	movs	r2, #12
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d002      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x4a>
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d003      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x50>
 8002c68:	e02d      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c6e:	e02d      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c72:	0c9b      	lsrs	r3, r3, #18
 8002c74:	220f      	movs	r2, #15
 8002c76:	4013      	ands	r3, r2
 8002c78:	2214      	movs	r2, #20
 8002c7a:	18ba      	adds	r2, r7, r2
 8002c7c:	5cd3      	ldrb	r3, [r2, r3]
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	220f      	movs	r2, #15
 8002c86:	4013      	ands	r3, r2
 8002c88:	1d3a      	adds	r2, r7, #4
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	025b      	lsls	r3, r3, #9
 8002c94:	4013      	ands	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c9a:	4812      	ldr	r0, [pc, #72]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c9c:	f7fd fa3c 	bl	8000118 <__udivsi3>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	001a      	movs	r2, r3
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	4353      	muls	r3, r2
 8002ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8002caa:	e009      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cae:	000a      	movs	r2, r1
 8002cb0:	0152      	lsls	r2, r2, #5
 8002cb2:	1a52      	subs	r2, r2, r1
 8002cb4:	0193      	lsls	r3, r2, #6
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	185b      	adds	r3, r3, r1
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cc4:	e002      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cc6:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b00f      	add	sp, #60	; 0x3c
 8002cd4:	bd90      	pop	{r4, r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	080042f8 	.word	0x080042f8
 8002cdc:	08004308 	.word	0x08004308
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	007a1200 	.word	0x007a1200

08002ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cec:	4b02      	ldr	r3, [pc, #8]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	20000000 	.word	0x20000000

08002cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d00:	f7ff fff2 	bl	8002ce8 <HAL_RCC_GetHCLKFreq>
 8002d04:	0001      	movs	r1, r0
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	4013      	ands	r3, r2
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d12:	5cd3      	ldrb	r3, [r2, r3]
 8002d14:	40d9      	lsrs	r1, r3
 8002d16:	000b      	movs	r3, r1
}    
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	40021000 	.word	0x40021000
 8002d24:	08004328 	.word	0x08004328

08002d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	025b      	lsls	r3, r3, #9
 8002d40:	4013      	ands	r3, r2
 8002d42:	d100      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d44:	e08e      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d46:	2017      	movs	r0, #23
 8002d48:	183b      	adds	r3, r7, r0
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4e:	4b57      	ldr	r3, [pc, #348]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	055b      	lsls	r3, r3, #21
 8002d56:	4013      	ands	r3, r2
 8002d58:	d110      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	4b54      	ldr	r3, [pc, #336]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d60:	2180      	movs	r1, #128	; 0x80
 8002d62:	0549      	lsls	r1, r1, #21
 8002d64:	430a      	orrs	r2, r1
 8002d66:	61da      	str	r2, [r3, #28]
 8002d68:	4b50      	ldr	r3, [pc, #320]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	055b      	lsls	r3, r3, #21
 8002d70:	4013      	ands	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d76:	183b      	adds	r3, r7, r0
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	4b4c      	ldr	r3, [pc, #304]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	d11a      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d88:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d8e:	2180      	movs	r1, #128	; 0x80
 8002d90:	0049      	lsls	r1, r1, #1
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d96:	f7fe ff23 	bl	8001be0 <HAL_GetTick>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9e:	e008      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da0:	f7fe ff1e 	bl	8001be0 <HAL_GetTick>
 8002da4:	0002      	movs	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e077      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db2:	4b3f      	ldr	r3, [pc, #252]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dc0:	6a1a      	ldr	r2, [r3, #32]
 8002dc2:	23c0      	movs	r3, #192	; 0xc0
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d034      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	23c0      	movs	r3, #192	; 0xc0
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d02c      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002de0:	4b32      	ldr	r3, [pc, #200]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4a33      	ldr	r2, [pc, #204]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dea:	4b30      	ldr	r3, [pc, #192]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dec:	6a1a      	ldr	r2, [r3, #32]
 8002dee:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	0249      	lsls	r1, r1, #9
 8002df4:	430a      	orrs	r2, r1
 8002df6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002df8:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dfe:	492e      	ldr	r1, [pc, #184]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002e00:	400a      	ands	r2, r1
 8002e02:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e04:	4b29      	ldr	r3, [pc, #164]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d013      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe fee5 	bl	8001be0 <HAL_GetTick>
 8002e16:	0003      	movs	r3, r0
 8002e18:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1a:	e009      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fee0 	bl	8001be0 <HAL_GetTick>
 8002e20:	0002      	movs	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	4a25      	ldr	r2, [pc, #148]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e038      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	2202      	movs	r2, #2
 8002e36:	4013      	ands	r3, r2
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e3a:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e4e:	2317      	movs	r3, #23
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d105      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e5e:	4918      	ldr	r1, [pc, #96]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	2203      	movs	r2, #3
 8002e74:	4393      	bics	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2220      	movs	r2, #32
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	2210      	movs	r2, #16
 8002e92:	4393      	bics	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	4b04      	ldr	r3, [pc, #16]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b006      	add	sp, #24
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40007000 	.word	0x40007000
 8002eb4:	fffffcff 	.word	0xfffffcff
 8002eb8:	fffeffff 	.word	0xfffeffff
 8002ebc:	00001388 	.word	0x00001388
 8002ec0:	efffffff 	.word	0xefffffff

08002ec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e044      	b.n	8002f60 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2274      	movs	r2, #116	; 0x74
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f7fe fcf1 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2224      	movs	r2, #36	; 0x24
 8002ef2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2101      	movs	r1, #1
 8002f00:	438a      	bics	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 fc16 	bl	8003738 <UART_SetConfig>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e024      	b.n	8002f60 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 fd49 	bl	80039b8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	490d      	ldr	r1, [pc, #52]	; (8002f68 <HAL_UART_Init+0xa4>)
 8002f32:	400a      	ands	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2108      	movs	r1, #8
 8002f42:	438a      	bics	r2, r1
 8002f44:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2101      	movs	r1, #1
 8002f52:	430a      	orrs	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f000 fde1 	bl	8003b20 <UART_CheckIdleState>
 8002f5e:	0003      	movs	r3, r0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	fffff7ff 	.word	0xfffff7ff

08002f6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	1dbb      	adds	r3, r7, #6
 8002f7a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d000      	beq.n	8002f86 <HAL_UART_Transmit+0x1a>
 8002f84:	e096      	b.n	80030b4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_UART_Transmit+0x28>
 8002f8c:	1dbb      	adds	r3, r7, #6
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e08e      	b.n	80030b6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	015b      	lsls	r3, r3, #5
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d109      	bne.n	8002fb8 <HAL_UART_Transmit+0x4c>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d001      	beq.n	8002fb8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e07e      	b.n	80030b6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2274      	movs	r2, #116	; 0x74
 8002fbc:	5c9b      	ldrb	r3, [r3, r2]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_UART_Transmit+0x5a>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e077      	b.n	80030b6 <HAL_UART_Transmit+0x14a>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2274      	movs	r2, #116	; 0x74
 8002fca:	2101      	movs	r1, #1
 8002fcc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2221      	movs	r2, #33	; 0x21
 8002fda:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fdc:	f7fe fe00 	bl	8001be0 <HAL_GetTick>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1dba      	adds	r2, r7, #6
 8002fe8:	2150      	movs	r1, #80	; 0x50
 8002fea:	8812      	ldrh	r2, [r2, #0]
 8002fec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1dba      	adds	r2, r7, #6
 8002ff2:	2152      	movs	r1, #82	; 0x52
 8002ff4:	8812      	ldrh	r2, [r2, #0]
 8002ff6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	015b      	lsls	r3, r3, #5
 8003000:	429a      	cmp	r2, r3
 8003002:	d108      	bne.n	8003016 <HAL_UART_Transmit+0xaa>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d104      	bne.n	8003016 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	e003      	b.n	800301e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2274      	movs	r2, #116	; 0x74
 8003022:	2100      	movs	r1, #0
 8003024:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003026:	e02d      	b.n	8003084 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	0013      	movs	r3, r2
 8003032:	2200      	movs	r2, #0
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	f000 fdbb 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 800303a:	1e03      	subs	r3, r0, #0
 800303c:	d001      	beq.n	8003042 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e039      	b.n	80030b6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	881a      	ldrh	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	05d2      	lsls	r2, r2, #23
 8003052:	0dd2      	lsrs	r2, r2, #23
 8003054:	b292      	uxth	r2, r2
 8003056:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	3302      	adds	r3, #2
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e008      	b.n	8003072 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	b292      	uxth	r2, r2
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	3301      	adds	r3, #1
 8003070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2252      	movs	r2, #82	; 0x52
 8003076:	5a9b      	ldrh	r3, [r3, r2]
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b299      	uxth	r1, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2252      	movs	r2, #82	; 0x52
 8003082:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2252      	movs	r2, #82	; 0x52
 8003088:	5a9b      	ldrh	r3, [r3, r2]
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1cb      	bne.n	8003028 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	0013      	movs	r3, r2
 800309a:	2200      	movs	r2, #0
 800309c:	2140      	movs	r1, #64	; 0x40
 800309e:	f000 fd87 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 80030a2:	1e03      	subs	r3, r0, #0
 80030a4:	d001      	beq.n	80030aa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e005      	b.n	80030b6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
  }
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b008      	add	sp, #32
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b088      	sub	sp, #32
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	1dbb      	adds	r3, r7, #6
 80030ca:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d150      	bne.n	8003176 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_UART_Receive_IT+0x24>
 80030da:	1dbb      	adds	r3, r7, #6
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e048      	b.n	8003178 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	015b      	lsls	r3, r3, #5
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d109      	bne.n	8003106 <HAL_UART_Receive_IT+0x48>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2201      	movs	r2, #1
 80030fe:	4013      	ands	r3, r2
 8003100:	d001      	beq.n	8003106 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e038      	b.n	8003178 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2274      	movs	r2, #116	; 0x74
 800310a:	5c9b      	ldrb	r3, [r3, r2]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_UART_Receive_IT+0x56>
 8003110:	2302      	movs	r3, #2
 8003112:	e031      	b.n	8003178 <HAL_UART_Receive_IT+0xba>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2274      	movs	r2, #116	; 0x74
 8003118:	2101      	movs	r1, #1
 800311a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	4013      	ands	r3, r2
 800312e:	d019      	beq.n	8003164 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003130:	f3ef 8310 	mrs	r3, PRIMASK
 8003134:	613b      	str	r3, [r7, #16]
  return(result);
 8003136:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	2301      	movs	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f383 8810 	msr	PRIMASK, r3
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2180      	movs	r1, #128	; 0x80
 8003152:	04c9      	lsls	r1, r1, #19
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f383 8810 	msr	PRIMASK, r3
}
 8003162:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003164:	1dbb      	adds	r3, r7, #6
 8003166:	881a      	ldrh	r2, [r3, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	0018      	movs	r0, r3
 800316e:	f000 fde3 	bl	8003d38 <UART_Start_Receive_IT>
 8003172:	0003      	movs	r3, r0
 8003174:	e000      	b.n	8003178 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b008      	add	sp, #32
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b0ab      	sub	sp, #172	; 0xac
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	22a4      	movs	r2, #164	; 0xa4
 8003190:	18b9      	adds	r1, r7, r2
 8003192:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	20a0      	movs	r0, #160	; 0xa0
 800319c:	1839      	adds	r1, r7, r0
 800319e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	219c      	movs	r1, #156	; 0x9c
 80031a8:	1879      	adds	r1, r7, r1
 80031aa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031ac:	0011      	movs	r1, r2
 80031ae:	18bb      	adds	r3, r7, r2
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a99      	ldr	r2, [pc, #612]	; (8003418 <HAL_UART_IRQHandler+0x298>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	2298      	movs	r2, #152	; 0x98
 80031b8:	18bc      	adds	r4, r7, r2
 80031ba:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80031bc:	18bb      	adds	r3, r7, r2
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d114      	bne.n	80031ee <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031c4:	187b      	adds	r3, r7, r1
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2220      	movs	r2, #32
 80031ca:	4013      	ands	r3, r2
 80031cc:	d00f      	beq.n	80031ee <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031ce:	183b      	adds	r3, r7, r0
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2220      	movs	r2, #32
 80031d4:	4013      	ands	r3, r2
 80031d6:	d00a      	beq.n	80031ee <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d100      	bne.n	80031e2 <HAL_UART_IRQHandler+0x62>
 80031e0:	e27e      	b.n	80036e0 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	0010      	movs	r0, r2
 80031ea:	4798      	blx	r3
      }
      return;
 80031ec:	e278      	b.n	80036e0 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031ee:	2398      	movs	r3, #152	; 0x98
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d100      	bne.n	80031fa <HAL_UART_IRQHandler+0x7a>
 80031f8:	e114      	b.n	8003424 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031fa:	239c      	movs	r3, #156	; 0x9c
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2201      	movs	r2, #1
 8003202:	4013      	ands	r3, r2
 8003204:	d106      	bne.n	8003214 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003206:	23a0      	movs	r3, #160	; 0xa0
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a83      	ldr	r2, [pc, #524]	; (800341c <HAL_UART_IRQHandler+0x29c>)
 800320e:	4013      	ands	r3, r2
 8003210:	d100      	bne.n	8003214 <HAL_UART_IRQHandler+0x94>
 8003212:	e107      	b.n	8003424 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003214:	23a4      	movs	r3, #164	; 0xa4
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2201      	movs	r2, #1
 800321c:	4013      	ands	r3, r2
 800321e:	d012      	beq.n	8003246 <HAL_UART_IRQHandler+0xc6>
 8003220:	23a0      	movs	r3, #160	; 0xa0
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4013      	ands	r3, r2
 800322c:	d00b      	beq.n	8003246 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2201      	movs	r2, #1
 8003234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	589b      	ldr	r3, [r3, r2]
 800323c:	2201      	movs	r2, #1
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003246:	23a4      	movs	r3, #164	; 0xa4
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2202      	movs	r2, #2
 800324e:	4013      	ands	r3, r2
 8003250:	d011      	beq.n	8003276 <HAL_UART_IRQHandler+0xf6>
 8003252:	239c      	movs	r3, #156	; 0x9c
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2201      	movs	r2, #1
 800325a:	4013      	ands	r3, r2
 800325c:	d00b      	beq.n	8003276 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2202      	movs	r2, #2
 8003264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2280      	movs	r2, #128	; 0x80
 800326a:	589b      	ldr	r3, [r3, r2]
 800326c:	2204      	movs	r2, #4
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2180      	movs	r1, #128	; 0x80
 8003274:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003276:	23a4      	movs	r3, #164	; 0xa4
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2204      	movs	r2, #4
 800327e:	4013      	ands	r3, r2
 8003280:	d011      	beq.n	80032a6 <HAL_UART_IRQHandler+0x126>
 8003282:	239c      	movs	r3, #156	; 0x9c
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2201      	movs	r2, #1
 800328a:	4013      	ands	r3, r2
 800328c:	d00b      	beq.n	80032a6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2204      	movs	r2, #4
 8003294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	589b      	ldr	r3, [r3, r2]
 800329c:	2202      	movs	r2, #2
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2180      	movs	r1, #128	; 0x80
 80032a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032a6:	23a4      	movs	r3, #164	; 0xa4
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2208      	movs	r2, #8
 80032ae:	4013      	ands	r3, r2
 80032b0:	d017      	beq.n	80032e2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032b2:	23a0      	movs	r3, #160	; 0xa0
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2220      	movs	r2, #32
 80032ba:	4013      	ands	r3, r2
 80032bc:	d105      	bne.n	80032ca <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032be:	239c      	movs	r3, #156	; 0x9c
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2201      	movs	r2, #1
 80032c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032c8:	d00b      	beq.n	80032e2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2208      	movs	r2, #8
 80032d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	589b      	ldr	r3, [r3, r2]
 80032d8:	2208      	movs	r2, #8
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2180      	movs	r1, #128	; 0x80
 80032e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032e2:	23a4      	movs	r3, #164	; 0xa4
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	4013      	ands	r3, r2
 80032ee:	d013      	beq.n	8003318 <HAL_UART_IRQHandler+0x198>
 80032f0:	23a0      	movs	r3, #160	; 0xa0
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	04db      	lsls	r3, r3, #19
 80032fa:	4013      	ands	r3, r2
 80032fc:	d00c      	beq.n	8003318 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2280      	movs	r2, #128	; 0x80
 800330c:	589b      	ldr	r3, [r3, r2]
 800330e:	2220      	movs	r2, #32
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	589b      	ldr	r3, [r3, r2]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d100      	bne.n	8003324 <HAL_UART_IRQHandler+0x1a4>
 8003322:	e1df      	b.n	80036e4 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003324:	23a4      	movs	r3, #164	; 0xa4
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2220      	movs	r2, #32
 800332c:	4013      	ands	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003330:	23a0      	movs	r3, #160	; 0xa0
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2220      	movs	r2, #32
 8003338:	4013      	ands	r3, r2
 800333a:	d008      	beq.n	800334e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	0010      	movs	r0, r2
 800334c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	589b      	ldr	r3, [r3, r2]
 8003354:	2194      	movs	r1, #148	; 0x94
 8003356:	187a      	adds	r2, r7, r1
 8003358:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2240      	movs	r2, #64	; 0x40
 8003362:	4013      	ands	r3, r2
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d004      	beq.n	8003372 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003368:	187b      	adds	r3, r7, r1
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2228      	movs	r2, #40	; 0x28
 800336e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003370:	d047      	beq.n	8003402 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	0018      	movs	r0, r3
 8003376:	f000 fd7b 	bl	8003e70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2240      	movs	r2, #64	; 0x40
 8003382:	4013      	ands	r3, r2
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d137      	bne.n	80033f8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003388:	f3ef 8310 	mrs	r3, PRIMASK
 800338c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800338e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003390:	2090      	movs	r0, #144	; 0x90
 8003392:	183a      	adds	r2, r7, r0
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	2301      	movs	r3, #1
 8003398:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2140      	movs	r1, #64	; 0x40
 80033ae:	438a      	bics	r2, r1
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	183b      	adds	r3, r7, r0
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ba:	f383 8810 	msr	PRIMASK, r3
}
 80033be:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d012      	beq.n	80033ee <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a14      	ldr	r2, [pc, #80]	; (8003420 <HAL_UART_IRQHandler+0x2a0>)
 80033ce:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7fe fd8f 	bl	8001ef8 <HAL_DMA_Abort_IT>
 80033da:	1e03      	subs	r3, r0, #0
 80033dc:	d01a      	beq.n	8003414 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	0018      	movs	r0, r3
 80033ea:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ec:	e012      	b.n	8003414 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 f98d 	bl	8003710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f6:	e00d      	b.n	8003414 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 f988 	bl	8003710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003400:	e008      	b.n	8003414 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	0018      	movs	r0, r3
 8003406:	f000 f983 	bl	8003710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2280      	movs	r2, #128	; 0x80
 800340e:	2100      	movs	r1, #0
 8003410:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003412:	e167      	b.n	80036e4 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	46c0      	nop			; (mov r8, r8)
    return;
 8003416:	e165      	b.n	80036e4 <HAL_UART_IRQHandler+0x564>
 8003418:	0000080f 	.word	0x0000080f
 800341c:	04000120 	.word	0x04000120
 8003420:	08003f35 	.word	0x08003f35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003428:	2b01      	cmp	r3, #1
 800342a:	d000      	beq.n	800342e <HAL_UART_IRQHandler+0x2ae>
 800342c:	e131      	b.n	8003692 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800342e:	23a4      	movs	r3, #164	; 0xa4
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2210      	movs	r2, #16
 8003436:	4013      	ands	r3, r2
 8003438:	d100      	bne.n	800343c <HAL_UART_IRQHandler+0x2bc>
 800343a:	e12a      	b.n	8003692 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800343c:	23a0      	movs	r3, #160	; 0xa0
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2210      	movs	r2, #16
 8003444:	4013      	ands	r3, r2
 8003446:	d100      	bne.n	800344a <HAL_UART_IRQHandler+0x2ca>
 8003448:	e123      	b.n	8003692 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2210      	movs	r2, #16
 8003450:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2240      	movs	r2, #64	; 0x40
 800345a:	4013      	ands	r3, r2
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	d000      	beq.n	8003462 <HAL_UART_IRQHandler+0x2e2>
 8003460:	e09b      	b.n	800359a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	217e      	movs	r1, #126	; 0x7e
 800346c:	187b      	adds	r3, r7, r1
 800346e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003470:	187b      	adds	r3, r7, r1
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d100      	bne.n	800347a <HAL_UART_IRQHandler+0x2fa>
 8003478:	e136      	b.n	80036e8 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2258      	movs	r2, #88	; 0x58
 800347e:	5a9b      	ldrh	r3, [r3, r2]
 8003480:	187a      	adds	r2, r7, r1
 8003482:	8812      	ldrh	r2, [r2, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d300      	bcc.n	800348a <HAL_UART_IRQHandler+0x30a>
 8003488:	e12e      	b.n	80036e8 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	187a      	adds	r2, r7, r1
 800348e:	215a      	movs	r1, #90	; 0x5a
 8003490:	8812      	ldrh	r2, [r2, #0]
 8003492:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b20      	cmp	r3, #32
 800349c:	d06e      	beq.n	800357c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349e:	f3ef 8310 	mrs	r3, PRIMASK
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80034a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80034a8:	2301      	movs	r3, #1
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ae:	f383 8810 	msr	PRIMASK, r3
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	498e      	ldr	r1, [pc, #568]	; (80036f8 <HAL_UART_IRQHandler+0x578>)
 80034c0:	400a      	ands	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	f383 8810 	msr	PRIMASK, r3
}
 80034ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d0:	f3ef 8310 	mrs	r3, PRIMASK
 80034d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80034d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d8:	677b      	str	r3, [r7, #116]	; 0x74
 80034da:	2301      	movs	r3, #1
 80034dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e0:	f383 8810 	msr	PRIMASK, r3
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	438a      	bics	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
 80034f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034fc:	f383 8810 	msr	PRIMASK, r3
}
 8003500:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003502:	f3ef 8310 	mrs	r3, PRIMASK
 8003506:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003508:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800350a:	673b      	str	r3, [r7, #112]	; 0x70
 800350c:	2301      	movs	r3, #1
 800350e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003512:	f383 8810 	msr	PRIMASK, r3
}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2140      	movs	r1, #64	; 0x40
 8003524:	438a      	bics	r2, r1
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800352a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352e:	f383 8810 	msr	PRIMASK, r3
}
 8003532:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003540:	f3ef 8310 	mrs	r3, PRIMASK
 8003544:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003546:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003548:	66fb      	str	r3, [r7, #108]	; 0x6c
 800354a:	2301      	movs	r3, #1
 800354c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003550:	f383 8810 	msr	PRIMASK, r3
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2110      	movs	r1, #16
 8003562:	438a      	bics	r2, r1
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003568:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356c:	f383 8810 	msr	PRIMASK, r3
}
 8003570:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	0018      	movs	r0, r3
 8003578:	f7fe fc86 	bl	8001e88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2258      	movs	r2, #88	; 0x58
 8003580:	5a9a      	ldrh	r2, [r3, r2]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	215a      	movs	r1, #90	; 0x5a
 8003586:	5a5b      	ldrh	r3, [r3, r1]
 8003588:	b29b      	uxth	r3, r3
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	b29a      	uxth	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	0011      	movs	r1, r2
 8003592:	0018      	movs	r0, r3
 8003594:	f000 f8c4 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003598:	e0a6      	b.n	80036e8 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2258      	movs	r2, #88	; 0x58
 800359e:	5a99      	ldrh	r1, [r3, r2]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	225a      	movs	r2, #90	; 0x5a
 80035a4:	5a9b      	ldrh	r3, [r3, r2]
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	208e      	movs	r0, #142	; 0x8e
 80035aa:	183b      	adds	r3, r7, r0
 80035ac:	1a8a      	subs	r2, r1, r2
 80035ae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	225a      	movs	r2, #90	; 0x5a
 80035b4:	5a9b      	ldrh	r3, [r3, r2]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d100      	bne.n	80035be <HAL_UART_IRQHandler+0x43e>
 80035bc:	e096      	b.n	80036ec <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 80035be:	183b      	adds	r3, r7, r0
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d100      	bne.n	80035c8 <HAL_UART_IRQHandler+0x448>
 80035c6:	e091      	b.n	80036ec <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c8:	f3ef 8310 	mrs	r3, PRIMASK
 80035cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80035ce:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d0:	2488      	movs	r4, #136	; 0x88
 80035d2:	193a      	adds	r2, r7, r4
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	2301      	movs	r3, #1
 80035d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f383 8810 	msr	PRIMASK, r3
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4943      	ldr	r1, [pc, #268]	; (80036fc <HAL_UART_IRQHandler+0x57c>)
 80035ee:	400a      	ands	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	193b      	adds	r3, r7, r4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f383 8810 	msr	PRIMASK, r3
}
 80035fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003600:	f3ef 8310 	mrs	r3, PRIMASK
 8003604:	61bb      	str	r3, [r7, #24]
  return(result);
 8003606:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003608:	2484      	movs	r4, #132	; 0x84
 800360a:	193a      	adds	r2, r7, r4
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	2301      	movs	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f383 8810 	msr	PRIMASK, r3
}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2101      	movs	r1, #1
 8003626:	438a      	bics	r2, r1
 8003628:	609a      	str	r2, [r3, #8]
 800362a:	193b      	adds	r3, r7, r4
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f383 8810 	msr	PRIMASK, r3
}
 8003636:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364a:	f3ef 8310 	mrs	r3, PRIMASK
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003652:	2480      	movs	r4, #128	; 0x80
 8003654:	193a      	adds	r2, r7, r4
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	2301      	movs	r3, #1
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	f383 8810 	msr	PRIMASK, r3
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2110      	movs	r1, #16
 8003670:	438a      	bics	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	193b      	adds	r3, r7, r4
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003682:	183b      	adds	r3, r7, r0
 8003684:	881a      	ldrh	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	0011      	movs	r1, r2
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f848 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003690:	e02c      	b.n	80036ec <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003692:	23a4      	movs	r3, #164	; 0xa4
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	4013      	ands	r3, r2
 800369c:	d00f      	beq.n	80036be <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800369e:	23a0      	movs	r3, #160	; 0xa0
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	4013      	ands	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d01e      	beq.n	80036f0 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	0010      	movs	r0, r2
 80036ba:	4798      	blx	r3
    }
    return;
 80036bc:	e018      	b.n	80036f0 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036be:	23a4      	movs	r3, #164	; 0xa4
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2240      	movs	r2, #64	; 0x40
 80036c6:	4013      	ands	r3, r2
 80036c8:	d013      	beq.n	80036f2 <HAL_UART_IRQHandler+0x572>
 80036ca:	23a0      	movs	r3, #160	; 0xa0
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2240      	movs	r2, #64	; 0x40
 80036d2:	4013      	ands	r3, r2
 80036d4:	d00d      	beq.n	80036f2 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 fc42 	bl	8003f62 <UART_EndTransmit_IT>
    return;
 80036de:	e008      	b.n	80036f2 <HAL_UART_IRQHandler+0x572>
      return;
 80036e0:	46c0      	nop			; (mov r8, r8)
 80036e2:	e006      	b.n	80036f2 <HAL_UART_IRQHandler+0x572>
    return;
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	e004      	b.n	80036f2 <HAL_UART_IRQHandler+0x572>
      return;
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	e002      	b.n	80036f2 <HAL_UART_IRQHandler+0x572>
      return;
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	e000      	b.n	80036f2 <HAL_UART_IRQHandler+0x572>
    return;
 80036f0:	46c0      	nop			; (mov r8, r8)
  }

}
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b02b      	add	sp, #172	; 0xac
 80036f6:	bd90      	pop	{r4, r7, pc}
 80036f8:	fffffeff 	.word	0xfffffeff
 80036fc:	fffffedf 	.word	0xfffffedf

08003700 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	000a      	movs	r2, r1
 800372a:	1cbb      	adds	r3, r7, #2
 800372c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003740:	231e      	movs	r3, #30
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a8d      	ldr	r2, [pc, #564]	; (800399c <UART_SetConfig+0x264>)
 8003768:	4013      	ands	r3, r2
 800376a:	0019      	movs	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	430a      	orrs	r2, r1
 8003774:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a88      	ldr	r2, [pc, #544]	; (80039a0 <UART_SetConfig+0x268>)
 800377e:	4013      	ands	r3, r2
 8003780:	0019      	movs	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4a7f      	ldr	r2, [pc, #508]	; (80039a4 <UART_SetConfig+0x26c>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a7b      	ldr	r2, [pc, #492]	; (80039a8 <UART_SetConfig+0x270>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d127      	bne.n	800380e <UART_SetConfig+0xd6>
 80037be:	4b7b      	ldr	r3, [pc, #492]	; (80039ac <UART_SetConfig+0x274>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	2203      	movs	r2, #3
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d00d      	beq.n	80037e6 <UART_SetConfig+0xae>
 80037ca:	d81b      	bhi.n	8003804 <UART_SetConfig+0xcc>
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d014      	beq.n	80037fa <UART_SetConfig+0xc2>
 80037d0:	d818      	bhi.n	8003804 <UART_SetConfig+0xcc>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <UART_SetConfig+0xa4>
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d00a      	beq.n	80037f0 <UART_SetConfig+0xb8>
 80037da:	e013      	b.n	8003804 <UART_SetConfig+0xcc>
 80037dc:	231f      	movs	r3, #31
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e021      	b.n	800382a <UART_SetConfig+0xf2>
 80037e6:	231f      	movs	r3, #31
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	2202      	movs	r2, #2
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	e01c      	b.n	800382a <UART_SetConfig+0xf2>
 80037f0:	231f      	movs	r3, #31
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	2204      	movs	r2, #4
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e017      	b.n	800382a <UART_SetConfig+0xf2>
 80037fa:	231f      	movs	r3, #31
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	2208      	movs	r2, #8
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e012      	b.n	800382a <UART_SetConfig+0xf2>
 8003804:	231f      	movs	r3, #31
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	2210      	movs	r2, #16
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e00d      	b.n	800382a <UART_SetConfig+0xf2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a67      	ldr	r2, [pc, #412]	; (80039b0 <UART_SetConfig+0x278>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d104      	bne.n	8003822 <UART_SetConfig+0xea>
 8003818:	231f      	movs	r3, #31
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e003      	b.n	800382a <UART_SetConfig+0xf2>
 8003822:	231f      	movs	r3, #31
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	2210      	movs	r2, #16
 8003828:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	429a      	cmp	r2, r3
 8003834:	d15d      	bne.n	80038f2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003836:	231f      	movs	r3, #31
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d015      	beq.n	800386c <UART_SetConfig+0x134>
 8003840:	dc18      	bgt.n	8003874 <UART_SetConfig+0x13c>
 8003842:	2b04      	cmp	r3, #4
 8003844:	d00d      	beq.n	8003862 <UART_SetConfig+0x12a>
 8003846:	dc15      	bgt.n	8003874 <UART_SetConfig+0x13c>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <UART_SetConfig+0x11a>
 800384c:	2b02      	cmp	r3, #2
 800384e:	d005      	beq.n	800385c <UART_SetConfig+0x124>
 8003850:	e010      	b.n	8003874 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003852:	f7ff fa53 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8003856:	0003      	movs	r3, r0
 8003858:	61bb      	str	r3, [r7, #24]
        break;
 800385a:	e012      	b.n	8003882 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800385c:	4b55      	ldr	r3, [pc, #340]	; (80039b4 <UART_SetConfig+0x27c>)
 800385e:	61bb      	str	r3, [r7, #24]
        break;
 8003860:	e00f      	b.n	8003882 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003862:	f7ff f9dd 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8003866:	0003      	movs	r3, r0
 8003868:	61bb      	str	r3, [r7, #24]
        break;
 800386a:	e00a      	b.n	8003882 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	61bb      	str	r3, [r7, #24]
        break;
 8003872:	e006      	b.n	8003882 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003878:	231e      	movs	r3, #30
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2201      	movs	r2, #1
 800387e:	701a      	strb	r2, [r3, #0]
        break;
 8003880:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d100      	bne.n	800388a <UART_SetConfig+0x152>
 8003888:	e07b      	b.n	8003982 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	005a      	lsls	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	18d2      	adds	r2, r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	0019      	movs	r1, r3
 800389c:	0010      	movs	r0, r2
 800389e:	f7fc fc3b 	bl	8000118 <__udivsi3>
 80038a2:	0003      	movs	r3, r0
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b0f      	cmp	r3, #15
 80038ac:	d91c      	bls.n	80038e8 <UART_SetConfig+0x1b0>
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	025b      	lsls	r3, r3, #9
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d217      	bcs.n	80038e8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	200e      	movs	r0, #14
 80038be:	183b      	adds	r3, r7, r0
 80038c0:	210f      	movs	r1, #15
 80038c2:	438a      	bics	r2, r1
 80038c4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2207      	movs	r2, #7
 80038ce:	4013      	ands	r3, r2
 80038d0:	b299      	uxth	r1, r3
 80038d2:	183b      	adds	r3, r7, r0
 80038d4:	183a      	adds	r2, r7, r0
 80038d6:	8812      	ldrh	r2, [r2, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	183a      	adds	r2, r7, r0
 80038e2:	8812      	ldrh	r2, [r2, #0]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	e04c      	b.n	8003982 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80038e8:	231e      	movs	r3, #30
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e047      	b.n	8003982 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038f2:	231f      	movs	r3, #31
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d015      	beq.n	8003928 <UART_SetConfig+0x1f0>
 80038fc:	dc18      	bgt.n	8003930 <UART_SetConfig+0x1f8>
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d00d      	beq.n	800391e <UART_SetConfig+0x1e6>
 8003902:	dc15      	bgt.n	8003930 <UART_SetConfig+0x1f8>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <UART_SetConfig+0x1d6>
 8003908:	2b02      	cmp	r3, #2
 800390a:	d005      	beq.n	8003918 <UART_SetConfig+0x1e0>
 800390c:	e010      	b.n	8003930 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800390e:	f7ff f9f5 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8003912:	0003      	movs	r3, r0
 8003914:	61bb      	str	r3, [r7, #24]
        break;
 8003916:	e012      	b.n	800393e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003918:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <UART_SetConfig+0x27c>)
 800391a:	61bb      	str	r3, [r7, #24]
        break;
 800391c:	e00f      	b.n	800393e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800391e:	f7ff f97f 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8003922:	0003      	movs	r3, r0
 8003924:	61bb      	str	r3, [r7, #24]
        break;
 8003926:	e00a      	b.n	800393e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003928:	2380      	movs	r3, #128	; 0x80
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	61bb      	str	r3, [r7, #24]
        break;
 800392e:	e006      	b.n	800393e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003934:	231e      	movs	r3, #30
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
        break;
 800393c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01e      	beq.n	8003982 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	085a      	lsrs	r2, r3, #1
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	18d2      	adds	r2, r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	0019      	movs	r1, r3
 8003954:	0010      	movs	r0, r2
 8003956:	f7fc fbdf 	bl	8000118 <__udivsi3>
 800395a:	0003      	movs	r3, r0
 800395c:	b29b      	uxth	r3, r3
 800395e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b0f      	cmp	r3, #15
 8003964:	d909      	bls.n	800397a <UART_SetConfig+0x242>
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	025b      	lsls	r3, r3, #9
 800396c:	429a      	cmp	r2, r3
 800396e:	d204      	bcs.n	800397a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	60da      	str	r2, [r3, #12]
 8003978:	e003      	b.n	8003982 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800397a:	231e      	movs	r3, #30
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800398e:	231e      	movs	r3, #30
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	781b      	ldrb	r3, [r3, #0]
}
 8003994:	0018      	movs	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	b008      	add	sp, #32
 800399a:	bd80      	pop	{r7, pc}
 800399c:	ffff69f3 	.word	0xffff69f3
 80039a0:	ffffcfff 	.word	0xffffcfff
 80039a4:	fffff4ff 	.word	0xfffff4ff
 80039a8:	40013800 	.word	0x40013800
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40004400 	.word	0x40004400
 80039b4:	007a1200 	.word	0x007a1200

080039b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	2201      	movs	r2, #1
 80039c6:	4013      	ands	r3, r2
 80039c8:	d00b      	beq.n	80039e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a4a      	ldr	r2, [pc, #296]	; (8003afc <UART_AdvFeatureConfig+0x144>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	0019      	movs	r1, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	2202      	movs	r2, #2
 80039e8:	4013      	ands	r3, r2
 80039ea:	d00b      	beq.n	8003a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4a43      	ldr	r2, [pc, #268]	; (8003b00 <UART_AdvFeatureConfig+0x148>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	0019      	movs	r1, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	2204      	movs	r2, #4
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d00b      	beq.n	8003a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4a3b      	ldr	r2, [pc, #236]	; (8003b04 <UART_AdvFeatureConfig+0x14c>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	0019      	movs	r1, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d00b      	beq.n	8003a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4a34      	ldr	r2, [pc, #208]	; (8003b08 <UART_AdvFeatureConfig+0x150>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d00b      	beq.n	8003a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a2c      	ldr	r2, [pc, #176]	; (8003b0c <UART_AdvFeatureConfig+0x154>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	2220      	movs	r2, #32
 8003a70:	4013      	ands	r3, r2
 8003a72:	d00b      	beq.n	8003a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	4a25      	ldr	r2, [pc, #148]	; (8003b10 <UART_AdvFeatureConfig+0x158>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2240      	movs	r2, #64	; 0x40
 8003a92:	4013      	ands	r3, r2
 8003a94:	d01d      	beq.n	8003ad2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <UART_AdvFeatureConfig+0x15c>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	035b      	lsls	r3, r3, #13
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d10b      	bne.n	8003ad2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <UART_AdvFeatureConfig+0x160>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d00b      	beq.n	8003af4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4a0e      	ldr	r2, [pc, #56]	; (8003b1c <UART_AdvFeatureConfig+0x164>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	605a      	str	r2, [r3, #4]
  }
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	fffdffff 	.word	0xfffdffff
 8003b00:	fffeffff 	.word	0xfffeffff
 8003b04:	fffbffff 	.word	0xfffbffff
 8003b08:	ffff7fff 	.word	0xffff7fff
 8003b0c:	ffffefff 	.word	0xffffefff
 8003b10:	ffffdfff 	.word	0xffffdfff
 8003b14:	ffefffff 	.word	0xffefffff
 8003b18:	ff9fffff 	.word	0xff9fffff
 8003b1c:	fff7ffff 	.word	0xfff7ffff

08003b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2280      	movs	r2, #128	; 0x80
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b30:	f7fe f856 	bl	8001be0 <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2208      	movs	r2, #8
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d10c      	bne.n	8003b60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2280      	movs	r2, #128	; 0x80
 8003b4a:	0391      	lsls	r1, r2, #14
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <UART_CheckIdleState+0x8c>)
 8003b50:	9200      	str	r2, [sp, #0]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f000 f82c 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 8003b58:	1e03      	subs	r3, r0, #0
 8003b5a:	d001      	beq.n	8003b60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e021      	b.n	8003ba4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2204      	movs	r2, #4
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d10c      	bne.n	8003b88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2280      	movs	r2, #128	; 0x80
 8003b72:	03d1      	lsls	r1, r2, #15
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4a0d      	ldr	r2, [pc, #52]	; (8003bac <UART_CheckIdleState+0x8c>)
 8003b78:	9200      	str	r2, [sp, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f000 f818 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 8003b80:	1e03      	subs	r3, r0, #0
 8003b82:	d001      	beq.n	8003b88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e00d      	b.n	8003ba4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2274      	movs	r2, #116	; 0x74
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b004      	add	sp, #16
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	01ffffff 	.word	0x01ffffff

08003bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b094      	sub	sp, #80	; 0x50
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	1dfb      	adds	r3, r7, #7
 8003bbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc0:	e0a3      	b.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	d100      	bne.n	8003bca <UART_WaitOnFlagUntilTimeout+0x1a>
 8003bc8:	e09f      	b.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fe f809 	bl	8001be0 <HAL_GetTick>
 8003bce:	0002      	movs	r2, r0
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d13d      	bne.n	8003c5c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be0:	f3ef 8310 	mrs	r3, PRIMASK
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003be8:	647b      	str	r3, [r7, #68]	; 0x44
 8003bea:	2301      	movs	r3, #1
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	f383 8810 	msr	PRIMASK, r3
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	494c      	ldr	r1, [pc, #304]	; (8003d34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c02:	400a      	ands	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	f383 8810 	msr	PRIMASK, r3
}
 8003c10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c12:	f3ef 8310 	mrs	r3, PRIMASK
 8003c16:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c22:	f383 8810 	msr	PRIMASK, r3
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2101      	movs	r1, #1
 8003c34:	438a      	bics	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2274      	movs	r2, #116	; 0x74
 8003c54:	2100      	movs	r1, #0
 8003c56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e067      	b.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2204      	movs	r2, #4
 8003c64:	4013      	ands	r3, r2
 8003c66:	d050      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69da      	ldr	r2, [r3, #28]
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	401a      	ands	r2, r3
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d146      	bne.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2280      	movs	r2, #128	; 0x80
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c86:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8a:	613b      	str	r3, [r7, #16]
  return(result);
 8003c8c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c90:	2301      	movs	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f383 8810 	msr	PRIMASK, r3
}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4923      	ldr	r1, [pc, #140]	; (8003d34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003ca8:	400a      	ands	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f383 8810 	msr	PRIMASK, r3
}
 8003cb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cbe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f383 8810 	msr	PRIMASK, r3
}
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2101      	movs	r1, #1
 8003cda:	438a      	bics	r2, r1
 8003cdc:	609a      	str	r2, [r3, #8]
 8003cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	f383 8810 	msr	PRIMASK, r3
}
 8003ce8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2280      	movs	r2, #128	; 0x80
 8003cfa:	2120      	movs	r1, #32
 8003cfc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2274      	movs	r2, #116	; 0x74
 8003d02:	2100      	movs	r1, #0
 8003d04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e010      	b.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	4013      	ands	r3, r2
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	425a      	negs	r2, r3
 8003d1a:	4153      	adcs	r3, r2
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	001a      	movs	r2, r3
 8003d20:	1dfb      	adds	r3, r7, #7
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d100      	bne.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003d28:	e74b      	b.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b014      	add	sp, #80	; 0x50
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	fffffe5f 	.word	0xfffffe5f

08003d38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08c      	sub	sp, #48	; 0x30
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	1dbb      	adds	r3, r7, #6
 8003d44:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1dba      	adds	r2, r7, #6
 8003d50:	2158      	movs	r1, #88	; 0x58
 8003d52:	8812      	ldrh	r2, [r2, #0]
 8003d54:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1dba      	adds	r2, r7, #6
 8003d5a:	215a      	movs	r1, #90	; 0x5a
 8003d5c:	8812      	ldrh	r2, [r2, #0]
 8003d5e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	015b      	lsls	r3, r3, #5
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d10d      	bne.n	8003d8e <UART_Start_Receive_IT+0x56>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d104      	bne.n	8003d84 <UART_Start_Receive_IT+0x4c>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	225c      	movs	r2, #92	; 0x5c
 8003d7e:	4939      	ldr	r1, [pc, #228]	; (8003e64 <UART_Start_Receive_IT+0x12c>)
 8003d80:	5299      	strh	r1, [r3, r2]
 8003d82:	e01a      	b.n	8003dba <UART_Start_Receive_IT+0x82>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	225c      	movs	r2, #92	; 0x5c
 8003d88:	21ff      	movs	r1, #255	; 0xff
 8003d8a:	5299      	strh	r1, [r3, r2]
 8003d8c:	e015      	b.n	8003dba <UART_Start_Receive_IT+0x82>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10d      	bne.n	8003db2 <UART_Start_Receive_IT+0x7a>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d104      	bne.n	8003da8 <UART_Start_Receive_IT+0x70>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	225c      	movs	r2, #92	; 0x5c
 8003da2:	21ff      	movs	r1, #255	; 0xff
 8003da4:	5299      	strh	r1, [r3, r2]
 8003da6:	e008      	b.n	8003dba <UART_Start_Receive_IT+0x82>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	225c      	movs	r2, #92	; 0x5c
 8003dac:	217f      	movs	r1, #127	; 0x7f
 8003dae:	5299      	strh	r1, [r3, r2]
 8003db0:	e003      	b.n	8003dba <UART_Start_Receive_IT+0x82>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	225c      	movs	r2, #92	; 0x5c
 8003db6:	2100      	movs	r1, #0
 8003db8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2280      	movs	r2, #128	; 0x80
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2222      	movs	r2, #34	; 0x22
 8003dc6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dcc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003dce:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f383 8810 	msr	PRIMASK, r3
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2101      	movs	r1, #1
 8003dea:	430a      	orrs	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	f383 8810 	msr	PRIMASK, r3
}
 8003df8:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	015b      	lsls	r3, r3, #5
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d107      	bne.n	8003e16 <UART_Start_Receive_IT+0xde>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <UART_Start_Receive_IT+0x130>)
 8003e12:	665a      	str	r2, [r3, #100]	; 0x64
 8003e14:	e002      	b.n	8003e1c <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <UART_Start_Receive_IT+0x134>)
 8003e1a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2274      	movs	r2, #116	; 0x74
 8003e20:	2100      	movs	r1, #0
 8003e22:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e24:	f3ef 8310 	mrs	r3, PRIMASK
 8003e28:	613b      	str	r3, [r7, #16]
  return(result);
 8003e2a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2e:	2301      	movs	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f383 8810 	msr	PRIMASK, r3
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2190      	movs	r1, #144	; 0x90
 8003e46:	0049      	lsls	r1, r1, #1
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	f383 8810 	msr	PRIMASK, r3
}
 8003e56:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b00c      	add	sp, #48	; 0x30
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	000001ff 	.word	0x000001ff
 8003e68:	08004121 	.word	0x08004121
 8003e6c:	08003fb9 	.word	0x08003fb9

08003e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08e      	sub	sp, #56	; 0x38
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e78:	f3ef 8310 	mrs	r3, PRIMASK
 8003e7c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
 8003e82:	2301      	movs	r3, #1
 8003e84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f383 8810 	msr	PRIMASK, r3
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4925      	ldr	r1, [pc, #148]	; (8003f30 <UART_EndRxTransfer+0xc0>)
 8003e9a:	400a      	ands	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f383 8810 	msr	PRIMASK, r3
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8003eae:	623b      	str	r3, [r7, #32]
  return(result);
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	f383 8810 	msr	PRIMASK, r3
}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2101      	movs	r1, #1
 8003ecc:	438a      	bics	r2, r1
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	f383 8810 	msr	PRIMASK, r3
}
 8003eda:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d118      	bne.n	8003f16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eee:	2301      	movs	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f383 8810 	msr	PRIMASK, r3
}
 8003ef8:	46c0      	nop			; (mov r8, r8)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2110      	movs	r1, #16
 8003f06:	438a      	bics	r2, r1
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f383 8810 	msr	PRIMASK, r3
}
 8003f14:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b00e      	add	sp, #56	; 0x38
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	fffffedf 	.word	0xfffffedf

08003f34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	225a      	movs	r2, #90	; 0x5a
 8003f46:	2100      	movs	r1, #0
 8003f48:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2252      	movs	r2, #82	; 0x52
 8003f4e:	2100      	movs	r1, #0
 8003f50:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7ff fbdb 	bl	8003710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b004      	add	sp, #16
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f70:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	2301      	movs	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f383 8810 	msr	PRIMASK, r3
}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2140      	movs	r1, #64	; 0x40
 8003f8c:	438a      	bics	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f383 8810 	msr	PRIMASK, r3
}
 8003f9a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	0018      	movs	r0, r3
 8003fac:	f7ff fba8 	bl	8003700 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b006      	add	sp, #24
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b090      	sub	sp, #64	; 0x40
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003fc0:	203e      	movs	r0, #62	; 0x3e
 8003fc2:	183b      	adds	r3, r7, r0
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	215c      	movs	r1, #92	; 0x5c
 8003fc8:	5a52      	ldrh	r2, [r2, r1]
 8003fca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd0:	2b22      	cmp	r3, #34	; 0x22
 8003fd2:	d000      	beq.n	8003fd6 <UART_RxISR_8BIT+0x1e>
 8003fd4:	e095      	b.n	8004102 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	213c      	movs	r1, #60	; 0x3c
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003fe0:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	183b      	adds	r3, r7, r0
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b2d9      	uxtb	r1, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	400a      	ands	r2, r1
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	225a      	movs	r2, #90	; 0x5a
 8004006:	5a9b      	ldrh	r3, [r3, r2]
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b299      	uxth	r1, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	225a      	movs	r2, #90	; 0x5a
 8004012:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	225a      	movs	r2, #90	; 0x5a
 8004018:	5a9b      	ldrh	r3, [r3, r2]
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d178      	bne.n	8004112 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004020:	f3ef 8310 	mrs	r3, PRIMASK
 8004024:	61bb      	str	r3, [r7, #24]
  return(result);
 8004026:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
 800402a:	2301      	movs	r3, #1
 800402c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f383 8810 	msr	PRIMASK, r3
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4936      	ldr	r1, [pc, #216]	; (800411c <UART_RxISR_8BIT+0x164>)
 8004042:	400a      	ands	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	f383 8810 	msr	PRIMASK, r3
}
 8004050:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004052:	f3ef 8310 	mrs	r3, PRIMASK
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
 800405c:	2301      	movs	r3, #1
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2101      	movs	r1, #1
 8004074:	438a      	bics	r2, r1
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	f383 8810 	msr	PRIMASK, r3
}
 8004082:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004094:	2b01      	cmp	r3, #1
 8004096:	d12f      	bne.n	80040f8 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409e:	f3ef 8310 	mrs	r3, PRIMASK
 80040a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80040a4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a6:	633b      	str	r3, [r7, #48]	; 0x30
 80040a8:	2301      	movs	r3, #1
 80040aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f383 8810 	msr	PRIMASK, r3
}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2110      	movs	r1, #16
 80040c0:	438a      	bics	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	2210      	movs	r2, #16
 80040d8:	4013      	ands	r3, r2
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d103      	bne.n	80040e6 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2210      	movs	r2, #16
 80040e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2258      	movs	r2, #88	; 0x58
 80040ea:	5a9a      	ldrh	r2, [r3, r2]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7ff fb15 	bl	8003720 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040f6:	e00c      	b.n	8004112 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f7fc f898 	bl	8000230 <HAL_UART_RxCpltCallback>
}
 8004100:	e007      	b.n	8004112 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699a      	ldr	r2, [r3, #24]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2108      	movs	r1, #8
 800410e:	430a      	orrs	r2, r1
 8004110:	619a      	str	r2, [r3, #24]
}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	46bd      	mov	sp, r7
 8004116:	b010      	add	sp, #64	; 0x40
 8004118:	bd80      	pop	{r7, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	fffffedf 	.word	0xfffffedf

08004120 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b090      	sub	sp, #64	; 0x40
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004128:	203e      	movs	r0, #62	; 0x3e
 800412a:	183b      	adds	r3, r7, r0
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	215c      	movs	r1, #92	; 0x5c
 8004130:	5a52      	ldrh	r2, [r2, r1]
 8004132:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004138:	2b22      	cmp	r3, #34	; 0x22
 800413a:	d000      	beq.n	800413e <UART_RxISR_16BIT+0x1e>
 800413c:	e095      	b.n	800426a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	213c      	movs	r1, #60	; 0x3c
 8004144:	187b      	adds	r3, r7, r1
 8004146:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004148:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004150:	187b      	adds	r3, r7, r1
 8004152:	183a      	adds	r2, r7, r0
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	8812      	ldrh	r2, [r2, #0]
 8004158:	4013      	ands	r3, r2
 800415a:	b29a      	uxth	r2, r3
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	1c9a      	adds	r2, r3, #2
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	225a      	movs	r2, #90	; 0x5a
 800416e:	5a9b      	ldrh	r3, [r3, r2]
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b299      	uxth	r1, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	225a      	movs	r2, #90	; 0x5a
 800417a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	225a      	movs	r2, #90	; 0x5a
 8004180:	5a9b      	ldrh	r3, [r3, r2]
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d178      	bne.n	800427a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004188:	f3ef 8310 	mrs	r3, PRIMASK
 800418c:	617b      	str	r3, [r7, #20]
  return(result);
 800418e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
 8004192:	2301      	movs	r3, #1
 8004194:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f383 8810 	msr	PRIMASK, r3
}
 800419c:	46c0      	nop			; (mov r8, r8)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4936      	ldr	r1, [pc, #216]	; (8004284 <UART_RxISR_16BIT+0x164>)
 80041aa:	400a      	ands	r2, r1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f383 8810 	msr	PRIMASK, r3
}
 80041b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ba:	f3ef 8310 	mrs	r3, PRIMASK
 80041be:	623b      	str	r3, [r7, #32]
  return(result);
 80041c0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c2:	633b      	str	r3, [r7, #48]	; 0x30
 80041c4:	2301      	movs	r3, #1
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f383 8810 	msr	PRIMASK, r3
}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2101      	movs	r1, #1
 80041dc:	438a      	bics	r2, r1
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	f383 8810 	msr	PRIMASK, r3
}
 80041ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d12f      	bne.n	8004260 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004206:	f3ef 8310 	mrs	r3, PRIMASK
 800420a:	60bb      	str	r3, [r7, #8]
  return(result);
 800420c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004210:	2301      	movs	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f383 8810 	msr	PRIMASK, r3
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2110      	movs	r1, #16
 8004228:	438a      	bics	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f383 8810 	msr	PRIMASK, r3
}
 8004236:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	2210      	movs	r2, #16
 8004240:	4013      	ands	r3, r2
 8004242:	2b10      	cmp	r3, #16
 8004244:	d103      	bne.n	800424e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2210      	movs	r2, #16
 800424c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2258      	movs	r2, #88	; 0x58
 8004252:	5a9a      	ldrh	r2, [r3, r2]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	0011      	movs	r1, r2
 8004258:	0018      	movs	r0, r3
 800425a:	f7ff fa61 	bl	8003720 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800425e:	e00c      	b.n	800427a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	0018      	movs	r0, r3
 8004264:	f7fb ffe4 	bl	8000230 <HAL_UART_RxCpltCallback>
}
 8004268:	e007      	b.n	800427a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2108      	movs	r1, #8
 8004276:	430a      	orrs	r2, r1
 8004278:	619a      	str	r2, [r3, #24]
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	46bd      	mov	sp, r7
 800427e:	b010      	add	sp, #64	; 0x40
 8004280:	bd80      	pop	{r7, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	fffffedf 	.word	0xfffffedf

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	2600      	movs	r6, #0
 800428c:	4d0c      	ldr	r5, [pc, #48]	; (80042c0 <__libc_init_array+0x38>)
 800428e:	4c0d      	ldr	r4, [pc, #52]	; (80042c4 <__libc_init_array+0x3c>)
 8004290:	1b64      	subs	r4, r4, r5
 8004292:	10a4      	asrs	r4, r4, #2
 8004294:	42a6      	cmp	r6, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	2600      	movs	r6, #0
 800429a:	f000 f821 	bl	80042e0 <_init>
 800429e:	4d0a      	ldr	r5, [pc, #40]	; (80042c8 <__libc_init_array+0x40>)
 80042a0:	4c0a      	ldr	r4, [pc, #40]	; (80042cc <__libc_init_array+0x44>)
 80042a2:	1b64      	subs	r4, r4, r5
 80042a4:	10a4      	asrs	r4, r4, #2
 80042a6:	42a6      	cmp	r6, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	00b3      	lsls	r3, r6, #2
 80042ae:	58eb      	ldr	r3, [r5, r3]
 80042b0:	4798      	blx	r3
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	00b3      	lsls	r3, r6, #2
 80042b8:	58eb      	ldr	r3, [r5, r3]
 80042ba:	4798      	blx	r3
 80042bc:	3601      	adds	r6, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	08004330 	.word	0x08004330
 80042c4:	08004330 	.word	0x08004330
 80042c8:	08004330 	.word	0x08004330
 80042cc:	08004334 	.word	0x08004334

080042d0 <memset>:
 80042d0:	0003      	movs	r3, r0
 80042d2:	1882      	adds	r2, r0, r2
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d100      	bne.n	80042da <memset+0xa>
 80042d8:	4770      	bx	lr
 80042da:	7019      	strb	r1, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	e7f9      	b.n	80042d4 <memset+0x4>

080042e0 <_init>:
 80042e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e6:	bc08      	pop	{r3}
 80042e8:	469e      	mov	lr, r3
 80042ea:	4770      	bx	lr

080042ec <_fini>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr
